#[version = "0.0.5"]
def @main(%input: Tensor[(1, 32, 32, 3), float32], %zero_point__92: Tensor[(64), int8], %zero_point__86: Tensor[(16), int8], %zero_point__72: int32, %zero_point__70: int8, %zero_point__68: int8, %zero_point__389: int8, %zero_point__377: int8, %zero_point__368: int8, %zero_point__353: int8, %zero_point__318: int8, %zero_point__298: int8, %zero_point__274: int8, %zero_point__239: int8, %zero_point__217: int8, %zero_point__197: int8, %zero_point__173: int8, %zero_point__146: Tensor[(16), int32], %zero_point__138: Tensor[(64), int32], %zero_point__112: Tensor[(32), int32], %zero_point__106: Tensor[(32), int8], %scale__99: Tensor[(64), float32], %scale__97: Tensor[(64), float32], %scale__95: Tensor[(64), float32], %scale__93: Tensor[(64), float32], %scale__91: Tensor[(64), float32], %scale__89: Tensor[(64), float32], %scale__87: Tensor[(16), float32], %scale__85: Tensor[(16), float32], %scale__83: Tensor[(16), float32], %scale__81: Tensor[(16), float32], %scale__79: Tensor[(16), float32], %scale__77: Tensor[(32), float32], %scale__75: Tensor[(32), float32], %scale__73: Tensor[(32), float32], %scale__71: float32, %scale__69: float32, %scale__65: float32, %scale__388: float32, %scale__382: float32, %scale__380: float32, %scale__376: float32, %scale__365: float32, %scale__358: float32, %scale__352: float32, %scale__345: float32, %scale__334: float32, %scale__325: float32, %scale__317: float32, %scale__308: float32, %scale__297: float32, %scale__288: float32, %scale__279: float32, %scale__273: float32, %scale__264: float32, %scale__257: float32, %scale__253: float32, %scale__240: float32, %scale__231: float32, %scale__218: float32, %scale__209: float32, %scale__198: float32, %scale__196: float32, %scale__185: float32, %scale__178: float32, %scale__174: float32, %scale__163: float32, %scale__156: float32, %scale__147: Tensor[(16), float32], %scale__145: Tensor[(16), float32], %scale__143: Tensor[(32), float32], %scale__141: Tensor[(32), float32], %scale__139: Tensor[(32), float32], %scale__137: Tensor[(64), float32], %scale__135: Tensor[(64), float32], %scale__133: Tensor[(64), float32], %scale__131: Tensor[(64), float32], %scale__129: Tensor[(64), float32], %scale__127: Tensor[(64), float32], %scale__125: Tensor[(16), float32], %scale__123: Tensor[(16), float32], %scale__121: Tensor[(16), float32], %scale__119: Tensor[(16), float32], %scale__117: Tensor[(16), float32], %scale__115: Tensor[(32), float32], %scale__113: Tensor[(32), float32], %scale__111: Tensor[(32), float32], %scale__109: Tensor[(16), float32], %scale__107: Tensor[(16), float32], %scale__105: Tensor[(32), float32], %scale__103: Tensor[(32), float32], %scale__101: Tensor[(32), float32], %pad_const__329: Tensor[(8), int64], %pad_const__250: Tensor[(8), int64], %model/dense/MatMul: Tensor[(64, 10), int8], %model/dense/BiasAdd/ReadVariableOp: Tensor[(10), int32], %model/conv2d_9/Conv2D: Tensor[(32, 32, 3, 3), int8], %model/conv2d_8/Conv2D: Tensor[(32, 32, 3, 3), int8], %model/conv2d_7/Conv2D: Tensor[(32, 16, 3, 3), int8], %model/conv2d_6/Conv2D: Tensor[(16, 16, 3, 3), int8], %model/conv2d_5/Conv2D: Tensor[(16, 16, 3, 3), int8], %model/conv2d_4/Conv2D: Tensor[(16, 16, 3, 3), int8], %model/conv2d_3/Conv2D: Tensor[(16, 16, 3, 3), int8], %model/conv2d_2/Conv2D: Tensor[(16, 16, 3, 3), int8], %model/conv2d_18/Conv2D: Tensor[(64, 64, 3, 3), int8], %model/conv2d_17/Conv2D: Tensor[(64, 64, 3, 3), int8], %model/conv2d_16/Conv2D: Tensor[(64, 64, 3, 3), int8], %model/conv2d_15/Conv2D: Tensor[(64, 64, 3, 3), int8], %model/conv2d_14/Conv2D: Tensor[(64, 64, 3, 3), int8], %model/conv2d_13/Conv2D: Tensor[(64, 32, 3, 3), int8], %model/conv2d_12/Conv2D: Tensor[(32, 32, 3, 3), int8], %model/conv2d_11/Conv2D: Tensor[(32, 32, 3, 3), int8], %model/conv2d_10/Conv2D: Tensor[(32, 32, 3, 3), int8], %model/conv2d_1/Conv2D: Tensor[(16, 16, 3, 3), int8], %model/conv2d/Conv2D: Tensor[(16, 3, 3, 3), int8], %model/batch_normalization_9/FusedBatchNormV3: Tensor[(32), int32], %model/batch_normalization_8/FusedBatchNormV3: Tensor[(32), int32], %model/batch_normalization_7/FusedBatchNormV3: Tensor[(32), int32], %model/batch_normalization_6/FusedBatchNormV3: Tensor[(16), int32], %model/batch_normalization_5/FusedBatchNormV3: Tensor[(16), int32], %model/batch_normalization_4/FusedBatchNormV3: Tensor[(16), int32], %model/batch_normalization_3/FusedBatchNormV3: Tensor[(16), int32], %model/batch_normalization_2/FusedBatchNormV3: Tensor[(16), int32], %model/batch_normalization_18/FusedBatchNormV3: Tensor[(64), int32], %model/batch_normalization_17/FusedBatchNormV3: Tensor[(64), int32], %model/batch_normalization_16/FusedBatchNormV3: Tensor[(64), int32], %model/batch_normalization_15/FusedBatchNormV3: Tensor[(64), int32], %model/batch_normalization_14/FusedBatchNormV3: Tensor[(64), int32], %model/batch_normalization_13/FusedBatchNormV3: Tensor[(64), int32], %model/batch_normalization_12/FusedBatchNormV3: Tensor[(32), int32], %model/batch_normalization_11/FusedBatchNormV3: Tensor[(32), int32], %model/batch_normalization_10/FusedBatchNormV3: Tensor[(32), int32], %model/batch_normalization_1/FusedBatchNormV3: Tensor[(16), int32], %model/batch_normalization/FusedBatchNormV3: Tensor[(16), int32], %const_axes__494: Tensor[(2), int64]) -> Tensor[(?, 10), float32] {
  %0 = cast(%zero_point__68, dtype="int32") /* ty=int32 */;
  %1 = divide(%input, %scale__65) /* ty=Tensor[(1, 32, 32, 3), float32] */;
  %2 = cast(%0, dtype="float32") /* ty=float32 */;
  %3 = add(%1, %2) /* ty=Tensor[(1, 32, 32, 3), float32] */;
  %4 = clip(%3, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 3), float32] */;
  %5 = round(%4) /* ty=Tensor[(1, 32, 32, 3), float32] */;
  %6 = cast(%5, dtype="int8") /* ty=Tensor[(1, 32, 32, 3), int8] */;
  %7 = transpose(%6, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 3, 32, 32), int8] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 3, 32, 32), int32] */;
  %9 = cast(%zero_point__68, dtype="int32") /* ty=int32 */;
  %10 = subtract(%8, %9) /* ty=Tensor[(1, 3, 32, 32), int32] */;
  %11 = cast(%10, dtype="float32") /* ty=Tensor[(1, 3, 32, 32), float32] */;
  %12 = cast(%zero_point__86, dtype="int32") /* ty=Tensor[(16), int32] */;
  %13 = cast(%model/conv2d/Conv2D, dtype="int32") /* ty=Tensor[(16, 3, 3, 3), int32] */;
  %14 = expand_dims(%12, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %15 = subtract(%13, %14) /* ty=Tensor[(16, 3, 3, 3), int32] */;
  %16 = cast(%15, dtype="float32") /* ty=Tensor[(16, 3, 3, 3), float32] */;
  %17 = expand_dims(%scale__109, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), float32] */;
  %18 = multiply(%11, %scale__65) /* ty=Tensor[(1, 3, 32, 32), float32] */;
  %19 = multiply(%16, %17) /* ty=Tensor[(16, 3, 3, 3), float32] */;
  %20 = cast(%model/batch_normalization/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(16), int32] */;
  %21 = cast(%zero_point__146, dtype="int32") /* ty=Tensor[(16), int32] */;
  %22 = subtract(%20, %21) /* ty=Tensor[(16), int32] */;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(16), float32] */;
  %24 = nn.conv2d(%18, %19, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %25 = multiply(%23, %scale__147) /* ty=Tensor[(16), float32] */;
  %26 = nn.bias_add(%24, %25) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %27 = nn.relu(%26) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %28 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %29 = divide(%27, %scale__156) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %30 = cast(%28, dtype="float32") /* ty=float32 */;
  %31 = add(%29, %30) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %32 = clip(%31, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %33 = round(%32) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %34 = cast(%33, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %35 = cast(%34, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %36 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %37 = subtract(%35, %36) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %39 = cast(%zero_point__86, dtype="int32") /* ty=Tensor[(16), int32] */;
  %40 = cast(%model/conv2d_1/Conv2D, dtype="int32") /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %41 = expand_dims(%39, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %42 = subtract(%40, %41) /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %44 = expand_dims(%scale__107, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), float32] */;
  %45 = multiply(%38, %scale__156) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %46 = multiply(%43, %44) /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %47 = cast(%model/batch_normalization_1/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(16), int32] */;
  %48 = cast(%zero_point__146, dtype="int32") /* ty=Tensor[(16), int32] */;
  %49 = subtract(%47, %48) /* ty=Tensor[(16), int32] */;
  %50 = cast(%49, dtype="float32") /* ty=Tensor[(16), float32] */;
  %51 = nn.conv2d(%45, %46, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %52 = multiply(%50, %scale__145) /* ty=Tensor[(16), float32] */;
  %53 = nn.bias_add(%51, %52) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %54 = nn.relu(%53) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %55 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %56 = divide(%54, %scale__163) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %57 = cast(%55, dtype="float32") /* ty=float32 */;
  %58 = add(%56, %57) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %59 = clip(%58, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %60 = round(%59) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %61 = cast(%60, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %62 = cast(%61, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %63 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %64 = subtract(%62, %63) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %66 = cast(%zero_point__86, dtype="int32") /* ty=Tensor[(16), int32] */;
  %67 = cast(%model/conv2d_2/Conv2D, dtype="int32") /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %68 = expand_dims(%66, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %69 = subtract(%67, %68) /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %71 = expand_dims(%scale__87, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), float32] */;
  %72 = multiply(%65, %scale__163) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %73 = multiply(%70, %71) /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %74 = cast(%model/batch_normalization_2/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(16), int32] */;
  %75 = cast(%zero_point__146, dtype="int32") /* ty=Tensor[(16), int32] */;
  %76 = subtract(%74, %75) /* ty=Tensor[(16), int32] */;
  %77 = cast(%76, dtype="float32") /* ty=Tensor[(16), float32] */;
  %78 = nn.conv2d(%72, %73, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %79 = multiply(%77, %scale__125) /* ty=Tensor[(16), float32] */;
  %80 = nn.bias_add(%78, %79) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %81 = cast(%zero_point__173, dtype="int32") /* ty=int32 */;
  %82 = divide(%80, %scale__174) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %83 = cast(%81, dtype="float32") /* ty=float32 */;
  %84 = add(%82, %83) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %85 = clip(%84, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %86 = round(%85) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %87 = cast(%86, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %88 = cast(%87, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %89 = cast(%zero_point__173, dtype="int32") /* ty=int32 */;
  %90 = subtract(%88, %89) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %92 = multiply(%91, %scale__174) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %93 = add(%45, %92) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %94 = nn.relu(%93) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %95 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %96 = divide(%94, %scale__178) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %97 = cast(%95, dtype="float32") /* ty=float32 */;
  %98 = add(%96, %97) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %99 = clip(%98, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %100 = round(%99) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %101 = cast(%100, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %102 = cast(%101, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %103 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %104 = subtract(%102, %103) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %105 = cast(%104, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %106 = cast(%zero_point__86, dtype="int32") /* ty=Tensor[(16), int32] */;
  %107 = cast(%model/conv2d_3/Conv2D, dtype="int32") /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %108 = expand_dims(%106, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %109 = subtract(%107, %108) /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %111 = expand_dims(%scale__85, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), float32] */;
  %112 = multiply(%105, %scale__178) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %113 = multiply(%110, %111) /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %114 = cast(%model/batch_normalization_3/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(16), int32] */;
  %115 = cast(%zero_point__146, dtype="int32") /* ty=Tensor[(16), int32] */;
  %116 = subtract(%114, %115) /* ty=Tensor[(16), int32] */;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(16), float32] */;
  %118 = nn.conv2d(%112, %113, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %119 = multiply(%117, %scale__123) /* ty=Tensor[(16), float32] */;
  %120 = nn.bias_add(%118, %119) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %121 = nn.relu(%120) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %122 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %123 = divide(%121, %scale__185) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %124 = cast(%122, dtype="float32") /* ty=float32 */;
  %125 = add(%123, %124) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %126 = clip(%125, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %127 = round(%126) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %128 = cast(%127, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %129 = cast(%128, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %130 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %131 = subtract(%129, %130) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %133 = cast(%zero_point__86, dtype="int32") /* ty=Tensor[(16), int32] */;
  %134 = cast(%model/conv2d_4/Conv2D, dtype="int32") /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %135 = expand_dims(%133, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %136 = subtract(%134, %135) /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %137 = cast(%136, dtype="float32") /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %138 = expand_dims(%scale__83, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), float32] */;
  %139 = multiply(%132, %scale__185) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %140 = multiply(%137, %138) /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %141 = cast(%model/batch_normalization_4/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(16), int32] */;
  %142 = cast(%zero_point__146, dtype="int32") /* ty=Tensor[(16), int32] */;
  %143 = subtract(%141, %142) /* ty=Tensor[(16), int32] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(16), float32] */;
  %145 = nn.conv2d(%139, %140, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %146 = multiply(%144, %scale__121) /* ty=Tensor[(16), float32] */;
  %147 = nn.bias_add(%145, %146) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %148 = cast(%zero_point__197, dtype="int32") /* ty=int32 */;
  %149 = divide(%147, %scale__196) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %150 = cast(%148, dtype="float32") /* ty=float32 */;
  %151 = add(%149, %150) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %152 = clip(%151, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %153 = round(%152) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %154 = cast(%153, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %155 = cast(%154, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %156 = cast(%zero_point__197, dtype="int32") /* ty=int32 */;
  %157 = subtract(%155, %156) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %158 = cast(%157, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %159 = multiply(%158, %scale__196) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %160 = add(%112, %159) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %161 = nn.relu(%160) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %162 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %163 = divide(%161, %scale__198) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %164 = cast(%162, dtype="float32") /* ty=float32 */;
  %165 = add(%163, %164) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %166 = clip(%165, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %167 = round(%166) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %168 = cast(%167, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %169 = cast(%168, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %170 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %171 = subtract(%169, %170) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %172 = cast(%171, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %173 = cast(%zero_point__86, dtype="int32") /* ty=Tensor[(16), int32] */;
  %174 = cast(%model/conv2d_5/Conv2D, dtype="int32") /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %175 = expand_dims(%173, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %176 = subtract(%174, %175) /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %178 = expand_dims(%scale__81, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), float32] */;
  %179 = multiply(%172, %scale__198) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %180 = multiply(%177, %178) /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %181 = cast(%model/batch_normalization_5/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(16), int32] */;
  %182 = cast(%zero_point__146, dtype="int32") /* ty=Tensor[(16), int32] */;
  %183 = subtract(%181, %182) /* ty=Tensor[(16), int32] */;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(16), float32] */;
  %185 = nn.conv2d(%179, %180, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %186 = multiply(%184, %scale__119) /* ty=Tensor[(16), float32] */;
  %187 = nn.bias_add(%185, %186) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %188 = nn.relu(%187) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %189 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %190 = divide(%188, %scale__209) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %191 = cast(%189, dtype="float32") /* ty=float32 */;
  %192 = add(%190, %191) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %193 = clip(%192, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %194 = round(%193) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %195 = cast(%194, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %196 = cast(%195, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %197 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %198 = subtract(%196, %197) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %200 = cast(%zero_point__86, dtype="int32") /* ty=Tensor[(16), int32] */;
  %201 = cast(%model/conv2d_6/Conv2D, dtype="int32") /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %202 = expand_dims(%200, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), int32] */;
  %203 = subtract(%201, %202) /* ty=Tensor[(16, 16, 3, 3), int32] */;
  %204 = cast(%203, dtype="float32") /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %205 = expand_dims(%scale__79, axis=1, num_newaxis=3) /* ty=Tensor[(16, 1, 1, 1), float32] */;
  %206 = multiply(%199, %scale__209) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %207 = multiply(%204, %205) /* ty=Tensor[(16, 16, 3, 3), float32] */;
  %208 = cast(%model/batch_normalization_6/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(16), int32] */;
  %209 = cast(%zero_point__146, dtype="int32") /* ty=Tensor[(16), int32] */;
  %210 = subtract(%208, %209) /* ty=Tensor[(16), int32] */;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(16), float32] */;
  %212 = nn.conv2d(%206, %207, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %213 = multiply(%211, %scale__117) /* ty=Tensor[(16), float32] */;
  %214 = nn.bias_add(%212, %213) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %215 = cast(%zero_point__217, dtype="int32") /* ty=int32 */;
  %216 = divide(%214, %scale__218) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %217 = cast(%215, dtype="float32") /* ty=float32 */;
  %218 = add(%216, %217) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %219 = clip(%218, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %220 = round(%219) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %221 = cast(%220, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %222 = cast(%221, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %223 = cast(%zero_point__217, dtype="int32") /* ty=int32 */;
  %224 = subtract(%222, %223) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %225 = cast(%224, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %226 = multiply(%225, %scale__218) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %227 = add(%179, %226) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %228 = nn.relu(%227) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %229 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %230 = divide(%228, %scale__253) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %231 = cast(%229, dtype="float32") /* ty=float32 */;
  %232 = add(%230, %231) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %233 = clip(%232, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %234 = round(%233) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %235 = cast(%234, dtype="int8") /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %236 = cast(%235, dtype="int32") /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %237 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %238 = subtract(%236, %237) /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %240 = multiply(%239, %scale__253) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %241 = nn.max_pool2d(%240, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %242 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %243 = divide(%241, %scale__253) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %244 = cast(%242, dtype="float32") /* ty=float32 */;
  %245 = add(%243, %244) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %246 = clip(%245, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %247 = round(%246) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %248 = cast(%247, dtype="int8") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %249 = cast(%248, dtype="int32") /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %250 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %251 = subtract(%249, %250) /* ty=Tensor[(1, 16, 16, 16), int32] */;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %253 = reshape(%pad_const__250, newshape=[2, -1]) /* ty=Tensor[(2, 4), int64] */;
  %254 = multiply(%252, %scale__253) /* ty=Tensor[(1, 16, 16, 16), float32] */;
  %255 = transpose(%253, axes=None) /* ty=Tensor[(4, 2), int64] */;
  %256 = dyn.nn.pad(%254, %255, 0f /* ty=float32 */, pad_width=[]) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %257 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %258 = divide(%256, %scale__253) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %259 = cast(%257, dtype="float32") /* ty=float32 */;
  %260 = add(%258, %259) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %261 = clip(%260, a_min=-128f, a_max=127f) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %262 = round(%261) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %263 = cast(%262, dtype="int8") /* ty=Tensor[(?, ?, ?, ?), int8] */;
  %264 = cast(%263, dtype="int32") /* ty=Tensor[(?, ?, ?, ?), int32] */;
  %265 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %266 = subtract(%264, %265) /* ty=Tensor[(?, ?, ?, ?), int32] */;
  %267 = cast(%266, dtype="float32") /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %268 = cast(%zero_point__106, dtype="int32") /* ty=Tensor[(32), int32] */;
  %269 = cast(%model/conv2d_7/Conv2D, dtype="int32") /* ty=Tensor[(32, 16, 3, 3), int32] */;
  %270 = expand_dims(%268, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %271 = subtract(%269, %270) /* ty=Tensor[(32, 16, 3, 3), int32] */;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(32, 16, 3, 3), float32] */;
  %273 = expand_dims(%scale__77, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), float32] */;
  %274 = multiply(%272, %273) /* ty=Tensor[(32, 16, 3, 3), float32] */;
  %275 = cast(%model/batch_normalization_7/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(32), int32] */;
  %276 = cast(%zero_point__112, dtype="int32") /* ty=Tensor[(32), int32] */;
  %277 = subtract(%275, %276) /* ty=Tensor[(32), int32] */;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(32), float32] */;
  %279 = nn.conv2d(%240, %274, strides=[2, 2], padding=[0, 0, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %280 = multiply(%278, %scale__115) /* ty=Tensor[(32), float32] */;
  %281 = nn.bias_add(%279, %280) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %282 = nn.relu(%281) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %283 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %284 = divide(%282, %scale__231) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %285 = cast(%283, dtype="float32") /* ty=float32 */;
  %286 = add(%284, %285) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %287 = clip(%286, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %288 = round(%287) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %289 = cast(%288, dtype="int8") /* ty=Tensor[(1, 32, 16, 16), int8] */;
  %290 = cast(%289, dtype="int32") /* ty=Tensor[(1, 32, 16, 16), int32] */;
  %291 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %292 = subtract(%290, %291) /* ty=Tensor[(1, 32, 16, 16), int32] */;
  %293 = cast(%292, dtype="float32") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %294 = cast(%zero_point__106, dtype="int32") /* ty=Tensor[(32), int32] */;
  %295 = cast(%model/conv2d_8/Conv2D, dtype="int32") /* ty=Tensor[(32, 32, 3, 3), int32] */;
  %296 = expand_dims(%294, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %297 = subtract(%295, %296) /* ty=Tensor[(32, 32, 3, 3), int32] */;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(32, 32, 3, 3), float32] */;
  %299 = expand_dims(%scale__75, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), float32] */;
  %300 = multiply(%293, %scale__231) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %301 = multiply(%298, %299) /* ty=Tensor[(32, 32, 3, 3), float32] */;
  %302 = cast(%model/batch_normalization_8/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(32), int32] */;
  %303 = cast(%zero_point__112, dtype="int32") /* ty=Tensor[(32), int32] */;
  %304 = subtract(%302, %303) /* ty=Tensor[(32), int32] */;
  %305 = cast(%304, dtype="float32") /* ty=Tensor[(32), float32] */;
  %306 = nn.conv2d(%300, %301, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %307 = multiply(%305, %scale__113) /* ty=Tensor[(32), float32] */;
  %308 = nn.bias_add(%306, %307) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %309 = cast(%zero_point__239, dtype="int32") /* ty=int32 */;
  %310 = divide(%308, %scale__240) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %311 = cast(%309, dtype="float32") /* ty=float32 */;
  %312 = add(%310, %311) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %313 = clip(%312, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %314 = round(%313) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %315 = cast(%314, dtype="int8") /* ty=Tensor[(1, 32, 16, 16), int8] */;
  %316 = cast(%315, dtype="int32") /* ty=Tensor[(1, 32, 16, 16), int32] */;
  %317 = cast(%zero_point__239, dtype="int32") /* ty=int32 */;
  %318 = subtract(%316, %317) /* ty=Tensor[(1, 32, 16, 16), int32] */;
  %319 = cast(%318, dtype="float32") /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %320 = multiply(%267, %scale__253) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %321 = multiply(%319, %scale__240) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %322 = add(%320, %321) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %323 = nn.relu(%322) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %324 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %325 = divide(%323, %scale__257) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %326 = cast(%324, dtype="float32") /* ty=float32 */;
  %327 = add(%325, %326) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %328 = clip(%327, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %329 = round(%328) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %330 = cast(%329, dtype="int8") /* ty=Tensor[(?, 32, 16, 16), int8] */;
  %331 = cast(%330, dtype="int32") /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %332 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %333 = subtract(%331, %332) /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %334 = cast(%333, dtype="float32") /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %335 = cast(%zero_point__106, dtype="int32") /* ty=Tensor[(32), int32] */;
  %336 = cast(%model/conv2d_9/Conv2D, dtype="int32") /* ty=Tensor[(32, 32, 3, 3), int32] */;
  %337 = expand_dims(%335, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %338 = subtract(%336, %337) /* ty=Tensor[(32, 32, 3, 3), int32] */;
  %339 = cast(%338, dtype="float32") /* ty=Tensor[(32, 32, 3, 3), float32] */;
  %340 = expand_dims(%scale__73, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), float32] */;
  %341 = multiply(%334, %scale__257) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %342 = multiply(%339, %340) /* ty=Tensor[(32, 32, 3, 3), float32] */;
  %343 = cast(%model/batch_normalization_9/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(32), int32] */;
  %344 = cast(%zero_point__112, dtype="int32") /* ty=Tensor[(32), int32] */;
  %345 = subtract(%343, %344) /* ty=Tensor[(32), int32] */;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(32), float32] */;
  %347 = nn.conv2d(%341, %342, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %348 = multiply(%346, %scale__111) /* ty=Tensor[(32), float32] */;
  %349 = nn.bias_add(%347, %348) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %350 = nn.relu(%349) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %351 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %352 = divide(%350, %scale__264) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %353 = cast(%351, dtype="float32") /* ty=float32 */;
  %354 = add(%352, %353) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %355 = clip(%354, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %356 = round(%355) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %357 = cast(%356, dtype="int8") /* ty=Tensor[(?, 32, 16, 16), int8] */;
  %358 = cast(%357, dtype="int32") /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %359 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %360 = subtract(%358, %359) /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %361 = cast(%360, dtype="float32") /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %362 = cast(%zero_point__106, dtype="int32") /* ty=Tensor[(32), int32] */;
  %363 = cast(%model/conv2d_10/Conv2D, dtype="int32") /* ty=Tensor[(32, 32, 3, 3), int32] */;
  %364 = expand_dims(%362, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %365 = subtract(%363, %364) /* ty=Tensor[(32, 32, 3, 3), int32] */;
  %366 = cast(%365, dtype="float32") /* ty=Tensor[(32, 32, 3, 3), float32] */;
  %367 = expand_dims(%scale__105, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), float32] */;
  %368 = multiply(%361, %scale__264) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %369 = multiply(%366, %367) /* ty=Tensor[(32, 32, 3, 3), float32] */;
  %370 = cast(%model/batch_normalization_10/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(32), int32] */;
  %371 = cast(%zero_point__112, dtype="int32") /* ty=Tensor[(32), int32] */;
  %372 = subtract(%370, %371) /* ty=Tensor[(32), int32] */;
  %373 = cast(%372, dtype="float32") /* ty=Tensor[(32), float32] */;
  %374 = nn.conv2d(%368, %369, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %375 = multiply(%373, %scale__143) /* ty=Tensor[(32), float32] */;
  %376 = nn.bias_add(%374, %375) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %377 = cast(%zero_point__274, dtype="int32") /* ty=int32 */;
  %378 = divide(%376, %scale__273) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %379 = cast(%377, dtype="float32") /* ty=float32 */;
  %380 = add(%378, %379) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %381 = clip(%380, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %382 = round(%381) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %383 = cast(%382, dtype="int8") /* ty=Tensor[(?, 32, 16, 16), int8] */;
  %384 = cast(%383, dtype="int32") /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %385 = cast(%zero_point__274, dtype="int32") /* ty=int32 */;
  %386 = subtract(%384, %385) /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %387 = cast(%386, dtype="float32") /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %388 = multiply(%387, %scale__273) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %389 = add(%341, %388) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %390 = nn.relu(%389) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %391 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %392 = divide(%390, %scale__279) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %393 = cast(%391, dtype="float32") /* ty=float32 */;
  %394 = add(%392, %393) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %395 = clip(%394, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %396 = round(%395) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %397 = cast(%396, dtype="int8") /* ty=Tensor[(?, 32, 16, 16), int8] */;
  %398 = cast(%397, dtype="int32") /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %399 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %400 = subtract(%398, %399) /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %402 = cast(%zero_point__106, dtype="int32") /* ty=Tensor[(32), int32] */;
  %403 = cast(%model/conv2d_11/Conv2D, dtype="int32") /* ty=Tensor[(32, 32, 3, 3), int32] */;
  %404 = expand_dims(%402, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %405 = subtract(%403, %404) /* ty=Tensor[(32, 32, 3, 3), int32] */;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(32, 32, 3, 3), float32] */;
  %407 = expand_dims(%scale__103, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), float32] */;
  %408 = multiply(%401, %scale__279) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %409 = multiply(%406, %407) /* ty=Tensor[(32, 32, 3, 3), float32] */;
  %410 = cast(%model/batch_normalization_11/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(32), int32] */;
  %411 = cast(%zero_point__112, dtype="int32") /* ty=Tensor[(32), int32] */;
  %412 = subtract(%410, %411) /* ty=Tensor[(32), int32] */;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(32), float32] */;
  %414 = nn.conv2d(%408, %409, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %415 = multiply(%413, %scale__141) /* ty=Tensor[(32), float32] */;
  %416 = nn.bias_add(%414, %415) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %417 = nn.relu(%416) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %418 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %419 = divide(%417, %scale__288) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %420 = cast(%418, dtype="float32") /* ty=float32 */;
  %421 = add(%419, %420) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %422 = clip(%421, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %423 = round(%422) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %424 = cast(%423, dtype="int8") /* ty=Tensor[(?, 32, 16, 16), int8] */;
  %425 = cast(%424, dtype="int32") /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %426 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %427 = subtract(%425, %426) /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %428 = cast(%427, dtype="float32") /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %429 = cast(%zero_point__106, dtype="int32") /* ty=Tensor[(32), int32] */;
  %430 = cast(%model/conv2d_12/Conv2D, dtype="int32") /* ty=Tensor[(32, 32, 3, 3), int32] */;
  %431 = expand_dims(%429, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), int32] */;
  %432 = subtract(%430, %431) /* ty=Tensor[(32, 32, 3, 3), int32] */;
  %433 = cast(%432, dtype="float32") /* ty=Tensor[(32, 32, 3, 3), float32] */;
  %434 = expand_dims(%scale__101, axis=1, num_newaxis=3) /* ty=Tensor[(32, 1, 1, 1), float32] */;
  %435 = multiply(%428, %scale__288) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %436 = multiply(%433, %434) /* ty=Tensor[(32, 32, 3, 3), float32] */;
  %437 = cast(%model/batch_normalization_12/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(32), int32] */;
  %438 = cast(%zero_point__112, dtype="int32") /* ty=Tensor[(32), int32] */;
  %439 = subtract(%437, %438) /* ty=Tensor[(32), int32] */;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(32), float32] */;
  %441 = nn.conv2d(%435, %436, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %442 = multiply(%440, %scale__139) /* ty=Tensor[(32), float32] */;
  %443 = nn.bias_add(%441, %442) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %444 = cast(%zero_point__298, dtype="int32") /* ty=int32 */;
  %445 = divide(%443, %scale__297) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %446 = cast(%444, dtype="float32") /* ty=float32 */;
  %447 = add(%445, %446) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %448 = clip(%447, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %449 = round(%448) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %450 = cast(%449, dtype="int8") /* ty=Tensor[(?, 32, 16, 16), int8] */;
  %451 = cast(%450, dtype="int32") /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %452 = cast(%zero_point__298, dtype="int32") /* ty=int32 */;
  %453 = subtract(%451, %452) /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %455 = multiply(%454, %scale__297) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %456 = add(%408, %455) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %457 = nn.relu(%456) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %458 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %459 = divide(%457, %scale__325) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %460 = cast(%458, dtype="float32") /* ty=float32 */;
  %461 = add(%459, %460) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %462 = clip(%461, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %463 = round(%462) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %464 = cast(%463, dtype="int8") /* ty=Tensor[(?, 32, 16, 16), int8] */;
  %465 = cast(%464, dtype="int32") /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %466 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %467 = subtract(%465, %466) /* ty=Tensor[(?, 32, 16, 16), int32] */;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %469 = multiply(%468, %scale__325) /* ty=Tensor[(?, 32, 16, 16), float32] */;
  %470 = nn.max_pool2d(%469, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(?, 32, 8, 8), float32] */;
  %471 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %472 = divide(%470, %scale__325) /* ty=Tensor[(?, 32, 8, 8), float32] */;
  %473 = cast(%471, dtype="float32") /* ty=float32 */;
  %474 = add(%472, %473) /* ty=Tensor[(?, 32, 8, 8), float32] */;
  %475 = clip(%474, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 32, 8, 8), float32] */;
  %476 = round(%475) /* ty=Tensor[(?, 32, 8, 8), float32] */;
  %477 = cast(%476, dtype="int8") /* ty=Tensor[(?, 32, 8, 8), int8] */;
  %478 = cast(%477, dtype="int32") /* ty=Tensor[(?, 32, 8, 8), int32] */;
  %479 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %480 = subtract(%478, %479) /* ty=Tensor[(?, 32, 8, 8), int32] */;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(?, 32, 8, 8), float32] */;
  %482 = reshape(%pad_const__329, newshape=[2, -1]) /* ty=Tensor[(2, 4), int64] */;
  %483 = multiply(%481, %scale__325) /* ty=Tensor[(?, 32, 8, 8), float32] */;
  %484 = transpose(%482, axes=None) /* ty=Tensor[(4, 2), int64] */;
  %485 = dyn.nn.pad(%483, %484, 0f /* ty=float32 */, pad_width=[]) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %486 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %487 = divide(%485, %scale__325) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %488 = cast(%486, dtype="float32") /* ty=float32 */;
  %489 = add(%487, %488) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %490 = clip(%489, a_min=-128f, a_max=127f) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %491 = round(%490) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %492 = cast(%491, dtype="int8") /* ty=Tensor[(?, ?, ?, ?), int8] */;
  %493 = cast(%492, dtype="int32") /* ty=Tensor[(?, ?, ?, ?), int32] */;
  %494 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %495 = subtract(%493, %494) /* ty=Tensor[(?, ?, ?, ?), int32] */;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %497 = cast(%zero_point__92, dtype="int32") /* ty=Tensor[(64), int32] */;
  %498 = cast(%model/conv2d_13/Conv2D, dtype="int32") /* ty=Tensor[(64, 32, 3, 3), int32] */;
  %499 = expand_dims(%497, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %500 = subtract(%498, %499) /* ty=Tensor[(64, 32, 3, 3), int32] */;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(64, 32, 3, 3), float32] */;
  %502 = expand_dims(%scale__99, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
  %503 = multiply(%501, %502) /* ty=Tensor[(64, 32, 3, 3), float32] */;
  %504 = cast(%model/batch_normalization_13/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(64), int32] */;
  %505 = cast(%zero_point__138, dtype="int32") /* ty=Tensor[(64), int32] */;
  %506 = subtract(%504, %505) /* ty=Tensor[(64), int32] */;
  %507 = cast(%506, dtype="float32") /* ty=Tensor[(64), float32] */;
  %508 = nn.conv2d(%469, %503, strides=[2, 2], padding=[0, 0, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %509 = multiply(%507, %scale__137) /* ty=Tensor[(64), float32] */;
  %510 = nn.bias_add(%508, %509) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %511 = nn.relu(%510) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %512 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %513 = divide(%511, %scale__308) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %514 = cast(%512, dtype="float32") /* ty=float32 */;
  %515 = add(%513, %514) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %516 = clip(%515, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %517 = round(%516) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %518 = cast(%517, dtype="int8") /* ty=Tensor[(?, 64, 8, 8), int8] */;
  %519 = cast(%518, dtype="int32") /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %520 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %521 = subtract(%519, %520) /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %523 = cast(%zero_point__92, dtype="int32") /* ty=Tensor[(64), int32] */;
  %524 = cast(%model/conv2d_14/Conv2D, dtype="int32") /* ty=Tensor[(64, 64, 3, 3), int32] */;
  %525 = expand_dims(%523, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %526 = subtract(%524, %525) /* ty=Tensor[(64, 64, 3, 3), int32] */;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %528 = expand_dims(%scale__97, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
  %529 = multiply(%522, %scale__308) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %530 = multiply(%527, %528) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %531 = cast(%model/batch_normalization_14/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(64), int32] */;
  %532 = cast(%zero_point__138, dtype="int32") /* ty=Tensor[(64), int32] */;
  %533 = subtract(%531, %532) /* ty=Tensor[(64), int32] */;
  %534 = cast(%533, dtype="float32") /* ty=Tensor[(64), float32] */;
  %535 = nn.conv2d(%529, %530, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %536 = multiply(%534, %scale__135) /* ty=Tensor[(64), float32] */;
  %537 = nn.bias_add(%535, %536) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %538 = cast(%zero_point__318, dtype="int32") /* ty=int32 */;
  %539 = divide(%537, %scale__317) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %540 = cast(%538, dtype="float32") /* ty=float32 */;
  %541 = add(%539, %540) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %542 = clip(%541, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %543 = round(%542) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %544 = cast(%543, dtype="int8") /* ty=Tensor[(?, 64, 8, 8), int8] */;
  %545 = cast(%544, dtype="int32") /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %546 = cast(%zero_point__318, dtype="int32") /* ty=int32 */;
  %547 = subtract(%545, %546) /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %549 = multiply(%496, %scale__325) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %550 = multiply(%548, %scale__317) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %551 = add(%549, %550) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %552 = nn.relu(%551) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %553 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %554 = divide(%552, %scale__334) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %555 = cast(%553, dtype="float32") /* ty=float32 */;
  %556 = add(%554, %555) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %557 = clip(%556, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %558 = round(%557) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %559 = cast(%558, dtype="int8") /* ty=Tensor[(?, 64, 8, 8), int8] */;
  %560 = cast(%559, dtype="int32") /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %561 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %562 = subtract(%560, %561) /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %564 = cast(%zero_point__92, dtype="int32") /* ty=Tensor[(64), int32] */;
  %565 = cast(%model/conv2d_15/Conv2D, dtype="int32") /* ty=Tensor[(64, 64, 3, 3), int32] */;
  %566 = expand_dims(%564, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %567 = subtract(%565, %566) /* ty=Tensor[(64, 64, 3, 3), int32] */;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %569 = expand_dims(%scale__95, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
  %570 = multiply(%563, %scale__334) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %571 = multiply(%568, %569) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %572 = cast(%model/batch_normalization_15/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(64), int32] */;
  %573 = cast(%zero_point__138, dtype="int32") /* ty=Tensor[(64), int32] */;
  %574 = subtract(%572, %573) /* ty=Tensor[(64), int32] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(64), float32] */;
  %576 = nn.conv2d(%570, %571, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %577 = multiply(%575, %scale__133) /* ty=Tensor[(64), float32] */;
  %578 = nn.bias_add(%576, %577) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %579 = nn.relu(%578) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %580 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %581 = divide(%579, %scale__345) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %582 = cast(%580, dtype="float32") /* ty=float32 */;
  %583 = add(%581, %582) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %584 = clip(%583, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %585 = round(%584) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %586 = cast(%585, dtype="int8") /* ty=Tensor[(?, 64, 8, 8), int8] */;
  %587 = cast(%586, dtype="int32") /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %588 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %589 = subtract(%587, %588) /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %591 = cast(%zero_point__92, dtype="int32") /* ty=Tensor[(64), int32] */;
  %592 = cast(%model/conv2d_16/Conv2D, dtype="int32") /* ty=Tensor[(64, 64, 3, 3), int32] */;
  %593 = expand_dims(%591, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %594 = subtract(%592, %593) /* ty=Tensor[(64, 64, 3, 3), int32] */;
  %595 = cast(%594, dtype="float32") /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %596 = expand_dims(%scale__93, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
  %597 = multiply(%590, %scale__345) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %598 = multiply(%595, %596) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %599 = cast(%model/batch_normalization_16/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(64), int32] */;
  %600 = cast(%zero_point__138, dtype="int32") /* ty=Tensor[(64), int32] */;
  %601 = subtract(%599, %600) /* ty=Tensor[(64), int32] */;
  %602 = cast(%601, dtype="float32") /* ty=Tensor[(64), float32] */;
  %603 = nn.conv2d(%597, %598, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %604 = multiply(%602, %scale__131) /* ty=Tensor[(64), float32] */;
  %605 = nn.bias_add(%603, %604) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %606 = cast(%zero_point__353, dtype="int32") /* ty=int32 */;
  %607 = divide(%605, %scale__352) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %608 = cast(%606, dtype="float32") /* ty=float32 */;
  %609 = add(%607, %608) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %610 = clip(%609, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %611 = round(%610) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %612 = cast(%611, dtype="int8") /* ty=Tensor[(?, 64, 8, 8), int8] */;
  %613 = cast(%612, dtype="int32") /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %614 = cast(%zero_point__353, dtype="int32") /* ty=int32 */;
  %615 = subtract(%613, %614) /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %616 = cast(%615, dtype="float32") /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %617 = multiply(%616, %scale__352) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %618 = add(%570, %617) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %619 = nn.relu(%618) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %620 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %621 = divide(%619, %scale__358) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %622 = cast(%620, dtype="float32") /* ty=float32 */;
  %623 = add(%621, %622) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %624 = clip(%623, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %625 = round(%624) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %626 = cast(%625, dtype="int8") /* ty=Tensor[(?, 64, 8, 8), int8] */;
  %627 = cast(%626, dtype="int32") /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %628 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %629 = subtract(%627, %628) /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %631 = cast(%zero_point__92, dtype="int32") /* ty=Tensor[(64), int32] */;
  %632 = cast(%model/conv2d_17/Conv2D, dtype="int32") /* ty=Tensor[(64, 64, 3, 3), int32] */;
  %633 = expand_dims(%631, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %634 = subtract(%632, %633) /* ty=Tensor[(64, 64, 3, 3), int32] */;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %636 = expand_dims(%scale__91, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
  %637 = multiply(%630, %scale__358) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %638 = multiply(%635, %636) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %639 = cast(%model/batch_normalization_17/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(64), int32] */;
  %640 = cast(%zero_point__138, dtype="int32") /* ty=Tensor[(64), int32] */;
  %641 = subtract(%639, %640) /* ty=Tensor[(64), int32] */;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(64), float32] */;
  %643 = nn.conv2d(%637, %638, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %644 = multiply(%642, %scale__129) /* ty=Tensor[(64), float32] */;
  %645 = nn.bias_add(%643, %644) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %646 = nn.relu(%645) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %647 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %648 = divide(%646, %scale__365) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %649 = cast(%647, dtype="float32") /* ty=float32 */;
  %650 = add(%648, %649) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %651 = clip(%650, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %652 = round(%651) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %653 = cast(%652, dtype="int8") /* ty=Tensor[(?, 64, 8, 8), int8] */;
  %654 = cast(%653, dtype="int32") /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %655 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %656 = subtract(%654, %655) /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %658 = cast(%zero_point__92, dtype="int32") /* ty=Tensor[(64), int32] */;
  %659 = cast(%model/conv2d_18/Conv2D, dtype="int32") /* ty=Tensor[(64, 64, 3, 3), int32] */;
  %660 = expand_dims(%658, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), int32] */;
  %661 = subtract(%659, %660) /* ty=Tensor[(64, 64, 3, 3), int32] */;
  %662 = cast(%661, dtype="float32") /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %663 = expand_dims(%scale__89, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
  %664 = multiply(%657, %scale__365) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %665 = multiply(%662, %663) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %666 = cast(%model/batch_normalization_18/FusedBatchNormV3, dtype="int32") /* ty=Tensor[(64), int32] */;
  %667 = cast(%zero_point__138, dtype="int32") /* ty=Tensor[(64), int32] */;
  %668 = subtract(%666, %667) /* ty=Tensor[(64), int32] */;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(64), float32] */;
  %670 = nn.conv2d(%664, %665, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %671 = multiply(%669, %scale__127) /* ty=Tensor[(64), float32] */;
  %672 = nn.bias_add(%670, %671) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %673 = cast(%zero_point__377, dtype="int32") /* ty=int32 */;
  %674 = divide(%672, %scale__376) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %675 = cast(%673, dtype="float32") /* ty=float32 */;
  %676 = add(%674, %675) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %677 = clip(%676, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %678 = round(%677) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %679 = cast(%678, dtype="int8") /* ty=Tensor[(?, 64, 8, 8), int8] */;
  %680 = cast(%679, dtype="int32") /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %681 = cast(%zero_point__377, dtype="int32") /* ty=int32 */;
  %682 = subtract(%680, %681) /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %683 = cast(%682, dtype="float32") /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %684 = multiply(%683, %scale__376) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %685 = add(%637, %684) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %686 = nn.relu(%685) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %687 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %688 = divide(%686, %scale__380) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %689 = cast(%687, dtype="float32") /* ty=float32 */;
  %690 = add(%688, %689) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %691 = clip(%690, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %692 = round(%691) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %693 = cast(%692, dtype="int8") /* ty=Tensor[(?, 64, 8, 8), int8] */;
  %694 = cast(%693, dtype="int32") /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %695 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %696 = subtract(%694, %695) /* ty=Tensor[(?, 64, 8, 8), int32] */;
  %697 = cast(%696, dtype="float32") /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %698 = multiply(%697, %scale__380) /* ty=Tensor[(?, 64, 8, 8), float32] */;
  %699 = nn.global_avg_pool2d(%698) /* ty=Tensor[(?, 64, 1, 1), float32] */;
  %700 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %701 = divide(%699, %scale__382) /* ty=Tensor[(?, 64, 1, 1), float32] */;
  %702 = cast(%700, dtype="float32") /* ty=float32 */;
  %703 = add(%701, %702) /* ty=Tensor[(?, 64, 1, 1), float32] */;
  %704 = clip(%703, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 64, 1, 1), float32] */;
  %705 = round(%704) /* ty=Tensor[(?, 64, 1, 1), float32] */;
  %706 = cast(%705, dtype="int8") /* ty=Tensor[(?, 64, 1, 1), int8] */;
  %707 = shape_of(%706, dtype="int64") /* ty=Tensor[(4), int64] */;
  %708 = shape_of(%707, dtype="int64") /* ty=Tensor[(1), int64] */;
  %709 = less(%const_axes__494, 0 /* ty=int64 */) /* ty=Tensor[(2), bool] */;
  %710 = add(%const_axes__494, %708) /* ty=Tensor[(2), int64] */;
  %711 = where(%709, %710, %const_axes__494) /* ty=Tensor[(2), int64] */;
  %712 = dyn.squeeze(%706, %711, axis=[]) /* ty=Tensor[(?, ?), int8] */;
  %713 = cast(%712, dtype="int32") /* ty=Tensor[(?, ?), int32] */;
  %714 = cast(%zero_point__368, dtype="int32") /* ty=int32 */;
  %715 = subtract(%713, %714) /* ty=Tensor[(?, ?), int32] */;
  %716 = cast(%715, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
  %717 = cast(%model/dense/MatMul, dtype="int32") /* ty=Tensor[(64, 10), int32] */;
  %718 = cast(%zero_point__70, dtype="int32") /* ty=int32 */;
  %719 = subtract(%717, %718) /* ty=Tensor[(64, 10), int32] */;
  %720 = cast(%719, dtype="float32") /* ty=Tensor[(64, 10), float32] */;
  %721 = multiply(%720, %scale__69) /* ty=Tensor[(64, 10), float32] */;
  %722 = multiply(%716, %scale__382) /* ty=Tensor[(?, ?), float32] */;
  %723 = transpose(%721, axes=[1, 0]) /* ty=Tensor[(10, 64), float32] */;
  %724 = cast(%model/dense/BiasAdd/ReadVariableOp, dtype="int32") /* ty=Tensor[(10), int32] */;
  %725 = cast(%zero_point__72, dtype="int32") /* ty=int32 */;
  %726 = subtract(%724, %725) /* ty=Tensor[(10), int32] */;
  %727 = cast(%726, dtype="float32") /* ty=Tensor[(10), float32] */;
  %728 = nn.dense(%722, %723, units=None, out_dtype="float32") /* ty=Tensor[(?, 10), float32] */;
  %729 = multiply(%727, %scale__71) /* ty=Tensor[(10), float32] */;
  %730 = add(%728, %729) /* ty=Tensor[(?, 10), float32] */;
  %731 = cast(%zero_point__389, dtype="int32") /* ty=int32 */;
  %732 = divide(%730, %scale__388) /* ty=Tensor[(?, 10), float32] */;
  %733 = cast(%731, dtype="float32") /* ty=float32 */;
  %734 = add(%732, %733) /* ty=Tensor[(?, 10), float32] */;
  %735 = clip(%734, a_min=-128f, a_max=127f) /* ty=Tensor[(?, 10), float32] */;
  %736 = round(%735) /* ty=Tensor[(?, 10), float32] */;
  %737 = cast(%736, dtype="int8") /* ty=Tensor[(?, 10), int8] */;
  %738 = cast(%737, dtype="int32") /* ty=Tensor[(?, 10), int32] */;
  %739 = cast(%zero_point__389, dtype="int32") /* ty=int32 */;
  %740 = subtract(%738, %739) /* ty=Tensor[(?, 10), int32] */;
  %741 = cast(%740, dtype="float32") /* ty=Tensor[(?, 10), float32] */;
  multiply(%741, %scale__388) /* ty=Tensor[(?, 10), float32] */
}