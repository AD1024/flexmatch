#[version = "0.0.5"]
def @main(%data: Tensor[(1, 3, 32, 32), float32], %conv_block_1_conv_weight: Tensor[(32, 3, 3, 3), float32], %conv_block_1_bn_gamma: Tensor[(32), float32], %conv_block_1_bn_beta: Tensor[(32), float32], %conv_block_1_bn_moving_mean: Tensor[(32), float32], %conv_block_1_bn_moving_var: Tensor[(32), float32], %separable_conv_block_1_weight: Tensor[(32, 1, 3, 3), float32], %separable_conv_block_1_bn1_gamma: Tensor[(32), float32], %separable_conv_block_1_bn1_beta: Tensor[(32), float32], %separable_conv_block_1_bn1_moving_mean: Tensor[(32), float32], %separable_conv_block_1_bn1_moving_var: Tensor[(32), float32], %separable_conv_block_1_conv2_weight: Tensor[(64, 32, 1, 1), float32], %separable_conv_block_1_bn2_gamma: Tensor[(64), float32], %separable_conv_block_1_bn2_beta: Tensor[(64), float32], %separable_conv_block_1_bn2_moving_mean: Tensor[(64), float32], %separable_conv_block_1_bn2_moving_var: Tensor[(64), float32], %separable_conv_block_2_weight: Tensor[(64, 1, 3, 3), float32], %separable_conv_block_2_bn1_gamma: Tensor[(64), float32], %separable_conv_block_2_bn1_beta: Tensor[(64), float32], %separable_conv_block_2_bn1_moving_mean: Tensor[(64), float32], %separable_conv_block_2_bn1_moving_var: Tensor[(64), float32], %separable_conv_block_2_conv2_weight: Tensor[(128, 64, 1, 1), float32], %separable_conv_block_2_bn2_gamma: Tensor[(128), float32], %separable_conv_block_2_bn2_beta: Tensor[(128), float32], %separable_conv_block_2_bn2_moving_mean: Tensor[(128), float32], %separable_conv_block_2_bn2_moving_var: Tensor[(128), float32], %separable_conv_block_3_weight: Tensor[(128, 1, 3, 3), float32], %separable_conv_block_3_bn1_gamma: Tensor[(128), float32], %separable_conv_block_3_bn1_beta: Tensor[(128), float32], %separable_conv_block_3_bn1_moving_mean: Tensor[(128), float32], %separable_conv_block_3_bn1_moving_var: Tensor[(128), float32], %separable_conv_block_3_conv2_weight: Tensor[(128, 128, 1, 1), float32], %separable_conv_block_3_bn2_gamma: Tensor[(128), float32], %separable_conv_block_3_bn2_beta: Tensor[(128), float32], %separable_conv_block_3_bn2_moving_mean: Tensor[(128), float32], %separable_conv_block_3_bn2_moving_var: Tensor[(128), float32], %separable_conv_block_4_weight: Tensor[(128, 1, 3, 3), float32], %separable_conv_block_4_bn1_gamma: Tensor[(128), float32], %separable_conv_block_4_bn1_beta: Tensor[(128), float32], %separable_conv_block_4_bn1_moving_mean: Tensor[(128), float32], %separable_conv_block_4_bn1_moving_var: Tensor[(128), float32], %separable_conv_block_4_conv2_weight: Tensor[(256, 128, 1, 1), float32], %separable_conv_block_4_bn2_gamma: Tensor[(256), float32], %separable_conv_block_4_bn2_beta: Tensor[(256), float32], %separable_conv_block_4_bn2_moving_mean: Tensor[(256), float32], %separable_conv_block_4_bn2_moving_var: Tensor[(256), float32], %separable_conv_block_5_weight: Tensor[(256, 1, 3, 3), float32], %separable_conv_block_5_bn1_gamma: Tensor[(256), float32], %separable_conv_block_5_bn1_beta: Tensor[(256), float32], %separable_conv_block_5_bn1_moving_mean: Tensor[(256), float32], %separable_conv_block_5_bn1_moving_var: Tensor[(256), float32], %separable_conv_block_5_conv2_weight: Tensor[(256, 256, 1, 1), float32], %separable_conv_block_5_bn2_gamma: Tensor[(256), float32], %separable_conv_block_5_bn2_beta: Tensor[(256), float32], %separable_conv_block_5_bn2_moving_mean: Tensor[(256), float32], %separable_conv_block_5_bn2_moving_var: Tensor[(256), float32], %separable_conv_block_6_weight: Tensor[(256, 1, 3, 3), float32], %separable_conv_block_6_bn1_gamma: Tensor[(256), float32], %separable_conv_block_6_bn1_beta: Tensor[(256), float32], %separable_conv_block_6_bn1_moving_mean: Tensor[(256), float32], %separable_conv_block_6_bn1_moving_var: Tensor[(256), float32], %separable_conv_block_6_conv2_weight: Tensor[(512, 256, 1, 1), float32], %separable_conv_block_6_bn2_gamma: Tensor[(512), float32], %separable_conv_block_6_bn2_beta: Tensor[(512), float32], %separable_conv_block_6_bn2_moving_mean: Tensor[(512), float32], %separable_conv_block_6_bn2_moving_var: Tensor[(512), float32], %separable_conv_block_7_weight: Tensor[(512, 1, 3, 3), float32], %separable_conv_block_7_bn1_gamma: Tensor[(512), float32], %separable_conv_block_7_bn1_beta: Tensor[(512), float32], %separable_conv_block_7_bn1_moving_mean: Tensor[(512), float32], %separable_conv_block_7_bn1_moving_var: Tensor[(512), float32], %separable_conv_block_7_conv2_weight: Tensor[(512, 512, 1, 1), float32], %separable_conv_block_7_bn2_gamma: Tensor[(512), float32], %separable_conv_block_7_bn2_beta: Tensor[(512), float32], %separable_conv_block_7_bn2_moving_mean: Tensor[(512), float32], %separable_conv_block_7_bn2_moving_var: Tensor[(512), float32], %separable_conv_block_8_weight: Tensor[(512, 1, 3, 3), float32], %separable_conv_block_8_bn1_gamma: Tensor[(512), float32], %separable_conv_block_8_bn1_beta: Tensor[(512), float32], %separable_conv_block_8_bn1_moving_mean: Tensor[(512), float32], %separable_conv_block_8_bn1_moving_var: Tensor[(512), float32], %separable_conv_block_8_conv2_weight: Tensor[(512, 512, 1, 1), float32], %separable_conv_block_8_bn2_gamma: Tensor[(512), float32], %separable_conv_block_8_bn2_beta: Tensor[(512), float32], %separable_conv_block_8_bn2_moving_mean: Tensor[(512), float32], %separable_conv_block_8_bn2_moving_var: Tensor[(512), float32], %separable_conv_block_9_weight: Tensor[(512, 1, 3, 3), float32], %separable_conv_block_9_bn1_gamma: Tensor[(512), float32], %separable_conv_block_9_bn1_beta: Tensor[(512), float32], %separable_conv_block_9_bn1_moving_mean: Tensor[(512), float32], %separable_conv_block_9_bn1_moving_var: Tensor[(512), float32], %separable_conv_block_9_conv2_weight: Tensor[(512, 512, 1, 1), float32], %separable_conv_block_9_bn2_gamma: Tensor[(512), float32], %separable_conv_block_9_bn2_beta: Tensor[(512), float32], %separable_conv_block_9_bn2_moving_mean: Tensor[(512), float32], %separable_conv_block_9_bn2_moving_var: Tensor[(512), float32], %separable_conv_block_10_weight: Tensor[(512, 1, 3, 3), float32], %separable_conv_block_10_bn1_gamma: Tensor[(512), float32], %separable_conv_block_10_bn1_beta: Tensor[(512), float32], %separable_conv_block_10_bn1_moving_mean: Tensor[(512), float32], %separable_conv_block_10_bn1_moving_var: Tensor[(512), float32], %separable_conv_block_10_conv2_weight: Tensor[(512, 512, 1, 1), float32], %separable_conv_block_10_bn2_gamma: Tensor[(512), float32], %separable_conv_block_10_bn2_beta: Tensor[(512), float32], %separable_conv_block_10_bn2_moving_mean: Tensor[(512), float32], %separable_conv_block_10_bn2_moving_var: Tensor[(512), float32], %separable_conv_block_11_weight: Tensor[(512, 1, 3, 3), float32], %separable_conv_block_11_bn1_gamma: Tensor[(512), float32], %separable_conv_block_11_bn1_beta: Tensor[(512), float32], %separable_conv_block_11_bn1_moving_mean: Tensor[(512), float32], %separable_conv_block_11_bn1_moving_var: Tensor[(512), float32], %separable_conv_block_11_conv2_weight: Tensor[(512, 512, 1, 1), float32], %separable_conv_block_11_bn2_gamma: Tensor[(512), float32], %separable_conv_block_11_bn2_beta: Tensor[(512), float32], %separable_conv_block_11_bn2_moving_mean: Tensor[(512), float32], %separable_conv_block_11_bn2_moving_var: Tensor[(512), float32], %separable_conv_block_12_weight: Tensor[(512, 1, 3, 3), float32], %separable_conv_block_12_bn1_gamma: Tensor[(512), float32], %separable_conv_block_12_bn1_beta: Tensor[(512), float32], %separable_conv_block_12_bn1_moving_mean: Tensor[(512), float32], %separable_conv_block_12_bn1_moving_var: Tensor[(512), float32], %separable_conv_block_12_conv2_weight: Tensor[(1024, 512, 1, 1), float32], %separable_conv_block_12_bn2_gamma: Tensor[(1024), float32], %separable_conv_block_12_bn2_beta: Tensor[(1024), float32], %separable_conv_block_12_bn2_moving_mean: Tensor[(1024), float32], %separable_conv_block_12_bn2_moving_var: Tensor[(1024), float32], %separable_conv_block_13_weight: Tensor[(1024, 1, 3, 3), float32], %separable_conv_block_13_bn1_gamma: Tensor[(1024), float32], %separable_conv_block_13_bn1_beta: Tensor[(1024), float32], %separable_conv_block_13_bn1_moving_mean: Tensor[(1024), float32], %separable_conv_block_13_bn1_moving_var: Tensor[(1024), float32], %separable_conv_block_13_conv2_weight: Tensor[(1024, 1024, 1, 1), float32], %separable_conv_block_13_bn2_gamma: Tensor[(1024), float32], %separable_conv_block_13_bn2_beta: Tensor[(1024), float32], %separable_conv_block_13_bn2_moving_mean: Tensor[(1024), float32], %separable_conv_block_13_bn2_moving_var: Tensor[(1024), float32], %fc_weight: Tensor[(1000, 1024), float32], %fc_bias: Tensor[(1000), float32]) -> Tensor[(1, 1000), float32] {
  %0 = add(%conv_block_1_bn_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(32), float32] */;
  %2 = divide(1f /* ty=float32 */, %1) /* ty=Tensor[(32), float32] */;
  %3 = multiply(%2, %conv_block_1_bn_gamma) /* ty=Tensor[(32), float32] */;
  %4 = nn.conv2d(%data, %conv_block_1_conv_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %5 = expand_dims(%3, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %6 = negative(%conv_block_1_bn_moving_mean) /* ty=Tensor[(32), float32] */;
  %7 = multiply(%6, %3) /* ty=Tensor[(32), float32] */;
  %8 = add(%7, %conv_block_1_bn_beta) /* ty=Tensor[(32), float32] */;
  %9 = multiply(%4, %5) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %10 = expand_dims(%8, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %11 = add(%9, %10) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %12 = nn.relu(%11) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %13 = add(%separable_conv_block_1_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %14 = sqrt(%13) /* ty=Tensor[(32), float32] */;
  %15 = divide(1f /* ty=float32 */, %14) /* ty=Tensor[(32), float32] */;
  %16 = multiply(%15, %separable_conv_block_1_bn1_gamma) /* ty=Tensor[(32), float32] */;
  %17 = nn.conv2d(%12, %separable_conv_block_1_weight, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %18 = expand_dims(%16, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %19 = negative(%separable_conv_block_1_bn1_moving_mean) /* ty=Tensor[(32), float32] */;
  %20 = multiply(%19, %16) /* ty=Tensor[(32), float32] */;
  %21 = add(%20, %separable_conv_block_1_bn1_beta) /* ty=Tensor[(32), float32] */;
  %22 = multiply(%17, %18) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %23 = expand_dims(%21, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %24 = add(%22, %23) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %25 = nn.relu(%24) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %26 = add(%separable_conv_block_1_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %27 = sqrt(%26) /* ty=Tensor[(64), float32] */;
  %28 = divide(1f /* ty=float32 */, %27) /* ty=Tensor[(64), float32] */;
  %29 = multiply(%28, %separable_conv_block_1_bn2_gamma) /* ty=Tensor[(64), float32] */;
  %30 = nn.conv2d(%25, %separable_conv_block_1_conv2_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %31 = expand_dims(%29, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %32 = negative(%separable_conv_block_1_bn2_moving_mean) /* ty=Tensor[(64), float32] */;
  %33 = multiply(%32, %29) /* ty=Tensor[(64), float32] */;
  %34 = add(%33, %separable_conv_block_1_bn2_beta) /* ty=Tensor[(64), float32] */;
  %35 = multiply(%30, %31) /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %36 = expand_dims(%34, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %37 = add(%35, %36) /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %38 = nn.relu(%37) /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %39 = add(%separable_conv_block_2_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %40 = sqrt(%39) /* ty=Tensor[(64), float32] */;
  %41 = divide(1f /* ty=float32 */, %40) /* ty=Tensor[(64), float32] */;
  %42 = multiply(%41, %separable_conv_block_2_bn1_gamma) /* ty=Tensor[(64), float32] */;
  %43 = nn.conv2d(%38, %separable_conv_block_2_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %44 = expand_dims(%42, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %45 = negative(%separable_conv_block_2_bn1_moving_mean) /* ty=Tensor[(64), float32] */;
  %46 = multiply(%45, %42) /* ty=Tensor[(64), float32] */;
  %47 = add(%46, %separable_conv_block_2_bn1_beta) /* ty=Tensor[(64), float32] */;
  %48 = multiply(%43, %44) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %49 = expand_dims(%47, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %50 = add(%48, %49) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %51 = nn.relu(%50) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %52 = add(%separable_conv_block_2_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %53 = sqrt(%52) /* ty=Tensor[(128), float32] */;
  %54 = divide(1f /* ty=float32 */, %53) /* ty=Tensor[(128), float32] */;
  %55 = multiply(%54, %separable_conv_block_2_bn2_gamma) /* ty=Tensor[(128), float32] */;
  %56 = nn.conv2d(%51, %separable_conv_block_2_conv2_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %57 = expand_dims(%55, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %58 = negative(%separable_conv_block_2_bn2_moving_mean) /* ty=Tensor[(128), float32] */;
  %59 = multiply(%58, %55) /* ty=Tensor[(128), float32] */;
  %60 = add(%59, %separable_conv_block_2_bn2_beta) /* ty=Tensor[(128), float32] */;
  %61 = multiply(%56, %57) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %62 = expand_dims(%60, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %63 = add(%61, %62) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %64 = nn.relu(%63) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %65 = add(%separable_conv_block_3_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %66 = sqrt(%65) /* ty=Tensor[(128), float32] */;
  %67 = divide(1f /* ty=float32 */, %66) /* ty=Tensor[(128), float32] */;
  %68 = multiply(%67, %separable_conv_block_3_bn1_gamma) /* ty=Tensor[(128), float32] */;
  %69 = nn.conv2d(%64, %separable_conv_block_3_weight, padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %70 = expand_dims(%68, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %71 = negative(%separable_conv_block_3_bn1_moving_mean) /* ty=Tensor[(128), float32] */;
  %72 = multiply(%71, %68) /* ty=Tensor[(128), float32] */;
  %73 = add(%72, %separable_conv_block_3_bn1_beta) /* ty=Tensor[(128), float32] */;
  %74 = multiply(%69, %70) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %75 = expand_dims(%73, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %76 = add(%74, %75) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %77 = nn.relu(%76) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %78 = add(%separable_conv_block_3_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %79 = sqrt(%78) /* ty=Tensor[(128), float32] */;
  %80 = divide(1f /* ty=float32 */, %79) /* ty=Tensor[(128), float32] */;
  %81 = multiply(%80, %separable_conv_block_3_bn2_gamma) /* ty=Tensor[(128), float32] */;
  %82 = nn.conv2d(%77, %separable_conv_block_3_conv2_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %83 = expand_dims(%81, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %84 = negative(%separable_conv_block_3_bn2_moving_mean) /* ty=Tensor[(128), float32] */;
  %85 = multiply(%84, %81) /* ty=Tensor[(128), float32] */;
  %86 = add(%85, %separable_conv_block_3_bn2_beta) /* ty=Tensor[(128), float32] */;
  %87 = multiply(%82, %83) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %88 = expand_dims(%86, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %89 = add(%87, %88) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %90 = nn.relu(%89) /* ty=Tensor[(1, 128, 8, 8), float32] */;
  %91 = add(%separable_conv_block_4_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %92 = sqrt(%91) /* ty=Tensor[(128), float32] */;
  %93 = divide(1f /* ty=float32 */, %92) /* ty=Tensor[(128), float32] */;
  %94 = multiply(%93, %separable_conv_block_4_bn1_gamma) /* ty=Tensor[(128), float32] */;
  %95 = nn.conv2d(%90, %separable_conv_block_4_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=128, channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 4, 4), float32] */;
  %96 = expand_dims(%94, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %97 = negative(%separable_conv_block_4_bn1_moving_mean) /* ty=Tensor[(128), float32] */;
  %98 = multiply(%97, %94) /* ty=Tensor[(128), float32] */;
  %99 = add(%98, %separable_conv_block_4_bn1_beta) /* ty=Tensor[(128), float32] */;
  %100 = multiply(%95, %96) /* ty=Tensor[(1, 128, 4, 4), float32] */;
  %101 = expand_dims(%99, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %102 = add(%100, %101) /* ty=Tensor[(1, 128, 4, 4), float32] */;
  %103 = nn.relu(%102) /* ty=Tensor[(1, 128, 4, 4), float32] */;
  %104 = add(%separable_conv_block_4_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %105 = sqrt(%104) /* ty=Tensor[(256), float32] */;
  %106 = divide(1f /* ty=float32 */, %105) /* ty=Tensor[(256), float32] */;
  %107 = multiply(%106, %separable_conv_block_4_bn2_gamma) /* ty=Tensor[(256), float32] */;
  %108 = nn.conv2d(%103, %separable_conv_block_4_conv2_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %109 = expand_dims(%107, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %110 = negative(%separable_conv_block_4_bn2_moving_mean) /* ty=Tensor[(256), float32] */;
  %111 = multiply(%110, %107) /* ty=Tensor[(256), float32] */;
  %112 = add(%111, %separable_conv_block_4_bn2_beta) /* ty=Tensor[(256), float32] */;
  %113 = multiply(%108, %109) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %114 = expand_dims(%112, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %115 = add(%113, %114) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %116 = nn.relu(%115) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %117 = add(%separable_conv_block_5_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %118 = sqrt(%117) /* ty=Tensor[(256), float32] */;
  %119 = divide(1f /* ty=float32 */, %118) /* ty=Tensor[(256), float32] */;
  %120 = multiply(%119, %separable_conv_block_5_bn1_gamma) /* ty=Tensor[(256), float32] */;
  %121 = nn.conv2d(%116, %separable_conv_block_5_weight, padding=[1, 1, 1, 1], groups=256, channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %122 = expand_dims(%120, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %123 = negative(%separable_conv_block_5_bn1_moving_mean) /* ty=Tensor[(256), float32] */;
  %124 = multiply(%123, %120) /* ty=Tensor[(256), float32] */;
  %125 = add(%124, %separable_conv_block_5_bn1_beta) /* ty=Tensor[(256), float32] */;
  %126 = multiply(%121, %122) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %127 = expand_dims(%125, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %128 = add(%126, %127) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %129 = nn.relu(%128) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %130 = add(%separable_conv_block_5_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %131 = sqrt(%130) /* ty=Tensor[(256), float32] */;
  %132 = divide(1f /* ty=float32 */, %131) /* ty=Tensor[(256), float32] */;
  %133 = multiply(%132, %separable_conv_block_5_bn2_gamma) /* ty=Tensor[(256), float32] */;
  %134 = nn.conv2d(%129, %separable_conv_block_5_conv2_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %135 = expand_dims(%133, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %136 = negative(%separable_conv_block_5_bn2_moving_mean) /* ty=Tensor[(256), float32] */;
  %137 = multiply(%136, %133) /* ty=Tensor[(256), float32] */;
  %138 = add(%137, %separable_conv_block_5_bn2_beta) /* ty=Tensor[(256), float32] */;
  %139 = multiply(%134, %135) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %140 = expand_dims(%138, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %141 = add(%139, %140) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %142 = nn.relu(%141) /* ty=Tensor[(1, 256, 4, 4), float32] */;
  %143 = add(%separable_conv_block_6_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %144 = sqrt(%143) /* ty=Tensor[(256), float32] */;
  %145 = divide(1f /* ty=float32 */, %144) /* ty=Tensor[(256), float32] */;
  %146 = multiply(%145, %separable_conv_block_6_bn1_gamma) /* ty=Tensor[(256), float32] */;
  %147 = nn.conv2d(%142, %separable_conv_block_6_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=256, channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 2, 2), float32] */;
  %148 = expand_dims(%146, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %149 = negative(%separable_conv_block_6_bn1_moving_mean) /* ty=Tensor[(256), float32] */;
  %150 = multiply(%149, %146) /* ty=Tensor[(256), float32] */;
  %151 = add(%150, %separable_conv_block_6_bn1_beta) /* ty=Tensor[(256), float32] */;
  %152 = multiply(%147, %148) /* ty=Tensor[(1, 256, 2, 2), float32] */;
  %153 = expand_dims(%151, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %154 = add(%152, %153) /* ty=Tensor[(1, 256, 2, 2), float32] */;
  %155 = nn.relu(%154) /* ty=Tensor[(1, 256, 2, 2), float32] */;
  %156 = add(%separable_conv_block_6_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %157 = sqrt(%156) /* ty=Tensor[(512), float32] */;
  %158 = divide(1f /* ty=float32 */, %157) /* ty=Tensor[(512), float32] */;
  %159 = multiply(%158, %separable_conv_block_6_bn2_gamma) /* ty=Tensor[(512), float32] */;
  %160 = nn.conv2d(%155, %separable_conv_block_6_conv2_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %161 = expand_dims(%159, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %162 = negative(%separable_conv_block_6_bn2_moving_mean) /* ty=Tensor[(512), float32] */;
  %163 = multiply(%162, %159) /* ty=Tensor[(512), float32] */;
  %164 = add(%163, %separable_conv_block_6_bn2_beta) /* ty=Tensor[(512), float32] */;
  %165 = multiply(%160, %161) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %166 = expand_dims(%164, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %167 = add(%165, %166) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %168 = nn.relu(%167) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %169 = add(%separable_conv_block_7_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %170 = sqrt(%169) /* ty=Tensor[(512), float32] */;
  %171 = divide(1f /* ty=float32 */, %170) /* ty=Tensor[(512), float32] */;
  %172 = multiply(%171, %separable_conv_block_7_bn1_gamma) /* ty=Tensor[(512), float32] */;
  %173 = nn.conv2d(%168, %separable_conv_block_7_weight, padding=[1, 1, 1, 1], groups=512, channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %174 = expand_dims(%172, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %175 = negative(%separable_conv_block_7_bn1_moving_mean) /* ty=Tensor[(512), float32] */;
  %176 = multiply(%175, %172) /* ty=Tensor[(512), float32] */;
  %177 = add(%176, %separable_conv_block_7_bn1_beta) /* ty=Tensor[(512), float32] */;
  %178 = multiply(%173, %174) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %179 = expand_dims(%177, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %180 = add(%178, %179) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %181 = nn.relu(%180) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %182 = add(%separable_conv_block_7_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %183 = sqrt(%182) /* ty=Tensor[(512), float32] */;
  %184 = divide(1f /* ty=float32 */, %183) /* ty=Tensor[(512), float32] */;
  %185 = multiply(%184, %separable_conv_block_7_bn2_gamma) /* ty=Tensor[(512), float32] */;
  %186 = nn.conv2d(%181, %separable_conv_block_7_conv2_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %187 = expand_dims(%185, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %188 = negative(%separable_conv_block_7_bn2_moving_mean) /* ty=Tensor[(512), float32] */;
  %189 = multiply(%188, %185) /* ty=Tensor[(512), float32] */;
  %190 = add(%189, %separable_conv_block_7_bn2_beta) /* ty=Tensor[(512), float32] */;
  %191 = multiply(%186, %187) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %192 = expand_dims(%190, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %193 = add(%191, %192) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %194 = nn.relu(%193) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %195 = add(%separable_conv_block_8_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %196 = sqrt(%195) /* ty=Tensor[(512), float32] */;
  %197 = divide(1f /* ty=float32 */, %196) /* ty=Tensor[(512), float32] */;
  %198 = multiply(%197, %separable_conv_block_8_bn1_gamma) /* ty=Tensor[(512), float32] */;
  %199 = nn.conv2d(%194, %separable_conv_block_8_weight, padding=[1, 1, 1, 1], groups=512, channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %200 = expand_dims(%198, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %201 = negative(%separable_conv_block_8_bn1_moving_mean) /* ty=Tensor[(512), float32] */;
  %202 = multiply(%201, %198) /* ty=Tensor[(512), float32] */;
  %203 = add(%202, %separable_conv_block_8_bn1_beta) /* ty=Tensor[(512), float32] */;
  %204 = multiply(%199, %200) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %205 = expand_dims(%203, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %206 = add(%204, %205) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %207 = nn.relu(%206) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %208 = add(%separable_conv_block_8_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %209 = sqrt(%208) /* ty=Tensor[(512), float32] */;
  %210 = divide(1f /* ty=float32 */, %209) /* ty=Tensor[(512), float32] */;
  %211 = multiply(%210, %separable_conv_block_8_bn2_gamma) /* ty=Tensor[(512), float32] */;
  %212 = nn.conv2d(%207, %separable_conv_block_8_conv2_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %213 = expand_dims(%211, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %214 = negative(%separable_conv_block_8_bn2_moving_mean) /* ty=Tensor[(512), float32] */;
  %215 = multiply(%214, %211) /* ty=Tensor[(512), float32] */;
  %216 = add(%215, %separable_conv_block_8_bn2_beta) /* ty=Tensor[(512), float32] */;
  %217 = multiply(%212, %213) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %218 = expand_dims(%216, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %219 = add(%217, %218) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %220 = nn.relu(%219) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %221 = add(%separable_conv_block_9_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %222 = sqrt(%221) /* ty=Tensor[(512), float32] */;
  %223 = divide(1f /* ty=float32 */, %222) /* ty=Tensor[(512), float32] */;
  %224 = multiply(%223, %separable_conv_block_9_bn1_gamma) /* ty=Tensor[(512), float32] */;
  %225 = nn.conv2d(%220, %separable_conv_block_9_weight, padding=[1, 1, 1, 1], groups=512, channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %226 = expand_dims(%224, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %227 = negative(%separable_conv_block_9_bn1_moving_mean) /* ty=Tensor[(512), float32] */;
  %228 = multiply(%227, %224) /* ty=Tensor[(512), float32] */;
  %229 = add(%228, %separable_conv_block_9_bn1_beta) /* ty=Tensor[(512), float32] */;
  %230 = multiply(%225, %226) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %231 = expand_dims(%229, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %232 = add(%230, %231) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %233 = nn.relu(%232) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %234 = add(%separable_conv_block_9_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %235 = sqrt(%234) /* ty=Tensor[(512), float32] */;
  %236 = divide(1f /* ty=float32 */, %235) /* ty=Tensor[(512), float32] */;
  %237 = multiply(%236, %separable_conv_block_9_bn2_gamma) /* ty=Tensor[(512), float32] */;
  %238 = nn.conv2d(%233, %separable_conv_block_9_conv2_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %239 = expand_dims(%237, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %240 = negative(%separable_conv_block_9_bn2_moving_mean) /* ty=Tensor[(512), float32] */;
  %241 = multiply(%240, %237) /* ty=Tensor[(512), float32] */;
  %242 = add(%241, %separable_conv_block_9_bn2_beta) /* ty=Tensor[(512), float32] */;
  %243 = multiply(%238, %239) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %244 = expand_dims(%242, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %245 = add(%243, %244) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %246 = nn.relu(%245) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %247 = add(%separable_conv_block_10_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %248 = sqrt(%247) /* ty=Tensor[(512), float32] */;
  %249 = divide(1f /* ty=float32 */, %248) /* ty=Tensor[(512), float32] */;
  %250 = multiply(%249, %separable_conv_block_10_bn1_gamma) /* ty=Tensor[(512), float32] */;
  %251 = nn.conv2d(%246, %separable_conv_block_10_weight, padding=[1, 1, 1, 1], groups=512, channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %252 = expand_dims(%250, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %253 = negative(%separable_conv_block_10_bn1_moving_mean) /* ty=Tensor[(512), float32] */;
  %254 = multiply(%253, %250) /* ty=Tensor[(512), float32] */;
  %255 = add(%254, %separable_conv_block_10_bn1_beta) /* ty=Tensor[(512), float32] */;
  %256 = multiply(%251, %252) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %257 = expand_dims(%255, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %258 = add(%256, %257) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %259 = nn.relu(%258) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %260 = add(%separable_conv_block_10_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %261 = sqrt(%260) /* ty=Tensor[(512), float32] */;
  %262 = divide(1f /* ty=float32 */, %261) /* ty=Tensor[(512), float32] */;
  %263 = multiply(%262, %separable_conv_block_10_bn2_gamma) /* ty=Tensor[(512), float32] */;
  %264 = nn.conv2d(%259, %separable_conv_block_10_conv2_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %265 = expand_dims(%263, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %266 = negative(%separable_conv_block_10_bn2_moving_mean) /* ty=Tensor[(512), float32] */;
  %267 = multiply(%266, %263) /* ty=Tensor[(512), float32] */;
  %268 = add(%267, %separable_conv_block_10_bn2_beta) /* ty=Tensor[(512), float32] */;
  %269 = multiply(%264, %265) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %270 = expand_dims(%268, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %271 = add(%269, %270) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %272 = nn.relu(%271) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %273 = add(%separable_conv_block_11_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %274 = sqrt(%273) /* ty=Tensor[(512), float32] */;
  %275 = divide(1f /* ty=float32 */, %274) /* ty=Tensor[(512), float32] */;
  %276 = multiply(%275, %separable_conv_block_11_bn1_gamma) /* ty=Tensor[(512), float32] */;
  %277 = nn.conv2d(%272, %separable_conv_block_11_weight, padding=[1, 1, 1, 1], groups=512, channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %278 = expand_dims(%276, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %279 = negative(%separable_conv_block_11_bn1_moving_mean) /* ty=Tensor[(512), float32] */;
  %280 = multiply(%279, %276) /* ty=Tensor[(512), float32] */;
  %281 = add(%280, %separable_conv_block_11_bn1_beta) /* ty=Tensor[(512), float32] */;
  %282 = multiply(%277, %278) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %283 = expand_dims(%281, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %284 = add(%282, %283) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %285 = nn.relu(%284) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %286 = add(%separable_conv_block_11_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %287 = sqrt(%286) /* ty=Tensor[(512), float32] */;
  %288 = divide(1f /* ty=float32 */, %287) /* ty=Tensor[(512), float32] */;
  %289 = multiply(%288, %separable_conv_block_11_bn2_gamma) /* ty=Tensor[(512), float32] */;
  %290 = nn.conv2d(%285, %separable_conv_block_11_conv2_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %291 = expand_dims(%289, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %292 = negative(%separable_conv_block_11_bn2_moving_mean) /* ty=Tensor[(512), float32] */;
  %293 = multiply(%292, %289) /* ty=Tensor[(512), float32] */;
  %294 = add(%293, %separable_conv_block_11_bn2_beta) /* ty=Tensor[(512), float32] */;
  %295 = multiply(%290, %291) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %296 = expand_dims(%294, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %297 = add(%295, %296) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %298 = nn.relu(%297) /* ty=Tensor[(1, 512, 2, 2), float32] */;
  %299 = add(%separable_conv_block_12_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %300 = sqrt(%299) /* ty=Tensor[(512), float32] */;
  %301 = divide(1f /* ty=float32 */, %300) /* ty=Tensor[(512), float32] */;
  %302 = multiply(%301, %separable_conv_block_12_bn1_gamma) /* ty=Tensor[(512), float32] */;
  %303 = nn.conv2d(%298, %separable_conv_block_12_weight, strides=[2, 2], padding=[1, 1, 1, 1], groups=512, channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %304 = expand_dims(%302, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %305 = negative(%separable_conv_block_12_bn1_moving_mean) /* ty=Tensor[(512), float32] */;
  %306 = multiply(%305, %302) /* ty=Tensor[(512), float32] */;
  %307 = add(%306, %separable_conv_block_12_bn1_beta) /* ty=Tensor[(512), float32] */;
  %308 = multiply(%303, %304) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %309 = expand_dims(%307, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %310 = add(%308, %309) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %311 = nn.relu(%310) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %312 = add(%separable_conv_block_12_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(1024), float32] */;
  %313 = sqrt(%312) /* ty=Tensor[(1024), float32] */;
  %314 = divide(1f /* ty=float32 */, %313) /* ty=Tensor[(1024), float32] */;
  %315 = multiply(%314, %separable_conv_block_12_bn2_gamma) /* ty=Tensor[(1024), float32] */;
  %316 = nn.conv2d(%311, %separable_conv_block_12_conv2_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %317 = expand_dims(%315, axis=1, num_newaxis=2) /* ty=Tensor[(1024, 1, 1), float32] */;
  %318 = negative(%separable_conv_block_12_bn2_moving_mean) /* ty=Tensor[(1024), float32] */;
  %319 = multiply(%318, %315) /* ty=Tensor[(1024), float32] */;
  %320 = add(%319, %separable_conv_block_12_bn2_beta) /* ty=Tensor[(1024), float32] */;
  %321 = multiply(%316, %317) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %322 = expand_dims(%320, axis=1, num_newaxis=2) /* ty=Tensor[(1024, 1, 1), float32] */;
  %323 = add(%321, %322) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %324 = nn.relu(%323) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %325 = add(%separable_conv_block_13_bn1_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(1024), float32] */;
  %326 = sqrt(%325) /* ty=Tensor[(1024), float32] */;
  %327 = divide(1f /* ty=float32 */, %326) /* ty=Tensor[(1024), float32] */;
  %328 = multiply(%327, %separable_conv_block_13_bn1_gamma) /* ty=Tensor[(1024), float32] */;
  %329 = nn.conv2d(%324, %separable_conv_block_13_weight, padding=[1, 1, 1, 1], groups=1024, channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %330 = expand_dims(%328, axis=1, num_newaxis=2) /* ty=Tensor[(1024, 1, 1), float32] */;
  %331 = negative(%separable_conv_block_13_bn1_moving_mean) /* ty=Tensor[(1024), float32] */;
  %332 = multiply(%331, %328) /* ty=Tensor[(1024), float32] */;
  %333 = add(%332, %separable_conv_block_13_bn1_beta) /* ty=Tensor[(1024), float32] */;
  %334 = multiply(%329, %330) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %335 = expand_dims(%333, axis=1, num_newaxis=2) /* ty=Tensor[(1024, 1, 1), float32] */;
  %336 = add(%334, %335) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %337 = nn.relu(%336) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %338 = add(%separable_conv_block_13_bn2_moving_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(1024), float32] */;
  %339 = sqrt(%338) /* ty=Tensor[(1024), float32] */;
  %340 = divide(1f /* ty=float32 */, %339) /* ty=Tensor[(1024), float32] */;
  %341 = multiply(%340, %separable_conv_block_13_bn2_gamma) /* ty=Tensor[(1024), float32] */;
  %342 = nn.conv2d(%337, %separable_conv_block_13_conv2_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %343 = expand_dims(%341, axis=1, num_newaxis=2) /* ty=Tensor[(1024, 1, 1), float32] */;
  %344 = negative(%separable_conv_block_13_bn2_moving_mean) /* ty=Tensor[(1024), float32] */;
  %345 = multiply(%344, %341) /* ty=Tensor[(1024), float32] */;
  %346 = add(%345, %separable_conv_block_13_bn2_beta) /* ty=Tensor[(1024), float32] */;
  %347 = multiply(%342, %343) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %348 = expand_dims(%346, axis=1, num_newaxis=2) /* ty=Tensor[(1024, 1, 1), float32] */;
  %349 = add(%347, %348) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %350 = nn.relu(%349) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %351 = nn.global_avg_pool2d(%350) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %352 = nn.batch_flatten(%351) /* ty=Tensor[(1, 1024), float32] */;
  %353 = nn.dense(%352, %fc_weight, units=1000) /* ty=Tensor[(1, 1000), float32] */;
  %354 = nn.bias_add(%353, %fc_bias) /* ty=Tensor[(1, 1000), float32] */;
  nn.softmax(%354) /* ty=Tensor[(1, 1000), float32] */
}
