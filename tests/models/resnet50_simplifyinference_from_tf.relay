#[version="0.0.5"]

def @main(%input_tensor: Tensor[(?, 224, 224, 3), float32], %resnet_model_conv2d_kernel: Tensor[(7, 7, 3, 64), float32], %resnet_model_batch_normalization_gamma: Tensor[(64), float32], %resnet_model_batch_normalization_beta: Tensor[(64), float32], %resnet_model_batch_normalization_moving_mean: Tensor[(64), float32], %resnet_model_batch_normalization_moving_variance: Tensor[(64), float32], %resnet_model_conv2d_2_kernel: Tensor[(1, 1, 64, 64), float32], %resnet_model_batch_normalization_2_gamma: Tensor[(64), float32], %resnet_model_batch_normalization_2_beta: Tensor[(64), float32], %resnet_model_batch_normalization_2_moving_mean: Tensor[(64), float32], %resnet_model_batch_normalization_2_moving_variance: Tensor[(64), float32], %resnet_model_conv2d_3_kernel: Tensor[(3, 3, 64, 64), float32], %resnet_model_batch_normalization_3_gamma: Tensor[(64), float32], %resnet_model_batch_normalization_3_beta: Tensor[(64), float32], %resnet_model_batch_normalization_3_moving_mean: Tensor[(64), float32], %resnet_model_batch_normalization_3_moving_variance: Tensor[(64), float32], %resnet_model_conv2d_4_kernel: Tensor[(1, 1, 64, 256), float32], %resnet_model_batch_normalization_4_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_4_beta: Tensor[(256), float32], %resnet_model_batch_normalization_4_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_4_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_1_kernel: Tensor[(1, 1, 64, 256), float32], %resnet_model_batch_normalization_1_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_1_beta: Tensor[(256), float32], %resnet_model_batch_normalization_1_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_1_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_5_kernel: Tensor[(1, 1, 256, 64), float32], %resnet_model_batch_normalization_5_gamma: Tensor[(64), float32], %resnet_model_batch_normalization_5_beta: Tensor[(64), float32], %resnet_model_batch_normalization_5_moving_mean: Tensor[(64), float32], %resnet_model_batch_normalization_5_moving_variance: Tensor[(64), float32], %resnet_model_conv2d_6_kernel: Tensor[(3, 3, 64, 64), float32], %resnet_model_batch_normalization_6_gamma: Tensor[(64), float32], %resnet_model_batch_normalization_6_beta: Tensor[(64), float32], %resnet_model_batch_normalization_6_moving_mean: Tensor[(64), float32], %resnet_model_batch_normalization_6_moving_variance: Tensor[(64), float32], %resnet_model_conv2d_7_kernel: Tensor[(1, 1, 64, 256), float32], %resnet_model_batch_normalization_7_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_7_beta: Tensor[(256), float32], %resnet_model_batch_normalization_7_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_7_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_8_kernel: Tensor[(1, 1, 256, 64), float32], %resnet_model_batch_normalization_8_gamma: Tensor[(64), float32], %resnet_model_batch_normalization_8_beta: Tensor[(64), float32], %resnet_model_batch_normalization_8_moving_mean: Tensor[(64), float32], %resnet_model_batch_normalization_8_moving_variance: Tensor[(64), float32], %resnet_model_conv2d_9_kernel: Tensor[(3, 3, 64, 64), float32], %resnet_model_batch_normalization_9_gamma: Tensor[(64), float32], %resnet_model_batch_normalization_9_beta: Tensor[(64), float32], %resnet_model_batch_normalization_9_moving_mean: Tensor[(64), float32], %resnet_model_batch_normalization_9_moving_variance: Tensor[(64), float32], %resnet_model_conv2d_10_kernel: Tensor[(1, 1, 64, 256), float32], %resnet_model_batch_normalization_10_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_10_beta: Tensor[(256), float32], %resnet_model_batch_normalization_10_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_10_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_12_kernel: Tensor[(1, 1, 256, 128), float32], %resnet_model_batch_normalization_12_gamma: Tensor[(128), float32], %resnet_model_batch_normalization_12_beta: Tensor[(128), float32], %resnet_model_batch_normalization_12_moving_mean: Tensor[(128), float32], %resnet_model_batch_normalization_12_moving_variance: Tensor[(128), float32], %resnet_model_conv2d_13_kernel: Tensor[(3, 3, 128, 128), float32], %resnet_model_batch_normalization_13_gamma: Tensor[(128), float32], %resnet_model_batch_normalization_13_beta: Tensor[(128), float32], %resnet_model_batch_normalization_13_moving_mean: Tensor[(128), float32], %resnet_model_batch_normalization_13_moving_variance: Tensor[(128), float32], %resnet_model_conv2d_14_kernel: Tensor[(1, 1, 128, 512), float32], %resnet_model_batch_normalization_14_gamma: Tensor[(512), float32], %resnet_model_batch_normalization_14_beta: Tensor[(512), float32], %resnet_model_batch_normalization_14_moving_mean: Tensor[(512), float32], %resnet_model_batch_normalization_14_moving_variance: Tensor[(512), float32], %resnet_model_conv2d_11_kernel: Tensor[(1, 1, 256, 512), float32], %resnet_model_batch_normalization_11_gamma: Tensor[(512), float32], %resnet_model_batch_normalization_11_beta: Tensor[(512), float32], %resnet_model_batch_normalization_11_moving_mean: Tensor[(512), float32], %resnet_model_batch_normalization_11_moving_variance: Tensor[(512), float32], %resnet_model_conv2d_15_kernel: Tensor[(1, 1, 512, 128), float32], %resnet_model_batch_normalization_15_gamma: Tensor[(128), float32], %resnet_model_batch_normalization_15_beta: Tensor[(128), float32], %resnet_model_batch_normalization_15_moving_mean: Tensor[(128), float32], %resnet_model_batch_normalization_15_moving_variance: Tensor[(128), float32], %resnet_model_conv2d_16_kernel: Tensor[(3, 3, 128, 128), float32], %resnet_model_batch_normalization_16_gamma: Tensor[(128), float32], %resnet_model_batch_normalization_16_beta: Tensor[(128), float32], %resnet_model_batch_normalization_16_moving_mean: Tensor[(128), float32], %resnet_model_batch_normalization_16_moving_variance: Tensor[(128), float32], %resnet_model_conv2d_17_kernel: Tensor[(1, 1, 128, 512), float32], %resnet_model_batch_normalization_17_gamma: Tensor[(512), float32], %resnet_model_batch_normalization_17_beta: Tensor[(512), float32], %resnet_model_batch_normalization_17_moving_mean: Tensor[(512), float32], %resnet_model_batch_normalization_17_moving_variance: Tensor[(512), float32], %resnet_model_conv2d_18_kernel: Tensor[(1, 1, 512, 128), float32], %resnet_model_batch_normalization_18_gamma: Tensor[(128), float32], %resnet_model_batch_normalization_18_beta: Tensor[(128), float32], %resnet_model_batch_normalization_18_moving_mean: Tensor[(128), float32], %resnet_model_batch_normalization_18_moving_variance: Tensor[(128), float32], %resnet_model_conv2d_19_kernel: Tensor[(3, 3, 128, 128), float32], %resnet_model_batch_normalization_19_gamma: Tensor[(128), float32], %resnet_model_batch_normalization_19_beta: Tensor[(128), float32], %resnet_model_batch_normalization_19_moving_mean: Tensor[(128), float32], %resnet_model_batch_normalization_19_moving_variance: Tensor[(128), float32], %resnet_model_conv2d_20_kernel: Tensor[(1, 1, 128, 512), float32], %resnet_model_batch_normalization_20_gamma: Tensor[(512), float32], %resnet_model_batch_normalization_20_beta: Tensor[(512), float32], %resnet_model_batch_normalization_20_moving_mean: Tensor[(512), float32], %resnet_model_batch_normalization_20_moving_variance: Tensor[(512), float32], %resnet_model_conv2d_21_kernel: Tensor[(1, 1, 512, 128), float32], %resnet_model_batch_normalization_21_gamma: Tensor[(128), float32], %resnet_model_batch_normalization_21_beta: Tensor[(128), float32], %resnet_model_batch_normalization_21_moving_mean: Tensor[(128), float32], %resnet_model_batch_normalization_21_moving_variance: Tensor[(128), float32], %resnet_model_conv2d_22_kernel: Tensor[(3, 3, 128, 128), float32], %resnet_model_batch_normalization_22_gamma: Tensor[(128), float32], %resnet_model_batch_normalization_22_beta: Tensor[(128), float32], %resnet_model_batch_normalization_22_moving_mean: Tensor[(128), float32], %resnet_model_batch_normalization_22_moving_variance: Tensor[(128), float32], %resnet_model_conv2d_23_kernel: Tensor[(1, 1, 128, 512), float32], %resnet_model_batch_normalization_23_gamma: Tensor[(512), float32], %resnet_model_batch_normalization_23_beta: Tensor[(512), float32], %resnet_model_batch_normalization_23_moving_mean: Tensor[(512), float32], %resnet_model_batch_normalization_23_moving_variance: Tensor[(512), float32], %resnet_model_conv2d_25_kernel: Tensor[(1, 1, 512, 256), float32], %resnet_model_batch_normalization_25_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_25_beta: Tensor[(256), float32], %resnet_model_batch_normalization_25_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_25_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_26_kernel: Tensor[(3, 3, 256, 256), float32], %resnet_model_batch_normalization_26_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_26_beta: Tensor[(256), float32], %resnet_model_batch_normalization_26_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_26_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_27_kernel: Tensor[(1, 1, 256, 1024), float32], %resnet_model_batch_normalization_27_gamma: Tensor[(1024), float32], %resnet_model_batch_normalization_27_beta: Tensor[(1024), float32], %resnet_model_batch_normalization_27_moving_mean: Tensor[(1024), float32], %resnet_model_batch_normalization_27_moving_variance: Tensor[(1024), float32], %resnet_model_conv2d_24_kernel: Tensor[(1, 1, 512, 1024), float32], %resnet_model_batch_normalization_24_gamma: Tensor[(1024), float32], %resnet_model_batch_normalization_24_beta: Tensor[(1024), float32], %resnet_model_batch_normalization_24_moving_mean: Tensor[(1024), float32], %resnet_model_batch_normalization_24_moving_variance: Tensor[(1024), float32], %resnet_model_conv2d_28_kernel: Tensor[(1, 1, 1024, 256), float32], %resnet_model_batch_normalization_28_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_28_beta: Tensor[(256), float32], %resnet_model_batch_normalization_28_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_28_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_29_kernel: Tensor[(3, 3, 256, 256), float32], %resnet_model_batch_normalization_29_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_29_beta: Tensor[(256), float32], %resnet_model_batch_normalization_29_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_29_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_30_kernel: Tensor[(1, 1, 256, 1024), float32], %resnet_model_batch_normalization_30_gamma: Tensor[(1024), float32], %resnet_model_batch_normalization_30_beta: Tensor[(1024), float32], %resnet_model_batch_normalization_30_moving_mean: Tensor[(1024), float32], %resnet_model_batch_normalization_30_moving_variance: Tensor[(1024), float32], %resnet_model_conv2d_31_kernel: Tensor[(1, 1, 1024, 256), float32], %resnet_model_batch_normalization_31_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_31_beta: Tensor[(256), float32], %resnet_model_batch_normalization_31_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_31_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_32_kernel: Tensor[(3, 3, 256, 256), float32], %resnet_model_batch_normalization_32_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_32_beta: Tensor[(256), float32], %resnet_model_batch_normalization_32_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_32_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_33_kernel: Tensor[(1, 1, 256, 1024), float32], %resnet_model_batch_normalization_33_gamma: Tensor[(1024), float32], %resnet_model_batch_normalization_33_beta: Tensor[(1024), float32], %resnet_model_batch_normalization_33_moving_mean: Tensor[(1024), float32], %resnet_model_batch_normalization_33_moving_variance: Tensor[(1024), float32], %resnet_model_conv2d_34_kernel: Tensor[(1, 1, 1024, 256), float32], %resnet_model_batch_normalization_34_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_34_beta: Tensor[(256), float32], %resnet_model_batch_normalization_34_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_34_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_35_kernel: Tensor[(3, 3, 256, 256), float32], %resnet_model_batch_normalization_35_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_35_beta: Tensor[(256), float32], %resnet_model_batch_normalization_35_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_35_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_36_kernel: Tensor[(1, 1, 256, 1024), float32], %resnet_model_batch_normalization_36_gamma: Tensor[(1024), float32], %resnet_model_batch_normalization_36_beta: Tensor[(1024), float32], %resnet_model_batch_normalization_36_moving_mean: Tensor[(1024), float32], %resnet_model_batch_normalization_36_moving_variance: Tensor[(1024), float32], %resnet_model_conv2d_37_kernel: Tensor[(1, 1, 1024, 256), float32], %resnet_model_batch_normalization_37_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_37_beta: Tensor[(256), float32], %resnet_model_batch_normalization_37_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_37_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_38_kernel: Tensor[(3, 3, 256, 256), float32], %resnet_model_batch_normalization_38_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_38_beta: Tensor[(256), float32], %resnet_model_batch_normalization_38_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_38_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_39_kernel: Tensor[(1, 1, 256, 1024), float32], %resnet_model_batch_normalization_39_gamma: Tensor[(1024), float32], %resnet_model_batch_normalization_39_beta: Tensor[(1024), float32], %resnet_model_batch_normalization_39_moving_mean: Tensor[(1024), float32], %resnet_model_batch_normalization_39_moving_variance: Tensor[(1024), float32], %resnet_model_conv2d_40_kernel: Tensor[(1, 1, 1024, 256), float32], %resnet_model_batch_normalization_40_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_40_beta: Tensor[(256), float32], %resnet_model_batch_normalization_40_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_40_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_41_kernel: Tensor[(3, 3, 256, 256), float32], %resnet_model_batch_normalization_41_gamma: Tensor[(256), float32], %resnet_model_batch_normalization_41_beta: Tensor[(256), float32], %resnet_model_batch_normalization_41_moving_mean: Tensor[(256), float32], %resnet_model_batch_normalization_41_moving_variance: Tensor[(256), float32], %resnet_model_conv2d_42_kernel: Tensor[(1, 1, 256, 1024), float32], %resnet_model_batch_normalization_42_gamma: Tensor[(1024), float32], %resnet_model_batch_normalization_42_beta: Tensor[(1024), float32], %resnet_model_batch_normalization_42_moving_mean: Tensor[(1024), float32], %resnet_model_batch_normalization_42_moving_variance: Tensor[(1024), float32], %resnet_model_conv2d_44_kernel: Tensor[(1, 1, 1024, 512), float32], %resnet_model_batch_normalization_44_gamma: Tensor[(512), float32], %resnet_model_batch_normalization_44_beta: Tensor[(512), float32], %resnet_model_batch_normalization_44_moving_mean: Tensor[(512), float32], %resnet_model_batch_normalization_44_moving_variance: Tensor[(512), float32], %resnet_model_conv2d_45_kernel: Tensor[(3, 3, 512, 512), float32], %resnet_model_batch_normalization_45_gamma: Tensor[(512), float32], %resnet_model_batch_normalization_45_beta: Tensor[(512), float32], %resnet_model_batch_normalization_45_moving_mean: Tensor[(512), float32], %resnet_model_batch_normalization_45_moving_variance: Tensor[(512), float32], %resnet_model_conv2d_46_kernel: Tensor[(1, 1, 512, 2048), float32], %resnet_model_batch_normalization_46_gamma: Tensor[(2048), float32], %resnet_model_batch_normalization_46_beta: Tensor[(2048), float32], %resnet_model_batch_normalization_46_moving_mean: Tensor[(2048), float32], %resnet_model_batch_normalization_46_moving_variance: Tensor[(2048), float32], %resnet_model_conv2d_43_kernel: Tensor[(1, 1, 1024, 2048), float32], %resnet_model_batch_normalization_43_gamma: Tensor[(2048), float32], %resnet_model_batch_normalization_43_beta: Tensor[(2048), float32], %resnet_model_batch_normalization_43_moving_mean: Tensor[(2048), float32], %resnet_model_batch_normalization_43_moving_variance: Tensor[(2048), float32], %resnet_model_conv2d_47_kernel: Tensor[(1, 1, 2048, 512), float32], %resnet_model_batch_normalization_47_gamma: Tensor[(512), float32], %resnet_model_batch_normalization_47_beta: Tensor[(512), float32], %resnet_model_batch_normalization_47_moving_mean: Tensor[(512), float32], %resnet_model_batch_normalization_47_moving_variance: Tensor[(512), float32], %resnet_model_conv2d_48_kernel: Tensor[(3, 3, 512, 512), float32], %resnet_model_batch_normalization_48_gamma: Tensor[(512), float32], %resnet_model_batch_normalization_48_beta: Tensor[(512), float32], %resnet_model_batch_normalization_48_moving_mean: Tensor[(512), float32], %resnet_model_batch_normalization_48_moving_variance: Tensor[(512), float32], %resnet_model_conv2d_49_kernel: Tensor[(1, 1, 512, 2048), float32], %resnet_model_batch_normalization_49_gamma: Tensor[(2048), float32], %resnet_model_batch_normalization_49_beta: Tensor[(2048), float32], %resnet_model_batch_normalization_49_moving_mean: Tensor[(2048), float32], %resnet_model_batch_normalization_49_moving_variance: Tensor[(2048), float32], %resnet_model_conv2d_50_kernel: Tensor[(1, 1, 2048, 512), float32], %resnet_model_batch_normalization_50_gamma: Tensor[(512), float32], %resnet_model_batch_normalization_50_beta: Tensor[(512), float32], %resnet_model_batch_normalization_50_moving_mean: Tensor[(512), float32], %resnet_model_batch_normalization_50_moving_variance: Tensor[(512), float32], %resnet_model_conv2d_51_kernel: Tensor[(3, 3, 512, 512), float32], %resnet_model_batch_normalization_51_gamma: Tensor[(512), float32], %resnet_model_batch_normalization_51_beta: Tensor[(512), float32], %resnet_model_batch_normalization_51_moving_mean: Tensor[(512), float32], %resnet_model_batch_normalization_51_moving_variance: Tensor[(512), float32], %resnet_model_conv2d_52_kernel: Tensor[(1, 1, 512, 2048), float32], %resnet_model_batch_normalization_52_gamma: Tensor[(2048), float32], %resnet_model_batch_normalization_52_beta: Tensor[(2048), float32], %resnet_model_batch_normalization_52_moving_mean: Tensor[(2048), float32], %resnet_model_batch_normalization_52_moving_variance: Tensor[(2048), float32], %resnet_model_dense_kernel: Tensor[(2048, 1001), float32], %resnet_model_dense_bias: Tensor[(1001), float32]) -> Tensor[(?, 1001), float32] {
  %10 = nn.pad(%input_tensor, 0 /* ty=int32 */, pad_width=[[0, 0], [3, 3], [3, 3], [0, 0]]) /* resnet_model/Pad */ /* ty=Tensor[(?, 230, 230, 3), float32] */;
  %11 = add(%resnet_model_batch_normalization_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %12 = sqrt(%11) /* ty=Tensor[(64), float32] */;
  %13 = divide(1f /* ty=float32 */, %12) /* ty=Tensor[(64), float32] */;
  %14 = nn.conv2d(%10, %resnet_model_conv2d_kernel, strides=[2, 2], padding=[0, 0, 0, 0], channels=64, kernel_size=[7, 7], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d/Conv2D */ /* ty=Tensor[(?, 112, 112, 64), float32] */;
  %15 = multiply(%13, %resnet_model_batch_normalization_gamma) /* ty=Tensor[(64), float32] */;
  %16 = negative(%resnet_model_batch_normalization_moving_mean) /* ty=Tensor[(64), float32] */;
  %17 = multiply(%16, %15) /* ty=Tensor[(64), float32] */;
  %18 = multiply(%14, %15) /* ty=Tensor[(?, 112, 112, 64), float32] */;
  %19 = add(%17, %resnet_model_batch_normalization_beta) /* ty=Tensor[(64), float32] */;
  %20 = add(%18, %19) /* ty=Tensor[(?, 112, 112, 64), float32] */;
  %21 = nn.relu(%20) /* resnet_model/Relu */ /* ty=Tensor[(?, 112, 112, 64), float32] */;
  %22 = nn.max_pool2d(%21, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 1, 1], layout="NHWC") /* resnet_model/max_pooling2d/MaxPool */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %23 = add(%resnet_model_batch_normalization_2_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %24 = sqrt(%23) /* ty=Tensor[(64), float32] */;
  %25 = divide(1f /* ty=float32 */, %24) /* ty=Tensor[(64), float32] */;
  %26 = nn.conv2d(%22, %resnet_model_conv2d_2_kernel, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_2/Conv2D */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %27 = multiply(%25, %resnet_model_batch_normalization_2_gamma) /* ty=Tensor[(64), float32] */;
  %28 = negative(%resnet_model_batch_normalization_2_moving_mean) /* ty=Tensor[(64), float32] */;
  %29 = multiply(%28, %27) /* ty=Tensor[(64), float32] */;
  %30 = multiply(%26, %27) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %31 = add(%29, %resnet_model_batch_normalization_2_beta) /* ty=Tensor[(64), float32] */;
  %32 = add(%30, %31) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %33 = nn.relu(%32) /* resnet_model/Relu_1 */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %34 = add(%resnet_model_batch_normalization_3_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %35 = sqrt(%34) /* ty=Tensor[(64), float32] */;
  %36 = divide(1f /* ty=float32 */, %35) /* ty=Tensor[(64), float32] */;
  %37 = nn.conv2d(%33, %resnet_model_conv2d_3_kernel, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_3/Conv2D */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %38 = multiply(%36, %resnet_model_batch_normalization_3_gamma) /* ty=Tensor[(64), float32] */;
  %39 = negative(%resnet_model_batch_normalization_3_moving_mean) /* ty=Tensor[(64), float32] */;
  %40 = multiply(%39, %38) /* ty=Tensor[(64), float32] */;
  %41 = multiply(%37, %38) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %42 = add(%40, %resnet_model_batch_normalization_3_beta) /* ty=Tensor[(64), float32] */;
  %43 = add(%41, %42) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %44 = nn.relu(%43) /* resnet_model/Relu_2 */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %45 = add(%resnet_model_batch_normalization_4_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %46 = sqrt(%45) /* ty=Tensor[(256), float32] */;
  %47 = divide(1f /* ty=float32 */, %46) /* ty=Tensor[(256), float32] */;
  %48 = nn.conv2d(%44, %resnet_model_conv2d_4_kernel, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_4/Conv2D */ /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %49 = multiply(%47, %resnet_model_batch_normalization_4_gamma) /* ty=Tensor[(256), float32] */;
  %50 = negative(%resnet_model_batch_normalization_4_moving_mean) /* ty=Tensor[(256), float32] */;
  %51 = multiply(%50, %49) /* ty=Tensor[(256), float32] */;
  %52 = multiply(%48, %49) /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %53 = add(%51, %resnet_model_batch_normalization_4_beta) /* ty=Tensor[(256), float32] */;
  %54 = add(%resnet_model_batch_normalization_1_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %55 = sqrt(%54) /* ty=Tensor[(256), float32] */;
  %56 = divide(1f /* ty=float32 */, %55) /* ty=Tensor[(256), float32] */;
  %57 = nn.conv2d(%22, %resnet_model_conv2d_1_kernel, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_1/Conv2D */ /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %58 = multiply(%56, %resnet_model_batch_normalization_1_gamma) /* ty=Tensor[(256), float32] */;
  %59 = negative(%resnet_model_batch_normalization_1_moving_mean) /* ty=Tensor[(256), float32] */;
  %60 = multiply(%59, %58) /* ty=Tensor[(256), float32] */;
  %61 = multiply(%57, %58) /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %62 = add(%60, %resnet_model_batch_normalization_1_beta) /* ty=Tensor[(256), float32] */;
  %63 = add(%52, %53) /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %64 = add(%61, %62) /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %65 = add(%63, %64) /* resnet_model/add */ /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %66 = nn.relu(%65) /* resnet_model/Relu_3 */ /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %67 = add(%resnet_model_batch_normalization_5_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %68 = sqrt(%67) /* ty=Tensor[(64), float32] */;
  %69 = divide(1f /* ty=float32 */, %68) /* ty=Tensor[(64), float32] */;
  %70 = nn.conv2d(%66, %resnet_model_conv2d_5_kernel, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_5/Conv2D */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %71 = multiply(%69, %resnet_model_batch_normalization_5_gamma) /* ty=Tensor[(64), float32] */;
  %72 = negative(%resnet_model_batch_normalization_5_moving_mean) /* ty=Tensor[(64), float32] */;
  %73 = multiply(%72, %71) /* ty=Tensor[(64), float32] */;
  %74 = multiply(%70, %71) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %75 = add(%73, %resnet_model_batch_normalization_5_beta) /* ty=Tensor[(64), float32] */;
  %76 = add(%74, %75) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %77 = nn.relu(%76) /* resnet_model/Relu_4 */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %78 = add(%resnet_model_batch_normalization_6_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %79 = sqrt(%78) /* ty=Tensor[(64), float32] */;
  %80 = divide(1f /* ty=float32 */, %79) /* ty=Tensor[(64), float32] */;
  %81 = nn.conv2d(%77, %resnet_model_conv2d_6_kernel, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_6/Conv2D */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %82 = multiply(%80, %resnet_model_batch_normalization_6_gamma) /* ty=Tensor[(64), float32] */;
  %83 = negative(%resnet_model_batch_normalization_6_moving_mean) /* ty=Tensor[(64), float32] */;
  %84 = multiply(%83, %82) /* ty=Tensor[(64), float32] */;
  %85 = multiply(%81, %82) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %86 = add(%84, %resnet_model_batch_normalization_6_beta) /* ty=Tensor[(64), float32] */;
  %87 = add(%85, %86) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %88 = nn.relu(%87) /* resnet_model/Relu_5 */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %89 = add(%resnet_model_batch_normalization_7_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %90 = sqrt(%89) /* ty=Tensor[(256), float32] */;
  %91 = divide(1f /* ty=float32 */, %90) /* ty=Tensor[(256), float32] */;
  %92 = nn.conv2d(%88, %resnet_model_conv2d_7_kernel, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_7/Conv2D */ /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %93 = multiply(%91, %resnet_model_batch_normalization_7_gamma) /* ty=Tensor[(256), float32] */;
  %94 = negative(%resnet_model_batch_normalization_7_moving_mean) /* ty=Tensor[(256), float32] */;
  %95 = multiply(%94, %93) /* ty=Tensor[(256), float32] */;
  %96 = multiply(%92, %93) /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %97 = add(%95, %resnet_model_batch_normalization_7_beta) /* ty=Tensor[(256), float32] */;
  %98 = add(%96, %97) /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %99 = add(%98, %66) /* resnet_model/add_1 */ /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %100 = nn.relu(%99) /* resnet_model/Relu_6 */ /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %101 = add(%resnet_model_batch_normalization_8_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %102 = sqrt(%101) /* ty=Tensor[(64), float32] */;
  %103 = divide(1f /* ty=float32 */, %102) /* ty=Tensor[(64), float32] */;
  %104 = nn.conv2d(%100, %resnet_model_conv2d_8_kernel, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_8/Conv2D */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %105 = multiply(%103, %resnet_model_batch_normalization_8_gamma) /* ty=Tensor[(64), float32] */;
  %106 = negative(%resnet_model_batch_normalization_8_moving_mean) /* ty=Tensor[(64), float32] */;
  %107 = multiply(%106, %105) /* ty=Tensor[(64), float32] */;
  %108 = multiply(%104, %105) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %109 = add(%107, %resnet_model_batch_normalization_8_beta) /* ty=Tensor[(64), float32] */;
  %110 = add(%108, %109) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %111 = nn.relu(%110) /* resnet_model/Relu_7 */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %112 = add(%resnet_model_batch_normalization_9_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %113 = sqrt(%112) /* ty=Tensor[(64), float32] */;
  %114 = divide(1f /* ty=float32 */, %113) /* ty=Tensor[(64), float32] */;
  %115 = nn.conv2d(%111, %resnet_model_conv2d_9_kernel, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_9/Conv2D */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %116 = multiply(%114, %resnet_model_batch_normalization_9_gamma) /* ty=Tensor[(64), float32] */;
  %117 = negative(%resnet_model_batch_normalization_9_moving_mean) /* ty=Tensor[(64), float32] */;
  %118 = multiply(%117, %116) /* ty=Tensor[(64), float32] */;
  %119 = multiply(%115, %116) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %120 = add(%118, %resnet_model_batch_normalization_9_beta) /* ty=Tensor[(64), float32] */;
  %121 = add(%119, %120) /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %122 = nn.relu(%121) /* resnet_model/Relu_8 */ /* ty=Tensor[(?, 56, 56, 64), float32] */;
  %123 = add(%resnet_model_batch_normalization_10_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %124 = sqrt(%123) /* ty=Tensor[(256), float32] */;
  %125 = divide(1f /* ty=float32 */, %124) /* ty=Tensor[(256), float32] */;
  %126 = nn.conv2d(%122, %resnet_model_conv2d_10_kernel, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_10/Conv2D */ /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %127 = multiply(%125, %resnet_model_batch_normalization_10_gamma) /* ty=Tensor[(256), float32] */;
  %128 = negative(%resnet_model_batch_normalization_10_moving_mean) /* ty=Tensor[(256), float32] */;
  %129 = multiply(%128, %127) /* ty=Tensor[(256), float32] */;
  %130 = multiply(%126, %127) /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %131 = add(%129, %resnet_model_batch_normalization_10_beta) /* ty=Tensor[(256), float32] */;
  %132 = add(%130, %131) /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %133 = add(%132, %100) /* resnet_model/add_2 */ /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %134 = nn.relu(%133) /* resnet_model/Relu_9 */ /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %135 = add(%resnet_model_batch_normalization_12_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %136 = sqrt(%135) /* ty=Tensor[(128), float32] */;
  %137 = divide(1f /* ty=float32 */, %136) /* ty=Tensor[(128), float32] */;
  %138 = nn.conv2d(%134, %resnet_model_conv2d_12_kernel, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_12/Conv2D */ /* ty=Tensor[(?, 56, 56, 128), float32] */;
  %139 = multiply(%137, %resnet_model_batch_normalization_12_gamma) /* ty=Tensor[(128), float32] */;
  %140 = negative(%resnet_model_batch_normalization_12_moving_mean) /* ty=Tensor[(128), float32] */;
  %141 = multiply(%140, %139) /* ty=Tensor[(128), float32] */;
  %142 = multiply(%138, %139) /* ty=Tensor[(?, 56, 56, 128), float32] */;
  %143 = add(%141, %resnet_model_batch_normalization_12_beta) /* ty=Tensor[(128), float32] */;
  %144 = add(%142, %143) /* ty=Tensor[(?, 56, 56, 128), float32] */;
  %145 = nn.relu(%144) /* resnet_model/Relu_10 */ /* ty=Tensor[(?, 56, 56, 128), float32] */;
  %146 = nn.pad(%145, 0 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* resnet_model/Pad_2 */ /* ty=Tensor[(?, 58, 58, 128), float32] */;
  %147 = add(%resnet_model_batch_normalization_13_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %148 = sqrt(%147) /* ty=Tensor[(128), float32] */;
  %149 = divide(1f /* ty=float32 */, %148) /* ty=Tensor[(128), float32] */;
  %150 = nn.conv2d(%146, %resnet_model_conv2d_13_kernel, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_13/Conv2D */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %151 = multiply(%149, %resnet_model_batch_normalization_13_gamma) /* ty=Tensor[(128), float32] */;
  %152 = negative(%resnet_model_batch_normalization_13_moving_mean) /* ty=Tensor[(128), float32] */;
  %153 = multiply(%152, %151) /* ty=Tensor[(128), float32] */;
  %154 = multiply(%150, %151) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %155 = add(%153, %resnet_model_batch_normalization_13_beta) /* ty=Tensor[(128), float32] */;
  %156 = add(%154, %155) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %157 = nn.relu(%156) /* resnet_model/Relu_11 */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %158 = add(%resnet_model_batch_normalization_14_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %159 = sqrt(%158) /* ty=Tensor[(512), float32] */;
  %160 = divide(1f /* ty=float32 */, %159) /* ty=Tensor[(512), float32] */;
  %161 = nn.conv2d(%157, %resnet_model_conv2d_14_kernel, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_14/Conv2D */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %162 = multiply(%160, %resnet_model_batch_normalization_14_gamma) /* ty=Tensor[(512), float32] */;
  %163 = negative(%resnet_model_batch_normalization_14_moving_mean) /* ty=Tensor[(512), float32] */;
  %164 = multiply(%163, %162) /* ty=Tensor[(512), float32] */;
  %165 = multiply(%161, %162) /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %166 = add(%164, %resnet_model_batch_normalization_14_beta) /* ty=Tensor[(512), float32] */;
  %167 = nn.pad(%134, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* resnet_model/Pad_1 */ /* ty=Tensor[(?, 56, 56, 256), float32] */;
  %168 = add(%resnet_model_batch_normalization_11_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %169 = sqrt(%168) /* ty=Tensor[(512), float32] */;
  %170 = divide(1f /* ty=float32 */, %169) /* ty=Tensor[(512), float32] */;
  %171 = nn.conv2d(%167, %resnet_model_conv2d_11_kernel, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_11/Conv2D */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %172 = multiply(%170, %resnet_model_batch_normalization_11_gamma) /* ty=Tensor[(512), float32] */;
  %173 = negative(%resnet_model_batch_normalization_11_moving_mean) /* ty=Tensor[(512), float32] */;
  %174 = multiply(%173, %172) /* ty=Tensor[(512), float32] */;
  %175 = multiply(%171, %172) /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %176 = add(%174, %resnet_model_batch_normalization_11_beta) /* ty=Tensor[(512), float32] */;
  %177 = add(%165, %166) /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %178 = add(%175, %176) /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %179 = add(%177, %178) /* resnet_model/add_3 */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %180 = nn.relu(%179) /* resnet_model/Relu_12 */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %181 = add(%resnet_model_batch_normalization_15_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %182 = sqrt(%181) /* ty=Tensor[(128), float32] */;
  %183 = divide(1f /* ty=float32 */, %182) /* ty=Tensor[(128), float32] */;
  %184 = nn.conv2d(%180, %resnet_model_conv2d_15_kernel, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_15/Conv2D */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %185 = multiply(%183, %resnet_model_batch_normalization_15_gamma) /* ty=Tensor[(128), float32] */;
  %186 = negative(%resnet_model_batch_normalization_15_moving_mean) /* ty=Tensor[(128), float32] */;
  %187 = multiply(%186, %185) /* ty=Tensor[(128), float32] */;
  %188 = multiply(%184, %185) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %189 = add(%187, %resnet_model_batch_normalization_15_beta) /* ty=Tensor[(128), float32] */;
  %190 = add(%188, %189) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %191 = nn.relu(%190) /* resnet_model/Relu_13 */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %192 = add(%resnet_model_batch_normalization_16_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %193 = sqrt(%192) /* ty=Tensor[(128), float32] */;
  %194 = divide(1f /* ty=float32 */, %193) /* ty=Tensor[(128), float32] */;
  %195 = nn.conv2d(%191, %resnet_model_conv2d_16_kernel, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_16/Conv2D */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %196 = multiply(%194, %resnet_model_batch_normalization_16_gamma) /* ty=Tensor[(128), float32] */;
  %197 = negative(%resnet_model_batch_normalization_16_moving_mean) /* ty=Tensor[(128), float32] */;
  %198 = multiply(%197, %196) /* ty=Tensor[(128), float32] */;
  %199 = multiply(%195, %196) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %200 = add(%198, %resnet_model_batch_normalization_16_beta) /* ty=Tensor[(128), float32] */;
  %201 = add(%199, %200) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %202 = nn.relu(%201) /* resnet_model/Relu_14 */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %203 = add(%resnet_model_batch_normalization_17_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %204 = sqrt(%203) /* ty=Tensor[(512), float32] */;
  %205 = divide(1f /* ty=float32 */, %204) /* ty=Tensor[(512), float32] */;
  %206 = nn.conv2d(%202, %resnet_model_conv2d_17_kernel, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_17/Conv2D */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %207 = multiply(%205, %resnet_model_batch_normalization_17_gamma) /* ty=Tensor[(512), float32] */;
  %208 = negative(%resnet_model_batch_normalization_17_moving_mean) /* ty=Tensor[(512), float32] */;
  %209 = multiply(%208, %207) /* ty=Tensor[(512), float32] */;
  %210 = multiply(%206, %207) /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %211 = add(%209, %resnet_model_batch_normalization_17_beta) /* ty=Tensor[(512), float32] */;
  %212 = add(%210, %211) /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %213 = add(%212, %180) /* resnet_model/add_4 */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %214 = nn.relu(%213) /* resnet_model/Relu_15 */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %215 = add(%resnet_model_batch_normalization_18_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %216 = sqrt(%215) /* ty=Tensor[(128), float32] */;
  %217 = divide(1f /* ty=float32 */, %216) /* ty=Tensor[(128), float32] */;
  %218 = nn.conv2d(%214, %resnet_model_conv2d_18_kernel, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_18/Conv2D */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %219 = multiply(%217, %resnet_model_batch_normalization_18_gamma) /* ty=Tensor[(128), float32] */;
  %220 = negative(%resnet_model_batch_normalization_18_moving_mean) /* ty=Tensor[(128), float32] */;
  %221 = multiply(%220, %219) /* ty=Tensor[(128), float32] */;
  %222 = multiply(%218, %219) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %223 = add(%221, %resnet_model_batch_normalization_18_beta) /* ty=Tensor[(128), float32] */;
  %224 = add(%222, %223) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %225 = nn.relu(%224) /* resnet_model/Relu_16 */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %226 = add(%resnet_model_batch_normalization_19_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %227 = sqrt(%226) /* ty=Tensor[(128), float32] */;
  %228 = divide(1f /* ty=float32 */, %227) /* ty=Tensor[(128), float32] */;
  %229 = nn.conv2d(%225, %resnet_model_conv2d_19_kernel, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_19/Conv2D */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %230 = multiply(%228, %resnet_model_batch_normalization_19_gamma) /* ty=Tensor[(128), float32] */;
  %231 = negative(%resnet_model_batch_normalization_19_moving_mean) /* ty=Tensor[(128), float32] */;
  %232 = multiply(%231, %230) /* ty=Tensor[(128), float32] */;
  %233 = multiply(%229, %230) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %234 = add(%232, %resnet_model_batch_normalization_19_beta) /* ty=Tensor[(128), float32] */;
  %235 = add(%233, %234) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %236 = nn.relu(%235) /* resnet_model/Relu_17 */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %237 = add(%resnet_model_batch_normalization_20_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %238 = sqrt(%237) /* ty=Tensor[(512), float32] */;
  %239 = divide(1f /* ty=float32 */, %238) /* ty=Tensor[(512), float32] */;
  %240 = nn.conv2d(%236, %resnet_model_conv2d_20_kernel, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_20/Conv2D */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %241 = multiply(%239, %resnet_model_batch_normalization_20_gamma) /* ty=Tensor[(512), float32] */;
  %242 = negative(%resnet_model_batch_normalization_20_moving_mean) /* ty=Tensor[(512), float32] */;
  %243 = multiply(%242, %241) /* ty=Tensor[(512), float32] */;
  %244 = multiply(%240, %241) /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %245 = add(%243, %resnet_model_batch_normalization_20_beta) /* ty=Tensor[(512), float32] */;
  %246 = add(%244, %245) /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %247 = add(%246, %214) /* resnet_model/add_5 */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %248 = nn.relu(%247) /* resnet_model/Relu_18 */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %249 = add(%resnet_model_batch_normalization_21_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %250 = sqrt(%249) /* ty=Tensor[(128), float32] */;
  %251 = divide(1f /* ty=float32 */, %250) /* ty=Tensor[(128), float32] */;
  %252 = nn.conv2d(%248, %resnet_model_conv2d_21_kernel, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_21/Conv2D */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %253 = multiply(%251, %resnet_model_batch_normalization_21_gamma) /* ty=Tensor[(128), float32] */;
  %254 = negative(%resnet_model_batch_normalization_21_moving_mean) /* ty=Tensor[(128), float32] */;
  %255 = multiply(%254, %253) /* ty=Tensor[(128), float32] */;
  %256 = multiply(%252, %253) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %257 = add(%255, %resnet_model_batch_normalization_21_beta) /* ty=Tensor[(128), float32] */;
  %258 = add(%256, %257) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %259 = nn.relu(%258) /* resnet_model/Relu_19 */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %260 = add(%resnet_model_batch_normalization_22_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %261 = sqrt(%260) /* ty=Tensor[(128), float32] */;
  %262 = divide(1f /* ty=float32 */, %261) /* ty=Tensor[(128), float32] */;
  %263 = nn.conv2d(%259, %resnet_model_conv2d_22_kernel, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_22/Conv2D */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %264 = multiply(%262, %resnet_model_batch_normalization_22_gamma) /* ty=Tensor[(128), float32] */;
  %265 = negative(%resnet_model_batch_normalization_22_moving_mean) /* ty=Tensor[(128), float32] */;
  %266 = multiply(%265, %264) /* ty=Tensor[(128), float32] */;
  %267 = multiply(%263, %264) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %268 = add(%266, %resnet_model_batch_normalization_22_beta) /* ty=Tensor[(128), float32] */;
  %269 = add(%267, %268) /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %270 = nn.relu(%269) /* resnet_model/Relu_20 */ /* ty=Tensor[(?, 28, 28, 128), float32] */;
  %271 = add(%resnet_model_batch_normalization_23_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %272 = sqrt(%271) /* ty=Tensor[(512), float32] */;
  %273 = divide(1f /* ty=float32 */, %272) /* ty=Tensor[(512), float32] */;
  %274 = nn.conv2d(%270, %resnet_model_conv2d_23_kernel, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_23/Conv2D */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %275 = multiply(%273, %resnet_model_batch_normalization_23_gamma) /* ty=Tensor[(512), float32] */;
  %276 = negative(%resnet_model_batch_normalization_23_moving_mean) /* ty=Tensor[(512), float32] */;
  %277 = multiply(%276, %275) /* ty=Tensor[(512), float32] */;
  %278 = multiply(%274, %275) /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %279 = add(%277, %resnet_model_batch_normalization_23_beta) /* ty=Tensor[(512), float32] */;
  %280 = add(%278, %279) /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %281 = add(%280, %248) /* resnet_model/add_6 */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %282 = nn.relu(%281) /* resnet_model/Relu_21 */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %283 = add(%resnet_model_batch_normalization_25_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %284 = sqrt(%283) /* ty=Tensor[(256), float32] */;
  %285 = divide(1f /* ty=float32 */, %284) /* ty=Tensor[(256), float32] */;
  %286 = nn.conv2d(%282, %resnet_model_conv2d_25_kernel, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_25/Conv2D */ /* ty=Tensor[(?, 28, 28, 256), float32] */;
  %287 = multiply(%285, %resnet_model_batch_normalization_25_gamma) /* ty=Tensor[(256), float32] */;
  %288 = negative(%resnet_model_batch_normalization_25_moving_mean) /* ty=Tensor[(256), float32] */;
  %289 = multiply(%288, %287) /* ty=Tensor[(256), float32] */;
  %290 = multiply(%286, %287) /* ty=Tensor[(?, 28, 28, 256), float32] */;
  %291 = add(%289, %resnet_model_batch_normalization_25_beta) /* ty=Tensor[(256), float32] */;
  %292 = add(%290, %291) /* ty=Tensor[(?, 28, 28, 256), float32] */;
  %293 = nn.relu(%292) /* resnet_model/Relu_22 */ /* ty=Tensor[(?, 28, 28, 256), float32] */;
  %294 = nn.pad(%293, 0 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* resnet_model/Pad_4 */ /* ty=Tensor[(?, 30, 30, 256), float32] */;
  %295 = add(%resnet_model_batch_normalization_26_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %296 = sqrt(%295) /* ty=Tensor[(256), float32] */;
  %297 = divide(1f /* ty=float32 */, %296) /* ty=Tensor[(256), float32] */;
  %298 = nn.conv2d(%294, %resnet_model_conv2d_26_kernel, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_26/Conv2D */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %299 = multiply(%297, %resnet_model_batch_normalization_26_gamma) /* ty=Tensor[(256), float32] */;
  %300 = negative(%resnet_model_batch_normalization_26_moving_mean) /* ty=Tensor[(256), float32] */;
  %301 = multiply(%300, %299) /* ty=Tensor[(256), float32] */;
  %302 = multiply(%298, %299) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %303 = add(%301, %resnet_model_batch_normalization_26_beta) /* ty=Tensor[(256), float32] */;
  %304 = add(%302, %303) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %305 = nn.relu(%304) /* resnet_model/Relu_23 */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %306 = add(%resnet_model_batch_normalization_27_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(1024), float32] */;
  %307 = sqrt(%306) /* ty=Tensor[(1024), float32] */;
  %308 = divide(1f /* ty=float32 */, %307) /* ty=Tensor[(1024), float32] */;
  %309 = nn.conv2d(%305, %resnet_model_conv2d_27_kernel, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_27/Conv2D */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %310 = multiply(%308, %resnet_model_batch_normalization_27_gamma) /* ty=Tensor[(1024), float32] */;
  %311 = negative(%resnet_model_batch_normalization_27_moving_mean) /* ty=Tensor[(1024), float32] */;
  %312 = multiply(%311, %310) /* ty=Tensor[(1024), float32] */;
  %313 = multiply(%309, %310) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %314 = add(%312, %resnet_model_batch_normalization_27_beta) /* ty=Tensor[(1024), float32] */;
  %315 = nn.pad(%282, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* resnet_model/Pad_3 */ /* ty=Tensor[(?, 28, 28, 512), float32] */;
  %316 = add(%resnet_model_batch_normalization_24_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(1024), float32] */;
  %317 = sqrt(%316) /* ty=Tensor[(1024), float32] */;
  %318 = divide(1f /* ty=float32 */, %317) /* ty=Tensor[(1024), float32] */;
  %319 = nn.conv2d(%315, %resnet_model_conv2d_24_kernel, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_24/Conv2D */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %320 = multiply(%318, %resnet_model_batch_normalization_24_gamma) /* ty=Tensor[(1024), float32] */;
  %321 = negative(%resnet_model_batch_normalization_24_moving_mean) /* ty=Tensor[(1024), float32] */;
  %322 = multiply(%321, %320) /* ty=Tensor[(1024), float32] */;
  %323 = multiply(%319, %320) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %324 = add(%322, %resnet_model_batch_normalization_24_beta) /* ty=Tensor[(1024), float32] */;
  %325 = add(%313, %314) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %326 = add(%323, %324) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %327 = add(%325, %326) /* resnet_model/add_7 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %328 = nn.relu(%327) /* resnet_model/Relu_24 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %329 = add(%resnet_model_batch_normalization_28_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %330 = sqrt(%329) /* ty=Tensor[(256), float32] */;
  %331 = divide(1f /* ty=float32 */, %330) /* ty=Tensor[(256), float32] */;
  %332 = nn.conv2d(%328, %resnet_model_conv2d_28_kernel, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_28/Conv2D */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %333 = multiply(%331, %resnet_model_batch_normalization_28_gamma) /* ty=Tensor[(256), float32] */;
  %334 = negative(%resnet_model_batch_normalization_28_moving_mean) /* ty=Tensor[(256), float32] */;
  %335 = multiply(%334, %333) /* ty=Tensor[(256), float32] */;
  %336 = multiply(%332, %333) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %337 = add(%335, %resnet_model_batch_normalization_28_beta) /* ty=Tensor[(256), float32] */;
  %338 = add(%336, %337) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %339 = nn.relu(%338) /* resnet_model/Relu_25 */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %340 = add(%resnet_model_batch_normalization_29_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %341 = sqrt(%340) /* ty=Tensor[(256), float32] */;
  %342 = divide(1f /* ty=float32 */, %341) /* ty=Tensor[(256), float32] */;
  %343 = nn.conv2d(%339, %resnet_model_conv2d_29_kernel, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_29/Conv2D */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %344 = multiply(%342, %resnet_model_batch_normalization_29_gamma) /* ty=Tensor[(256), float32] */;
  %345 = negative(%resnet_model_batch_normalization_29_moving_mean) /* ty=Tensor[(256), float32] */;
  %346 = multiply(%345, %344) /* ty=Tensor[(256), float32] */;
  %347 = multiply(%343, %344) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %348 = add(%346, %resnet_model_batch_normalization_29_beta) /* ty=Tensor[(256), float32] */;
  %349 = add(%347, %348) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %350 = nn.relu(%349) /* resnet_model/Relu_26 */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %351 = add(%resnet_model_batch_normalization_30_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(1024), float32] */;
  %352 = sqrt(%351) /* ty=Tensor[(1024), float32] */;
  %353 = divide(1f /* ty=float32 */, %352) /* ty=Tensor[(1024), float32] */;
  %354 = nn.conv2d(%350, %resnet_model_conv2d_30_kernel, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_30/Conv2D */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %355 = multiply(%353, %resnet_model_batch_normalization_30_gamma) /* ty=Tensor[(1024), float32] */;
  %356 = negative(%resnet_model_batch_normalization_30_moving_mean) /* ty=Tensor[(1024), float32] */;
  %357 = multiply(%356, %355) /* ty=Tensor[(1024), float32] */;
  %358 = multiply(%354, %355) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %359 = add(%357, %resnet_model_batch_normalization_30_beta) /* ty=Tensor[(1024), float32] */;
  %360 = add(%358, %359) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %361 = add(%360, %328) /* resnet_model/add_8 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %362 = nn.relu(%361) /* resnet_model/Relu_27 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %363 = add(%resnet_model_batch_normalization_31_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %364 = sqrt(%363) /* ty=Tensor[(256), float32] */;
  %365 = divide(1f /* ty=float32 */, %364) /* ty=Tensor[(256), float32] */;
  %366 = nn.conv2d(%362, %resnet_model_conv2d_31_kernel, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_31/Conv2D */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %367 = multiply(%365, %resnet_model_batch_normalization_31_gamma) /* ty=Tensor[(256), float32] */;
  %368 = negative(%resnet_model_batch_normalization_31_moving_mean) /* ty=Tensor[(256), float32] */;
  %369 = multiply(%368, %367) /* ty=Tensor[(256), float32] */;
  %370 = multiply(%366, %367) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %371 = add(%369, %resnet_model_batch_normalization_31_beta) /* ty=Tensor[(256), float32] */;
  %372 = add(%370, %371) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %373 = nn.relu(%372) /* resnet_model/Relu_28 */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %374 = add(%resnet_model_batch_normalization_32_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %375 = sqrt(%374) /* ty=Tensor[(256), float32] */;
  %376 = divide(1f /* ty=float32 */, %375) /* ty=Tensor[(256), float32] */;
  %377 = nn.conv2d(%373, %resnet_model_conv2d_32_kernel, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_32/Conv2D */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %378 = multiply(%376, %resnet_model_batch_normalization_32_gamma) /* ty=Tensor[(256), float32] */;
  %379 = negative(%resnet_model_batch_normalization_32_moving_mean) /* ty=Tensor[(256), float32] */;
  %380 = multiply(%379, %378) /* ty=Tensor[(256), float32] */;
  %381 = multiply(%377, %378) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %382 = add(%380, %resnet_model_batch_normalization_32_beta) /* ty=Tensor[(256), float32] */;
  %383 = add(%381, %382) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %384 = nn.relu(%383) /* resnet_model/Relu_29 */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %385 = add(%resnet_model_batch_normalization_33_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(1024), float32] */;
  %386 = sqrt(%385) /* ty=Tensor[(1024), float32] */;
  %387 = divide(1f /* ty=float32 */, %386) /* ty=Tensor[(1024), float32] */;
  %388 = nn.conv2d(%384, %resnet_model_conv2d_33_kernel, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_33/Conv2D */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %389 = multiply(%387, %resnet_model_batch_normalization_33_gamma) /* ty=Tensor[(1024), float32] */;
  %390 = negative(%resnet_model_batch_normalization_33_moving_mean) /* ty=Tensor[(1024), float32] */;
  %391 = multiply(%390, %389) /* ty=Tensor[(1024), float32] */;
  %392 = multiply(%388, %389) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %393 = add(%391, %resnet_model_batch_normalization_33_beta) /* ty=Tensor[(1024), float32] */;
  %394 = add(%392, %393) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %395 = add(%394, %362) /* resnet_model/add_9 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %396 = nn.relu(%395) /* resnet_model/Relu_30 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %397 = add(%resnet_model_batch_normalization_34_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %398 = sqrt(%397) /* ty=Tensor[(256), float32] */;
  %399 = divide(1f /* ty=float32 */, %398) /* ty=Tensor[(256), float32] */;
  %400 = nn.conv2d(%396, %resnet_model_conv2d_34_kernel, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_34/Conv2D */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %401 = multiply(%399, %resnet_model_batch_normalization_34_gamma) /* ty=Tensor[(256), float32] */;
  %402 = negative(%resnet_model_batch_normalization_34_moving_mean) /* ty=Tensor[(256), float32] */;
  %403 = multiply(%402, %401) /* ty=Tensor[(256), float32] */;
  %404 = multiply(%400, %401) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %405 = add(%403, %resnet_model_batch_normalization_34_beta) /* ty=Tensor[(256), float32] */;
  %406 = add(%404, %405) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %407 = nn.relu(%406) /* resnet_model/Relu_31 */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %408 = add(%resnet_model_batch_normalization_35_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %409 = sqrt(%408) /* ty=Tensor[(256), float32] */;
  %410 = divide(1f /* ty=float32 */, %409) /* ty=Tensor[(256), float32] */;
  %411 = nn.conv2d(%407, %resnet_model_conv2d_35_kernel, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_35/Conv2D */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %412 = multiply(%410, %resnet_model_batch_normalization_35_gamma) /* ty=Tensor[(256), float32] */;
  %413 = negative(%resnet_model_batch_normalization_35_moving_mean) /* ty=Tensor[(256), float32] */;
  %414 = multiply(%413, %412) /* ty=Tensor[(256), float32] */;
  %415 = multiply(%411, %412) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %416 = add(%414, %resnet_model_batch_normalization_35_beta) /* ty=Tensor[(256), float32] */;
  %417 = add(%415, %416) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %418 = nn.relu(%417) /* resnet_model/Relu_32 */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %419 = add(%resnet_model_batch_normalization_36_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(1024), float32] */;
  %420 = sqrt(%419) /* ty=Tensor[(1024), float32] */;
  %421 = divide(1f /* ty=float32 */, %420) /* ty=Tensor[(1024), float32] */;
  %422 = nn.conv2d(%418, %resnet_model_conv2d_36_kernel, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_36/Conv2D */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %423 = multiply(%421, %resnet_model_batch_normalization_36_gamma) /* ty=Tensor[(1024), float32] */;
  %424 = negative(%resnet_model_batch_normalization_36_moving_mean) /* ty=Tensor[(1024), float32] */;
  %425 = multiply(%424, %423) /* ty=Tensor[(1024), float32] */;
  %426 = multiply(%422, %423) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %427 = add(%425, %resnet_model_batch_normalization_36_beta) /* ty=Tensor[(1024), float32] */;
  %428 = add(%426, %427) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %429 = add(%428, %396) /* resnet_model/add_10 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %430 = nn.relu(%429) /* resnet_model/Relu_33 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %431 = add(%resnet_model_batch_normalization_37_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %432 = sqrt(%431) /* ty=Tensor[(256), float32] */;
  %433 = divide(1f /* ty=float32 */, %432) /* ty=Tensor[(256), float32] */;
  %434 = nn.conv2d(%430, %resnet_model_conv2d_37_kernel, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_37/Conv2D */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %435 = multiply(%433, %resnet_model_batch_normalization_37_gamma) /* ty=Tensor[(256), float32] */;
  %436 = negative(%resnet_model_batch_normalization_37_moving_mean) /* ty=Tensor[(256), float32] */;
  %437 = multiply(%436, %435) /* ty=Tensor[(256), float32] */;
  %438 = multiply(%434, %435) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %439 = add(%437, %resnet_model_batch_normalization_37_beta) /* ty=Tensor[(256), float32] */;
  %440 = add(%438, %439) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %441 = nn.relu(%440) /* resnet_model/Relu_34 */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %442 = add(%resnet_model_batch_normalization_38_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %443 = sqrt(%442) /* ty=Tensor[(256), float32] */;
  %444 = divide(1f /* ty=float32 */, %443) /* ty=Tensor[(256), float32] */;
  %445 = nn.conv2d(%441, %resnet_model_conv2d_38_kernel, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_38/Conv2D */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %446 = multiply(%444, %resnet_model_batch_normalization_38_gamma) /* ty=Tensor[(256), float32] */;
  %447 = negative(%resnet_model_batch_normalization_38_moving_mean) /* ty=Tensor[(256), float32] */;
  %448 = multiply(%447, %446) /* ty=Tensor[(256), float32] */;
  %449 = multiply(%445, %446) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %450 = add(%448, %resnet_model_batch_normalization_38_beta) /* ty=Tensor[(256), float32] */;
  %451 = add(%449, %450) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %452 = nn.relu(%451) /* resnet_model/Relu_35 */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %453 = add(%resnet_model_batch_normalization_39_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(1024), float32] */;
  %454 = sqrt(%453) /* ty=Tensor[(1024), float32] */;
  %455 = divide(1f /* ty=float32 */, %454) /* ty=Tensor[(1024), float32] */;
  %456 = nn.conv2d(%452, %resnet_model_conv2d_39_kernel, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_39/Conv2D */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %457 = multiply(%455, %resnet_model_batch_normalization_39_gamma) /* ty=Tensor[(1024), float32] */;
  %458 = negative(%resnet_model_batch_normalization_39_moving_mean) /* ty=Tensor[(1024), float32] */;
  %459 = multiply(%458, %457) /* ty=Tensor[(1024), float32] */;
  %460 = multiply(%456, %457) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %461 = add(%459, %resnet_model_batch_normalization_39_beta) /* ty=Tensor[(1024), float32] */;
  %462 = add(%460, %461) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %463 = add(%462, %430) /* resnet_model/add_11 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %464 = nn.relu(%463) /* resnet_model/Relu_36 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %465 = add(%resnet_model_batch_normalization_40_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %466 = sqrt(%465) /* ty=Tensor[(256), float32] */;
  %467 = divide(1f /* ty=float32 */, %466) /* ty=Tensor[(256), float32] */;
  %468 = nn.conv2d(%464, %resnet_model_conv2d_40_kernel, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_40/Conv2D */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %469 = multiply(%467, %resnet_model_batch_normalization_40_gamma) /* ty=Tensor[(256), float32] */;
  %470 = negative(%resnet_model_batch_normalization_40_moving_mean) /* ty=Tensor[(256), float32] */;
  %471 = multiply(%470, %469) /* ty=Tensor[(256), float32] */;
  %472 = multiply(%468, %469) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %473 = add(%471, %resnet_model_batch_normalization_40_beta) /* ty=Tensor[(256), float32] */;
  %474 = add(%472, %473) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %475 = nn.relu(%474) /* resnet_model/Relu_37 */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %476 = add(%resnet_model_batch_normalization_41_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %477 = sqrt(%476) /* ty=Tensor[(256), float32] */;
  %478 = divide(1f /* ty=float32 */, %477) /* ty=Tensor[(256), float32] */;
  %479 = nn.conv2d(%475, %resnet_model_conv2d_41_kernel, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_41/Conv2D */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %480 = multiply(%478, %resnet_model_batch_normalization_41_gamma) /* ty=Tensor[(256), float32] */;
  %481 = negative(%resnet_model_batch_normalization_41_moving_mean) /* ty=Tensor[(256), float32] */;
  %482 = multiply(%481, %480) /* ty=Tensor[(256), float32] */;
  %483 = multiply(%479, %480) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %484 = add(%482, %resnet_model_batch_normalization_41_beta) /* ty=Tensor[(256), float32] */;
  %485 = add(%483, %484) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %486 = nn.relu(%485) /* resnet_model/Relu_38 */ /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %487 = add(%resnet_model_batch_normalization_42_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(1024), float32] */;
  %488 = sqrt(%487) /* ty=Tensor[(1024), float32] */;
  %489 = divide(1f /* ty=float32 */, %488) /* ty=Tensor[(1024), float32] */;
  %490 = nn.conv2d(%486, %resnet_model_conv2d_42_kernel, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_42/Conv2D */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %491 = multiply(%489, %resnet_model_batch_normalization_42_gamma) /* ty=Tensor[(1024), float32] */;
  %492 = negative(%resnet_model_batch_normalization_42_moving_mean) /* ty=Tensor[(1024), float32] */;
  %493 = multiply(%492, %491) /* ty=Tensor[(1024), float32] */;
  %494 = multiply(%490, %491) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %495 = add(%493, %resnet_model_batch_normalization_42_beta) /* ty=Tensor[(1024), float32] */;
  %496 = add(%494, %495) /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %497 = add(%496, %464) /* resnet_model/add_12 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %498 = nn.relu(%497) /* resnet_model/Relu_39 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %499 = add(%resnet_model_batch_normalization_44_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %500 = sqrt(%499) /* ty=Tensor[(512), float32] */;
  %501 = divide(1f /* ty=float32 */, %500) /* ty=Tensor[(512), float32] */;
  %502 = nn.conv2d(%498, %resnet_model_conv2d_44_kernel, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_44/Conv2D */ /* ty=Tensor[(?, 14, 14, 512), float32] */;
  %503 = multiply(%501, %resnet_model_batch_normalization_44_gamma) /* ty=Tensor[(512), float32] */;
  %504 = negative(%resnet_model_batch_normalization_44_moving_mean) /* ty=Tensor[(512), float32] */;
  %505 = multiply(%504, %503) /* ty=Tensor[(512), float32] */;
  %506 = multiply(%502, %503) /* ty=Tensor[(?, 14, 14, 512), float32] */;
  %507 = add(%505, %resnet_model_batch_normalization_44_beta) /* ty=Tensor[(512), float32] */;
  %508 = add(%506, %507) /* ty=Tensor[(?, 14, 14, 512), float32] */;
  %509 = nn.relu(%508) /* resnet_model/Relu_40 */ /* ty=Tensor[(?, 14, 14, 512), float32] */;
  %510 = nn.pad(%509, 0 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* resnet_model/Pad_6 */ /* ty=Tensor[(?, 16, 16, 512), float32] */;
  %511 = add(%resnet_model_batch_normalization_45_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %512 = sqrt(%511) /* ty=Tensor[(512), float32] */;
  %513 = divide(1f /* ty=float32 */, %512) /* ty=Tensor[(512), float32] */;
  %514 = nn.conv2d(%510, %resnet_model_conv2d_45_kernel, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_45/Conv2D */ /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %515 = multiply(%513, %resnet_model_batch_normalization_45_gamma) /* ty=Tensor[(512), float32] */;
  %516 = negative(%resnet_model_batch_normalization_45_moving_mean) /* ty=Tensor[(512), float32] */;
  %517 = multiply(%516, %515) /* ty=Tensor[(512), float32] */;
  %518 = multiply(%514, %515) /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %519 = add(%517, %resnet_model_batch_normalization_45_beta) /* ty=Tensor[(512), float32] */;
  %520 = add(%518, %519) /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %521 = nn.relu(%520) /* resnet_model/Relu_41 */ /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %522 = add(%resnet_model_batch_normalization_46_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(2048), float32] */;
  %523 = sqrt(%522) /* ty=Tensor[(2048), float32] */;
  %524 = divide(1f /* ty=float32 */, %523) /* ty=Tensor[(2048), float32] */;
  %525 = nn.conv2d(%521, %resnet_model_conv2d_46_kernel, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_46/Conv2D */ /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %526 = multiply(%524, %resnet_model_batch_normalization_46_gamma) /* ty=Tensor[(2048), float32] */;
  %527 = negative(%resnet_model_batch_normalization_46_moving_mean) /* ty=Tensor[(2048), float32] */;
  %528 = multiply(%527, %526) /* ty=Tensor[(2048), float32] */;
  %529 = multiply(%525, %526) /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %530 = add(%528, %resnet_model_batch_normalization_46_beta) /* ty=Tensor[(2048), float32] */;
  %531 = nn.pad(%498, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* resnet_model/Pad_5 */ /* ty=Tensor[(?, 14, 14, 1024), float32] */;
  %532 = add(%resnet_model_batch_normalization_43_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(2048), float32] */;
  %533 = sqrt(%532) /* ty=Tensor[(2048), float32] */;
  %534 = divide(1f /* ty=float32 */, %533) /* ty=Tensor[(2048), float32] */;
  %535 = nn.conv2d(%531, %resnet_model_conv2d_43_kernel, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_43/Conv2D */ /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %536 = multiply(%534, %resnet_model_batch_normalization_43_gamma) /* ty=Tensor[(2048), float32] */;
  %537 = negative(%resnet_model_batch_normalization_43_moving_mean) /* ty=Tensor[(2048), float32] */;
  %538 = multiply(%537, %536) /* ty=Tensor[(2048), float32] */;
  %539 = multiply(%535, %536) /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %540 = add(%538, %resnet_model_batch_normalization_43_beta) /* ty=Tensor[(2048), float32] */;
  %541 = add(%529, %530) /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %542 = add(%539, %540) /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %543 = add(%541, %542) /* resnet_model/add_13 */ /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %544 = nn.relu(%543) /* resnet_model/Relu_42 */ /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %545 = add(%resnet_model_batch_normalization_47_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %546 = sqrt(%545) /* ty=Tensor[(512), float32] */;
  %547 = divide(1f /* ty=float32 */, %546) /* ty=Tensor[(512), float32] */;
  %548 = nn.conv2d(%544, %resnet_model_conv2d_47_kernel, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_47/Conv2D */ /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %549 = multiply(%547, %resnet_model_batch_normalization_47_gamma) /* ty=Tensor[(512), float32] */;
  %550 = negative(%resnet_model_batch_normalization_47_moving_mean) /* ty=Tensor[(512), float32] */;
  %551 = multiply(%550, %549) /* ty=Tensor[(512), float32] */;
  %552 = multiply(%548, %549) /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %553 = add(%551, %resnet_model_batch_normalization_47_beta) /* ty=Tensor[(512), float32] */;
  %554 = add(%552, %553) /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %555 = nn.relu(%554) /* resnet_model/Relu_43 */ /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %556 = add(%resnet_model_batch_normalization_48_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %557 = sqrt(%556) /* ty=Tensor[(512), float32] */;
  %558 = divide(1f /* ty=float32 */, %557) /* ty=Tensor[(512), float32] */;
  %559 = nn.conv2d(%555, %resnet_model_conv2d_48_kernel, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_48/Conv2D */ /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %560 = multiply(%558, %resnet_model_batch_normalization_48_gamma) /* ty=Tensor[(512), float32] */;
  %561 = negative(%resnet_model_batch_normalization_48_moving_mean) /* ty=Tensor[(512), float32] */;
  %562 = multiply(%561, %560) /* ty=Tensor[(512), float32] */;
  %563 = multiply(%559, %560) /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %564 = add(%562, %resnet_model_batch_normalization_48_beta) /* ty=Tensor[(512), float32] */;
  %565 = add(%563, %564) /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %566 = nn.relu(%565) /* resnet_model/Relu_44 */ /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %567 = add(%resnet_model_batch_normalization_49_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(2048), float32] */;
  %568 = sqrt(%567) /* ty=Tensor[(2048), float32] */;
  %569 = divide(1f /* ty=float32 */, %568) /* ty=Tensor[(2048), float32] */;
  %570 = nn.conv2d(%566, %resnet_model_conv2d_49_kernel, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_49/Conv2D */ /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %571 = multiply(%569, %resnet_model_batch_normalization_49_gamma) /* ty=Tensor[(2048), float32] */;
  %572 = negative(%resnet_model_batch_normalization_49_moving_mean) /* ty=Tensor[(2048), float32] */;
  %573 = multiply(%572, %571) /* ty=Tensor[(2048), float32] */;
  %574 = multiply(%570, %571) /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %575 = add(%573, %resnet_model_batch_normalization_49_beta) /* ty=Tensor[(2048), float32] */;
  %576 = add(%574, %575) /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %577 = add(%576, %544) /* resnet_model/add_14 */ /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %578 = nn.relu(%577) /* resnet_model/Relu_45 */ /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %579 = add(%resnet_model_batch_normalization_50_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %580 = sqrt(%579) /* ty=Tensor[(512), float32] */;
  %581 = divide(1f /* ty=float32 */, %580) /* ty=Tensor[(512), float32] */;
  %582 = nn.conv2d(%578, %resnet_model_conv2d_50_kernel, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_50/Conv2D */ /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %583 = multiply(%581, %resnet_model_batch_normalization_50_gamma) /* ty=Tensor[(512), float32] */;
  %584 = negative(%resnet_model_batch_normalization_50_moving_mean) /* ty=Tensor[(512), float32] */;
  %585 = multiply(%584, %583) /* ty=Tensor[(512), float32] */;
  %586 = multiply(%582, %583) /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %587 = add(%585, %resnet_model_batch_normalization_50_beta) /* ty=Tensor[(512), float32] */;
  %588 = add(%586, %587) /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %589 = nn.relu(%588) /* resnet_model/Relu_46 */ /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %590 = add(%resnet_model_batch_normalization_51_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %591 = sqrt(%590) /* ty=Tensor[(512), float32] */;
  %592 = divide(1f /* ty=float32 */, %591) /* ty=Tensor[(512), float32] */;
  %593 = nn.conv2d(%589, %resnet_model_conv2d_51_kernel, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_51/Conv2D */ /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %594 = multiply(%592, %resnet_model_batch_normalization_51_gamma) /* ty=Tensor[(512), float32] */;
  %595 = negative(%resnet_model_batch_normalization_51_moving_mean) /* ty=Tensor[(512), float32] */;
  %596 = multiply(%595, %594) /* ty=Tensor[(512), float32] */;
  %597 = multiply(%593, %594) /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %598 = add(%596, %resnet_model_batch_normalization_51_beta) /* ty=Tensor[(512), float32] */;
  %599 = add(%597, %598) /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %600 = nn.relu(%599) /* resnet_model/Relu_47 */ /* ty=Tensor[(?, 7, 7, 512), float32] */;
  %601 = add(%resnet_model_batch_normalization_52_moving_variance, 1.001e-05f /* ty=float32 */) /* ty=Tensor[(2048), float32] */;
  %602 = sqrt(%601) /* ty=Tensor[(2048), float32] */;
  %603 = divide(1f /* ty=float32 */, %602) /* ty=Tensor[(2048), float32] */;
  %604 = nn.conv2d(%600, %resnet_model_conv2d_52_kernel, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* resnet_model/conv2d_52/Conv2D */ /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %605 = multiply(%603, %resnet_model_batch_normalization_52_gamma) /* ty=Tensor[(2048), float32] */;
  %606 = negative(%resnet_model_batch_normalization_52_moving_mean) /* ty=Tensor[(2048), float32] */;
  %607 = multiply(%606, %605) /* ty=Tensor[(2048), float32] */;
  %608 = multiply(%604, %605) /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %609 = add(%607, %resnet_model_batch_normalization_52_beta) /* ty=Tensor[(2048), float32] */;
  %610 = add(%608, %609) /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %611 = add(%610, %578) /* resnet_model/add_15 */ /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %612 = nn.relu(%611) /* resnet_model/Relu_48 */ /* ty=Tensor[(?, 7, 7, 2048), float32] */;
  %613 = mean(%612, axis=[1, 2], keepdims=True) /* resnet_model/Mean */ /* ty=Tensor[(?, 1, 1, 2048), float32] */;
  %614 = squeeze(%613, axis=[1, 2]) /* resnet_model/Squeeze */ /* ty=Tensor[(?, 2048), float32] */;
  %615 = transpose(%resnet_model_dense_kernel, axes=[1, 0]) /* ty=Tensor[(1001, 2048), float32] */;
  %616 = nn.dense(%614, %615, units=1001) /* resnet_model/dense/MatMul */ /* ty=Tensor[(?, 1001), float32] */;
  %617 = add(%616, %resnet_model_dense_bias) /* resnet_model/dense/BiasAdd */ /* ty=Tensor[(?, 1001), float32] */;
  nn.softmax(%617) /* softmax_tensor */ /* ty=Tensor[(?, 1001), float32] */
}
