#[version = "0.0.5"]
def @main(%data: Tensor[(1, 3, 32, 32), int16], %bn_data_gamma: Tensor[(3), int16], %bn_data_beta: Tensor[(3), int16], %bn_data_moving_mean: Tensor[(3), int16], %bn_data_moving_var: Tensor[(3), int16], %conv0_weight: Tensor[(64, 3, 3, 3), int16], %stage1_unit1_bn1_gamma: Tensor[(64), int16], %stage1_unit1_bn1_beta: Tensor[(64), int16], %stage1_unit1_bn1_moving_mean: Tensor[(64), int16], %stage1_unit1_bn1_moving_var: Tensor[(64), int16], %stage1_unit1_conv1_weight: Tensor[(64, 64, 3, 3), int16], %stage1_unit1_bn2_gamma: Tensor[(64), int16], %stage1_unit1_bn2_beta: Tensor[(64), int16], %stage1_unit1_bn2_moving_mean: Tensor[(64), int16], %stage1_unit1_bn2_moving_var: Tensor[(64), int16], %stage1_unit1_conv2_weight: Tensor[(64, 64, 3, 3), int16], %stage1_unit1_sc_weight: Tensor[(64, 64, 1, 1), int16], %stage1_unit2_bn1_gamma: Tensor[(64), int16], %stage1_unit2_bn1_beta: Tensor[(64), int16], %stage1_unit2_bn1_moving_mean: Tensor[(64), int16], %stage1_unit2_bn1_moving_var: Tensor[(64), int16], %stage1_unit2_conv1_weight: Tensor[(64, 64, 3, 3), int16], %stage1_unit2_bn2_gamma: Tensor[(64), int16], %stage1_unit2_bn2_beta: Tensor[(64), int16], %stage1_unit2_bn2_moving_mean: Tensor[(64), int16], %stage1_unit2_bn2_moving_var: Tensor[(64), int16], %stage1_unit2_conv2_weight: Tensor[(64, 64, 3, 3), int16], %stage2_unit1_bn1_gamma: Tensor[(64), int16], %stage2_unit1_bn1_beta: Tensor[(64), int16], %stage2_unit1_bn1_moving_mean: Tensor[(64), int16], %stage2_unit1_bn1_moving_var: Tensor[(64), int16], %stage2_unit1_conv1_weight: Tensor[(128, 64, 3, 3), int16], %stage2_unit1_bn2_gamma: Tensor[(128), int16], %stage2_unit1_bn2_beta: Tensor[(128), int16], %stage2_unit1_bn2_moving_mean: Tensor[(128), int16], %stage2_unit1_bn2_moving_var: Tensor[(128), int16], %stage2_unit1_conv2_weight: Tensor[(128, 128, 3, 3), int16], %stage2_unit1_sc_weight: Tensor[(128, 64, 1, 1), int16], %stage2_unit2_bn1_gamma: Tensor[(128), int16], %stage2_unit2_bn1_beta: Tensor[(128), int16], %stage2_unit2_bn1_moving_mean: Tensor[(128), int16], %stage2_unit2_bn1_moving_var: Tensor[(128), int16], %stage2_unit2_conv1_weight: Tensor[(128, 128, 3, 3), int16], %stage2_unit2_bn2_gamma: Tensor[(128), int16], %stage2_unit2_bn2_beta: Tensor[(128), int16], %stage2_unit2_bn2_moving_mean: Tensor[(128), int16], %stage2_unit2_bn2_moving_var: Tensor[(128), int16], %stage2_unit2_conv2_weight: Tensor[(128, 128, 3, 3), int16], %stage3_unit1_bn1_gamma: Tensor[(128), int16], %stage3_unit1_bn1_beta: Tensor[(128), int16], %stage3_unit1_bn1_moving_mean: Tensor[(128), int16], %stage3_unit1_bn1_moving_var: Tensor[(128), int16], %stage3_unit1_conv1_weight: Tensor[(256, 128, 3, 3), int16], %stage3_unit1_bn2_gamma: Tensor[(256), int16], %stage3_unit1_bn2_beta: Tensor[(256), int16], %stage3_unit1_bn2_moving_mean: Tensor[(256), int16], %stage3_unit1_bn2_moving_var: Tensor[(256), int16], %stage3_unit1_conv2_weight: Tensor[(256, 256, 3, 3), int16], %stage3_unit1_sc_weight: Tensor[(256, 128, 1, 1), int16], %stage3_unit2_bn1_gamma: Tensor[(256), int16], %stage3_unit2_bn1_beta: Tensor[(256), int16], %stage3_unit2_bn1_moving_mean: Tensor[(256), int16], %stage3_unit2_bn1_moving_var: Tensor[(256), int16], %stage3_unit2_conv1_weight: Tensor[(256, 256, 3, 3), int16], %stage3_unit2_bn2_gamma: Tensor[(256), int16], %stage3_unit2_bn2_beta: Tensor[(256), int16], %stage3_unit2_bn2_moving_mean: Tensor[(256), int16], %stage3_unit2_bn2_moving_var: Tensor[(256), int16], %stage3_unit2_conv2_weight: Tensor[(256, 256, 3, 3), int16], %stage4_unit1_bn1_gamma: Tensor[(256), int16], %stage4_unit1_bn1_beta: Tensor[(256), int16], %stage4_unit1_bn1_moving_mean: Tensor[(256), int16], %stage4_unit1_bn1_moving_var: Tensor[(256), int16], %stage4_unit1_conv1_weight: Tensor[(512, 256, 3, 3), int16], %stage4_unit1_bn2_gamma: Tensor[(512), int16], %stage4_unit1_bn2_beta: Tensor[(512), int16], %stage4_unit1_bn2_moving_mean: Tensor[(512), int16], %stage4_unit1_bn2_moving_var: Tensor[(512), int16], %stage4_unit1_conv2_weight: Tensor[(512, 512, 3, 3), int16], %stage4_unit1_sc_weight: Tensor[(512, 256, 1, 1), int16], %stage4_unit2_bn1_gamma: Tensor[(512), int16], %stage4_unit2_bn1_beta: Tensor[(512), int16], %stage4_unit2_bn1_moving_mean: Tensor[(512), int16], %stage4_unit2_bn1_moving_var: Tensor[(512), int16], %stage4_unit2_conv1_weight: Tensor[(512, 512, 3, 3), int16], %stage4_unit2_bn2_gamma: Tensor[(512), int16], %stage4_unit2_bn2_beta: Tensor[(512), int16], %stage4_unit2_bn2_moving_mean: Tensor[(512), int16], %stage4_unit2_bn2_moving_var: Tensor[(512), int16], %stage4_unit2_conv2_weight: Tensor[(512, 512, 3, 3), int16], %bn1_gamma: Tensor[(512), int16], %bn1_beta: Tensor[(512), int16], %bn1_moving_mean: Tensor[(512), int16], %bn1_moving_var: Tensor[(512), int16], %fc1_weight: Tensor[(10, 512), int16], %fc1_bias: Tensor[(10), int16]) -> Tensor[(1, 10), int16] {
  %0 = nn.batch_norm(%data, %bn_data_gamma, %bn_data_beta, %bn_data_moving_mean, %bn_data_moving_var, epsilon=2e-05f, scale=False) /* ty=(Tensor[(1, 3, 32, 32), int16], Tensor[(3), int16], Tensor[(3), int16]) */;
  %1 = %0.0;
  %2 = nn.conv2d(%1, %conv0_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %3 = nn.batch_norm(%2, %stage1_unit1_bn1_gamma, %stage1_unit1_bn1_beta, %stage1_unit1_bn1_moving_mean, %stage1_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16]) */;
  %4 = %3.0;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %6 = nn.conv2d(%5, %stage1_unit1_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %7 = nn.batch_norm(%6, %stage1_unit1_bn2_gamma, %stage1_unit1_bn2_beta, %stage1_unit1_bn2_moving_mean, %stage1_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16]) */;
  %8 = %7.0;
  %9 = nn.relu(%8) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %10 = nn.conv2d(%9, %stage1_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %11 = nn.conv2d(%5, %stage1_unit1_sc_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %12 = add(%10, %11) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %13 = nn.batch_norm(%12, %stage1_unit2_bn1_gamma, %stage1_unit2_bn1_beta, %stage1_unit2_bn1_moving_mean, %stage1_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16]) */;
  %14 = %13.0;
  %15 = nn.relu(%14) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %16 = nn.conv2d(%15, %stage1_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %17 = nn.batch_norm(%16, %stage1_unit2_bn2_gamma, %stage1_unit2_bn2_beta, %stage1_unit2_bn2_moving_mean, %stage1_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16]) */;
  %18 = %17.0;
  %19 = nn.relu(%18) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %20 = nn.conv2d(%19, %stage1_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %21 = add(%20, %12) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %22 = nn.batch_norm(%21, %stage2_unit1_bn1_gamma, %stage2_unit1_bn1_beta, %stage2_unit1_bn1_moving_mean, %stage2_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16]) */;
  %23 = %22.0;
  %24 = nn.relu(%23) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %25 = nn.conv2d(%24, %stage2_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %26 = nn.batch_norm(%25, %stage2_unit1_bn2_gamma, %stage2_unit1_bn2_beta, %stage2_unit1_bn2_moving_mean, %stage2_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16]) */;
  %27 = %26.0;
  %28 = nn.relu(%27) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %29 = nn.conv2d(%28, %stage2_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %30 = nn.conv2d(%24, %stage2_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %31 = add(%29, %30) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %32 = nn.batch_norm(%31, %stage2_unit2_bn1_gamma, %stage2_unit2_bn1_beta, %stage2_unit2_bn1_moving_mean, %stage2_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16]) */;
  %33 = %32.0;
  %34 = nn.relu(%33) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %35 = nn.conv2d(%34, %stage2_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %36 = nn.batch_norm(%35, %stage2_unit2_bn2_gamma, %stage2_unit2_bn2_beta, %stage2_unit2_bn2_moving_mean, %stage2_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16]) */;
  %37 = %36.0;
  %38 = nn.relu(%37) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %39 = nn.conv2d(%38, %stage2_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %40 = add(%39, %31) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %41 = nn.batch_norm(%40, %stage3_unit1_bn1_gamma, %stage3_unit1_bn1_beta, %stage3_unit1_bn1_moving_mean, %stage3_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16]) */;
  %42 = %41.0;
  %43 = nn.relu(%42) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %44 = nn.conv2d(%43, %stage3_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %45 = nn.batch_norm(%44, %stage3_unit1_bn2_gamma, %stage3_unit1_bn2_beta, %stage3_unit1_bn2_moving_mean, %stage3_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16]) */;
  %46 = %45.0;
  %47 = nn.relu(%46) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %48 = nn.conv2d(%47, %stage3_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %49 = nn.conv2d(%43, %stage3_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %50 = add(%48, %49) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %51 = nn.batch_norm(%50, %stage3_unit2_bn1_gamma, %stage3_unit2_bn1_beta, %stage3_unit2_bn1_moving_mean, %stage3_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16]) */;
  %52 = %51.0;
  %53 = nn.relu(%52) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %54 = nn.conv2d(%53, %stage3_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %55 = nn.batch_norm(%54, %stage3_unit2_bn2_gamma, %stage3_unit2_bn2_beta, %stage3_unit2_bn2_moving_mean, %stage3_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16]) */;
  %56 = %55.0;
  %57 = nn.relu(%56) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %58 = nn.conv2d(%57, %stage3_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %59 = add(%58, %50) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %60 = nn.batch_norm(%59, %stage4_unit1_bn1_gamma, %stage4_unit1_bn1_beta, %stage4_unit1_bn1_moving_mean, %stage4_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16]) */;
  %61 = %60.0;
  %62 = nn.relu(%61) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %63 = nn.conv2d(%62, %stage4_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %64 = nn.batch_norm(%63, %stage4_unit1_bn2_gamma, %stage4_unit1_bn2_beta, %stage4_unit1_bn2_moving_mean, %stage4_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16]) */;
  %65 = %64.0;
  %66 = nn.relu(%65) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %67 = nn.conv2d(%66, %stage4_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %68 = nn.conv2d(%62, %stage4_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %69 = add(%67, %68) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %70 = nn.batch_norm(%69, %stage4_unit2_bn1_gamma, %stage4_unit2_bn1_beta, %stage4_unit2_bn1_moving_mean, %stage4_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16]) */;
  %71 = %70.0;
  %72 = nn.relu(%71) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %73 = nn.conv2d(%72, %stage4_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %74 = nn.batch_norm(%73, %stage4_unit2_bn2_gamma, %stage4_unit2_bn2_beta, %stage4_unit2_bn2_moving_mean, %stage4_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16]) */;
  %75 = %74.0;
  %76 = nn.relu(%75) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %77 = nn.conv2d(%76, %stage4_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %78 = add(%77, %69) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %79 = nn.batch_norm(%78, %bn1_gamma, %bn1_beta, %bn1_moving_mean, %bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16]) */;
  %80 = %79.0;
  %81 = nn.relu(%80) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %82 = nn.global_avg_pool2d(%81) /* ty=Tensor[(1, 512, 1, 1), int16] */;
  %83 = nn.batch_flatten(%82) /* ty=Tensor[(1, 512), int16] */;
  %84 = nn.dense(%83, %fc1_weight, units=10) /* ty=Tensor[(1, 10), int16] */;
  %85 = nn.bias_add(%84, %fc1_bias, axis=-1) /* ty=Tensor[(1, 10), int16] */;
  nn.softmax(%85) /* ty=Tensor[(1, 10), int16] */
}