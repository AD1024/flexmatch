#[version = "0.0.5"]
def @main(%data: Tensor[(1, 3, 224, 224), float32], %bn_data_gamma: Tensor[(3), float32], %bn_data_beta: Tensor[(3), float32], %bn_data_moving_mean: Tensor[(3), float32], %bn_data_moving_var: Tensor[(3), float32], %conv0_weight: Tensor[(64, 3, 7, 7), float32], %bn0_gamma: Tensor[(64), float32], %bn0_beta: Tensor[(64), float32], %bn0_moving_mean: Tensor[(64), float32], %bn0_moving_var: Tensor[(64), float32], %stage1_unit1_bn1_gamma: Tensor[(64), float32], %stage1_unit1_bn1_beta: Tensor[(64), float32], %stage1_unit1_bn1_moving_mean: Tensor[(64), float32], %stage1_unit1_bn1_moving_var: Tensor[(64), float32], %stage1_unit1_conv1_weight: Tensor[(64, 64, 3, 3), float32], %stage1_unit1_bn2_gamma: Tensor[(64), float32], %stage1_unit1_bn2_beta: Tensor[(64), float32], %stage1_unit1_bn2_moving_mean: Tensor[(64), float32], %stage1_unit1_bn2_moving_var: Tensor[(64), float32], %stage1_unit1_conv2_weight: Tensor[(64, 64, 3, 3), float32], %stage1_unit1_sc_weight: Tensor[(64, 64, 1, 1), float32], %stage1_unit2_bn1_gamma: Tensor[(64), float32], %stage1_unit2_bn1_beta: Tensor[(64), float32], %stage1_unit2_bn1_moving_mean: Tensor[(64), float32], %stage1_unit2_bn1_moving_var: Tensor[(64), float32], %stage1_unit2_conv1_weight: Tensor[(64, 64, 3, 3), float32], %stage1_unit2_bn2_gamma: Tensor[(64), float32], %stage1_unit2_bn2_beta: Tensor[(64), float32], %stage1_unit2_bn2_moving_mean: Tensor[(64), float32], %stage1_unit2_bn2_moving_var: Tensor[(64), float32], %stage1_unit2_conv2_weight: Tensor[(64, 64, 3, 3), float32], %stage2_unit1_bn1_gamma: Tensor[(64), float32], %stage2_unit1_bn1_beta: Tensor[(64), float32], %stage2_unit1_bn1_moving_mean: Tensor[(64), float32], %stage2_unit1_bn1_moving_var: Tensor[(64), float32], %stage2_unit1_conv1_weight: Tensor[(128, 64, 3, 3), float32], %stage2_unit1_bn2_gamma: Tensor[(128), float32], %stage2_unit1_bn2_beta: Tensor[(128), float32], %stage2_unit1_bn2_moving_mean: Tensor[(128), float32], %stage2_unit1_bn2_moving_var: Tensor[(128), float32], %stage2_unit1_conv2_weight: Tensor[(128, 128, 3, 3), float32], %stage2_unit1_sc_weight: Tensor[(128, 64, 1, 1), float32], %stage2_unit2_bn1_gamma: Tensor[(128), float32], %stage2_unit2_bn1_beta: Tensor[(128), float32], %stage2_unit2_bn1_moving_mean: Tensor[(128), float32], %stage2_unit2_bn1_moving_var: Tensor[(128), float32], %stage2_unit2_conv1_weight: Tensor[(128, 128, 3, 3), float32], %stage2_unit2_bn2_gamma: Tensor[(128), float32], %stage2_unit2_bn2_beta: Tensor[(128), float32], %stage2_unit2_bn2_moving_mean: Tensor[(128), float32], %stage2_unit2_bn2_moving_var: Tensor[(128), float32], %stage2_unit2_conv2_weight: Tensor[(128, 128, 3, 3), float32], %stage3_unit1_bn1_gamma: Tensor[(128), float32], %stage3_unit1_bn1_beta: Tensor[(128), float32], %stage3_unit1_bn1_moving_mean: Tensor[(128), float32], %stage3_unit1_bn1_moving_var: Tensor[(128), float32], %stage3_unit1_conv1_weight: Tensor[(256, 128, 3, 3), float32], %stage3_unit1_bn2_gamma: Tensor[(256), float32], %stage3_unit1_bn2_beta: Tensor[(256), float32], %stage3_unit1_bn2_moving_mean: Tensor[(256), float32], %stage3_unit1_bn2_moving_var: Tensor[(256), float32], %stage3_unit1_conv2_weight: Tensor[(256, 256, 3, 3), float32], %stage3_unit1_sc_weight: Tensor[(256, 128, 1, 1), float32], %stage3_unit2_bn1_gamma: Tensor[(256), float32], %stage3_unit2_bn1_beta: Tensor[(256), float32], %stage3_unit2_bn1_moving_mean: Tensor[(256), float32], %stage3_unit2_bn1_moving_var: Tensor[(256), float32], %stage3_unit2_conv1_weight: Tensor[(256, 256, 3, 3), float32], %stage3_unit2_bn2_gamma: Tensor[(256), float32], %stage3_unit2_bn2_beta: Tensor[(256), float32], %stage3_unit2_bn2_moving_mean: Tensor[(256), float32], %stage3_unit2_bn2_moving_var: Tensor[(256), float32], %stage3_unit2_conv2_weight: Tensor[(256, 256, 3, 3), float32], %stage4_unit1_bn1_gamma: Tensor[(256), float32], %stage4_unit1_bn1_beta: Tensor[(256), float32], %stage4_unit1_bn1_moving_mean: Tensor[(256), float32], %stage4_unit1_bn1_moving_var: Tensor[(256), float32], %stage4_unit1_conv1_weight: Tensor[(512, 256, 3, 3), float32], %stage4_unit1_bn2_gamma: Tensor[(512), float32], %stage4_unit1_bn2_beta: Tensor[(512), float32], %stage4_unit1_bn2_moving_mean: Tensor[(512), float32], %stage4_unit1_bn2_moving_var: Tensor[(512), float32], %stage4_unit1_conv2_weight: Tensor[(512, 512, 3, 3), float32], %stage4_unit1_sc_weight: Tensor[(512, 256, 1, 1), float32], %stage4_unit2_bn1_gamma: Tensor[(512), float32], %stage4_unit2_bn1_beta: Tensor[(512), float32], %stage4_unit2_bn1_moving_mean: Tensor[(512), float32], %stage4_unit2_bn1_moving_var: Tensor[(512), float32], %stage4_unit2_conv1_weight: Tensor[(512, 512, 3, 3), float32], %stage4_unit2_bn2_gamma: Tensor[(512), float32], %stage4_unit2_bn2_beta: Tensor[(512), float32], %stage4_unit2_bn2_moving_mean: Tensor[(512), float32], %stage4_unit2_bn2_moving_var: Tensor[(512), float32], %stage4_unit2_conv2_weight: Tensor[(512, 512, 3, 3), float32], %bn1_gamma: Tensor[(512), float32], %bn1_beta: Tensor[(512), float32], %bn1_moving_mean: Tensor[(512), float32], %bn1_moving_var: Tensor[(512), float32], %fc1_weight: Tensor[(32, 512), float32], %fc1_bias: Tensor[(32), float32]) -> Tensor[(1, 32), float32] {
  %0 = add(%bn_data_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(3), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(3), float32] */;
  %2 = divide(1f /* ty=float32 */, %1) /* ty=Tensor[(3), float32] */;
  %3 = expand_dims(%2, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %4 = negative(%bn_data_moving_mean) /* ty=Tensor[(3), float32] */;
  %5 = multiply(%4, %2) /* ty=Tensor[(3), float32] */;
  %6 = add(%5, %bn_data_beta) /* ty=Tensor[(3), float32] */;
  %7 = multiply(%data, %3) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %8 = expand_dims(%6, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %9 = add(%7, %8) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %10 = add(%bn0_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %11 = sqrt(%10) /* ty=Tensor[(64), float32] */;
  %12 = divide(1f /* ty=float32 */, %11) /* ty=Tensor[(64), float32] */;
  %13 = multiply(%12, %bn0_gamma) /* ty=Tensor[(64), float32] */;
  %14 = nn.conv2d(%9, %conv0_weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %15 = expand_dims(%13, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %16 = negative(%bn0_moving_mean) /* ty=Tensor[(64), float32] */;
  %17 = multiply(%16, %13) /* ty=Tensor[(64), float32] */;
  %18 = add(%17, %bn0_beta) /* ty=Tensor[(64), float32] */;
  %19 = multiply(%14, %15) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %20 = expand_dims(%18, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %21 = add(%19, %20) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %22 = nn.relu(%21) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %23 = add(%stage1_unit1_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %24 = sqrt(%23) /* ty=Tensor[(64), float32] */;
  %25 = divide(1f /* ty=float32 */, %24) /* ty=Tensor[(64), float32] */;
  %26 = multiply(%25, %stage1_unit1_bn1_gamma) /* ty=Tensor[(64), float32] */;
  %27 = nn.max_pool2d(%22, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %28 = expand_dims(%26, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %29 = negative(%stage1_unit1_bn1_moving_mean) /* ty=Tensor[(64), float32] */;
  %30 = multiply(%29, %26) /* ty=Tensor[(64), float32] */;
  %31 = add(%30, %stage1_unit1_bn1_beta) /* ty=Tensor[(64), float32] */;
  %32 = multiply(%27, %28) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %33 = expand_dims(%31, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %34 = add(%32, %33) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %35 = nn.relu(%34) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %36 = add(%stage1_unit1_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %37 = sqrt(%36) /* ty=Tensor[(64), float32] */;
  %38 = divide(1f /* ty=float32 */, %37) /* ty=Tensor[(64), float32] */;
  %39 = multiply(%38, %stage1_unit1_bn2_gamma) /* ty=Tensor[(64), float32] */;
  %40 = nn.conv2d(%35, %stage1_unit1_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %41 = expand_dims(%39, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %42 = negative(%stage1_unit1_bn2_moving_mean) /* ty=Tensor[(64), float32] */;
  %43 = multiply(%42, %39) /* ty=Tensor[(64), float32] */;
  %44 = add(%43, %stage1_unit1_bn2_beta) /* ty=Tensor[(64), float32] */;
  %45 = multiply(%40, %41) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %46 = expand_dims(%44, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %47 = add(%45, %46) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %48 = nn.relu(%47) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %49 = nn.conv2d(%48, %stage1_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %50 = nn.conv2d(%35, %stage1_unit1_sc_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %51 = add(%stage1_unit2_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %52 = sqrt(%51) /* ty=Tensor[(64), float32] */;
  %53 = divide(1f /* ty=float32 */, %52) /* ty=Tensor[(64), float32] */;
  %54 = multiply(%53, %stage1_unit2_bn1_gamma) /* ty=Tensor[(64), float32] */;
  %55 = add(%49, %50) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %56 = expand_dims(%54, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %57 = negative(%stage1_unit2_bn1_moving_mean) /* ty=Tensor[(64), float32] */;
  %58 = multiply(%57, %54) /* ty=Tensor[(64), float32] */;
  %59 = add(%58, %stage1_unit2_bn1_beta) /* ty=Tensor[(64), float32] */;
  %60 = multiply(%55, %56) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %61 = expand_dims(%59, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %62 = add(%60, %61) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %63 = nn.relu(%62) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %64 = add(%stage1_unit2_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %65 = sqrt(%64) /* ty=Tensor[(64), float32] */;
  %66 = divide(1f /* ty=float32 */, %65) /* ty=Tensor[(64), float32] */;
  %67 = multiply(%66, %stage1_unit2_bn2_gamma) /* ty=Tensor[(64), float32] */;
  %68 = nn.conv2d(%63, %stage1_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %69 = expand_dims(%67, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %70 = negative(%stage1_unit2_bn2_moving_mean) /* ty=Tensor[(64), float32] */;
  %71 = multiply(%70, %67) /* ty=Tensor[(64), float32] */;
  %72 = add(%71, %stage1_unit2_bn2_beta) /* ty=Tensor[(64), float32] */;
  %73 = multiply(%68, %69) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %74 = expand_dims(%72, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %75 = add(%73, %74) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %76 = nn.relu(%75) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %77 = nn.conv2d(%76, %stage1_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %78 = add(%stage2_unit1_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %79 = sqrt(%78) /* ty=Tensor[(64), float32] */;
  %80 = divide(1f /* ty=float32 */, %79) /* ty=Tensor[(64), float32] */;
  %81 = multiply(%80, %stage2_unit1_bn1_gamma) /* ty=Tensor[(64), float32] */;
  %82 = add(%77, %55) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %83 = expand_dims(%81, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %84 = negative(%stage2_unit1_bn1_moving_mean) /* ty=Tensor[(64), float32] */;
  %85 = multiply(%84, %81) /* ty=Tensor[(64), float32] */;
  %86 = add(%85, %stage2_unit1_bn1_beta) /* ty=Tensor[(64), float32] */;
  %87 = multiply(%82, %83) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %88 = expand_dims(%86, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %89 = add(%87, %88) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %90 = nn.relu(%89) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %91 = add(%stage2_unit1_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %92 = sqrt(%91) /* ty=Tensor[(128), float32] */;
  %93 = divide(1f /* ty=float32 */, %92) /* ty=Tensor[(128), float32] */;
  %94 = multiply(%93, %stage2_unit1_bn2_gamma) /* ty=Tensor[(128), float32] */;
  %95 = nn.conv2d(%90, %stage2_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %96 = expand_dims(%94, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %97 = negative(%stage2_unit1_bn2_moving_mean) /* ty=Tensor[(128), float32] */;
  %98 = multiply(%97, %94) /* ty=Tensor[(128), float32] */;
  %99 = add(%98, %stage2_unit1_bn2_beta) /* ty=Tensor[(128), float32] */;
  %100 = multiply(%95, %96) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %101 = expand_dims(%99, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %102 = add(%100, %101) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %103 = nn.relu(%102) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %104 = nn.conv2d(%103, %stage2_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %105 = nn.conv2d(%90, %stage2_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %106 = add(%stage2_unit2_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %107 = sqrt(%106) /* ty=Tensor[(128), float32] */;
  %108 = divide(1f /* ty=float32 */, %107) /* ty=Tensor[(128), float32] */;
  %109 = multiply(%108, %stage2_unit2_bn1_gamma) /* ty=Tensor[(128), float32] */;
  %110 = add(%104, %105) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %111 = expand_dims(%109, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %112 = negative(%stage2_unit2_bn1_moving_mean) /* ty=Tensor[(128), float32] */;
  %113 = multiply(%112, %109) /* ty=Tensor[(128), float32] */;
  %114 = add(%113, %stage2_unit2_bn1_beta) /* ty=Tensor[(128), float32] */;
  %115 = multiply(%110, %111) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %116 = expand_dims(%114, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %117 = add(%115, %116) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %118 = nn.relu(%117) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %119 = add(%stage2_unit2_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %120 = sqrt(%119) /* ty=Tensor[(128), float32] */;
  %121 = divide(1f /* ty=float32 */, %120) /* ty=Tensor[(128), float32] */;
  %122 = multiply(%121, %stage2_unit2_bn2_gamma) /* ty=Tensor[(128), float32] */;
  %123 = nn.conv2d(%118, %stage2_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %124 = expand_dims(%122, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %125 = negative(%stage2_unit2_bn2_moving_mean) /* ty=Tensor[(128), float32] */;
  %126 = multiply(%125, %122) /* ty=Tensor[(128), float32] */;
  %127 = add(%126, %stage2_unit2_bn2_beta) /* ty=Tensor[(128), float32] */;
  %128 = multiply(%123, %124) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %129 = expand_dims(%127, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %130 = add(%128, %129) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %131 = nn.relu(%130) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %132 = nn.conv2d(%131, %stage2_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %133 = add(%stage3_unit1_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %134 = sqrt(%133) /* ty=Tensor[(128), float32] */;
  %135 = divide(1f /* ty=float32 */, %134) /* ty=Tensor[(128), float32] */;
  %136 = multiply(%135, %stage3_unit1_bn1_gamma) /* ty=Tensor[(128), float32] */;
  %137 = add(%132, %110) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %138 = expand_dims(%136, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %139 = negative(%stage3_unit1_bn1_moving_mean) /* ty=Tensor[(128), float32] */;
  %140 = multiply(%139, %136) /* ty=Tensor[(128), float32] */;
  %141 = add(%140, %stage3_unit1_bn1_beta) /* ty=Tensor[(128), float32] */;
  %142 = multiply(%137, %138) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %143 = expand_dims(%141, axis=1, num_newaxis=2) /* ty=Tensor[(128, 1, 1), float32] */;
  %144 = add(%142, %143) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %145 = nn.relu(%144) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %146 = add(%stage3_unit1_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %147 = sqrt(%146) /* ty=Tensor[(256), float32] */;
  %148 = divide(1f /* ty=float32 */, %147) /* ty=Tensor[(256), float32] */;
  %149 = multiply(%148, %stage3_unit1_bn2_gamma) /* ty=Tensor[(256), float32] */;
  %150 = nn.conv2d(%145, %stage3_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %151 = expand_dims(%149, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %152 = negative(%stage3_unit1_bn2_moving_mean) /* ty=Tensor[(256), float32] */;
  %153 = multiply(%152, %149) /* ty=Tensor[(256), float32] */;
  %154 = add(%153, %stage3_unit1_bn2_beta) /* ty=Tensor[(256), float32] */;
  %155 = multiply(%150, %151) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %156 = expand_dims(%154, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %157 = add(%155, %156) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %158 = nn.relu(%157) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %159 = nn.conv2d(%158, %stage3_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %160 = nn.conv2d(%145, %stage3_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %161 = add(%stage3_unit2_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %162 = sqrt(%161) /* ty=Tensor[(256), float32] */;
  %163 = divide(1f /* ty=float32 */, %162) /* ty=Tensor[(256), float32] */;
  %164 = multiply(%163, %stage3_unit2_bn1_gamma) /* ty=Tensor[(256), float32] */;
  %165 = add(%159, %160) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %166 = expand_dims(%164, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %167 = negative(%stage3_unit2_bn1_moving_mean) /* ty=Tensor[(256), float32] */;
  %168 = multiply(%167, %164) /* ty=Tensor[(256), float32] */;
  %169 = add(%168, %stage3_unit2_bn1_beta) /* ty=Tensor[(256), float32] */;
  %170 = multiply(%165, %166) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %171 = expand_dims(%169, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %172 = add(%170, %171) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %173 = nn.relu(%172) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %174 = add(%stage3_unit2_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %175 = sqrt(%174) /* ty=Tensor[(256), float32] */;
  %176 = divide(1f /* ty=float32 */, %175) /* ty=Tensor[(256), float32] */;
  %177 = multiply(%176, %stage3_unit2_bn2_gamma) /* ty=Tensor[(256), float32] */;
  %178 = nn.conv2d(%173, %stage3_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %179 = expand_dims(%177, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %180 = negative(%stage3_unit2_bn2_moving_mean) /* ty=Tensor[(256), float32] */;
  %181 = multiply(%180, %177) /* ty=Tensor[(256), float32] */;
  %182 = add(%181, %stage3_unit2_bn2_beta) /* ty=Tensor[(256), float32] */;
  %183 = multiply(%178, %179) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %184 = expand_dims(%182, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %185 = add(%183, %184) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %186 = nn.relu(%185) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %187 = nn.conv2d(%186, %stage3_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %188 = add(%stage4_unit1_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(256), float32] */;
  %189 = sqrt(%188) /* ty=Tensor[(256), float32] */;
  %190 = divide(1f /* ty=float32 */, %189) /* ty=Tensor[(256), float32] */;
  %191 = multiply(%190, %stage4_unit1_bn1_gamma) /* ty=Tensor[(256), float32] */;
  %192 = add(%187, %165) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %193 = expand_dims(%191, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %194 = negative(%stage4_unit1_bn1_moving_mean) /* ty=Tensor[(256), float32] */;
  %195 = multiply(%194, %191) /* ty=Tensor[(256), float32] */;
  %196 = add(%195, %stage4_unit1_bn1_beta) /* ty=Tensor[(256), float32] */;
  %197 = multiply(%192, %193) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %198 = expand_dims(%196, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %199 = add(%197, %198) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %200 = nn.relu(%199) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %201 = add(%stage4_unit1_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %202 = sqrt(%201) /* ty=Tensor[(512), float32] */;
  %203 = divide(1f /* ty=float32 */, %202) /* ty=Tensor[(512), float32] */;
  %204 = multiply(%203, %stage4_unit1_bn2_gamma) /* ty=Tensor[(512), float32] */;
  %205 = nn.conv2d(%200, %stage4_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %206 = expand_dims(%204, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %207 = negative(%stage4_unit1_bn2_moving_mean) /* ty=Tensor[(512), float32] */;
  %208 = multiply(%207, %204) /* ty=Tensor[(512), float32] */;
  %209 = add(%208, %stage4_unit1_bn2_beta) /* ty=Tensor[(512), float32] */;
  %210 = multiply(%205, %206) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %211 = expand_dims(%209, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %212 = add(%210, %211) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %213 = nn.relu(%212) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %214 = nn.conv2d(%213, %stage4_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %215 = nn.conv2d(%200, %stage4_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %216 = add(%stage4_unit2_bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %217 = sqrt(%216) /* ty=Tensor[(512), float32] */;
  %218 = divide(1f /* ty=float32 */, %217) /* ty=Tensor[(512), float32] */;
  %219 = multiply(%218, %stage4_unit2_bn1_gamma) /* ty=Tensor[(512), float32] */;
  %220 = add(%214, %215) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %221 = expand_dims(%219, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %222 = negative(%stage4_unit2_bn1_moving_mean) /* ty=Tensor[(512), float32] */;
  %223 = multiply(%222, %219) /* ty=Tensor[(512), float32] */;
  %224 = add(%223, %stage4_unit2_bn1_beta) /* ty=Tensor[(512), float32] */;
  %225 = multiply(%220, %221) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %226 = expand_dims(%224, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %227 = add(%225, %226) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %228 = nn.relu(%227) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %229 = add(%stage4_unit2_bn2_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %230 = sqrt(%229) /* ty=Tensor[(512), float32] */;
  %231 = divide(1f /* ty=float32 */, %230) /* ty=Tensor[(512), float32] */;
  %232 = multiply(%231, %stage4_unit2_bn2_gamma) /* ty=Tensor[(512), float32] */;
  %233 = nn.conv2d(%228, %stage4_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %234 = expand_dims(%232, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %235 = negative(%stage4_unit2_bn2_moving_mean) /* ty=Tensor[(512), float32] */;
  %236 = multiply(%235, %232) /* ty=Tensor[(512), float32] */;
  %237 = add(%236, %stage4_unit2_bn2_beta) /* ty=Tensor[(512), float32] */;
  %238 = multiply(%233, %234) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %239 = expand_dims(%237, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %240 = add(%238, %239) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %241 = nn.relu(%240) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %242 = nn.conv2d(%241, %stage4_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %243 = add(%bn1_moving_var, 2e-05f /* ty=float32 */) /* ty=Tensor[(512), float32] */;
  %244 = sqrt(%243) /* ty=Tensor[(512), float32] */;
  %245 = divide(1f /* ty=float32 */, %244) /* ty=Tensor[(512), float32] */;
  %246 = multiply(%245, %bn1_gamma) /* ty=Tensor[(512), float32] */;
  %247 = add(%242, %220) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %248 = expand_dims(%246, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %249 = negative(%bn1_moving_mean) /* ty=Tensor[(512), float32] */;
  %250 = multiply(%249, %246) /* ty=Tensor[(512), float32] */;
  %251 = add(%250, %bn1_beta) /* ty=Tensor[(512), float32] */;
  %252 = multiply(%247, %248) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %253 = expand_dims(%251, axis=1, num_newaxis=2) /* ty=Tensor[(512, 1, 1), float32] */;
  %254 = add(%252, %253) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %255 = nn.relu(%254) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %256 = nn.global_avg_pool2d(%255) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %257 = nn.batch_flatten(%256) /* ty=Tensor[(1, 512), float32] */;
  %258 = nn.dense(%257, %fc1_weight, units=32) /* ty=Tensor[(1, 32), float32] */;
  %259 = nn.bias_add(%258, %fc1_bias, axis=-1) /* ty=Tensor[(1, 32), float32] */;
  nn.softmax(%259) /* ty=Tensor[(1, 32), float32] */
}
