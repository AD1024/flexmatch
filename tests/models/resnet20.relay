#[version = "0.0.5"]
def @main(%data: Tensor[(1, 3, 32, 32), float32], %cifarresnetv11_conv0_weight: Tensor[(16, 3, 3, 3), float32], %cifarresnetv11_batchnorm0_gamma: Tensor[(16), float32], %cifarresnetv11_batchnorm0_beta: Tensor[(16), float32], %cifarresnetv11_batchnorm0_running_mean: Tensor[(16), float32], %cifarresnetv11_batchnorm0_running_var: Tensor[(16), float32], %cifarresnetv11_stage1_conv0_weight: Tensor[(16, 16, 3, 3), float32], %cifarresnetv11_stage1_batchnorm0_gamma: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm0_beta: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm0_running_mean: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm0_running_var: Tensor[(16), float32], %cifarresnetv11_stage1_conv1_weight: Tensor[(16, 16, 3, 3), float32], %cifarresnetv11_stage1_batchnorm1_gamma: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm1_beta: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm1_running_mean: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm1_running_var: Tensor[(16), float32], %cifarresnetv11_stage1_conv2_weight: Tensor[(16, 16, 3, 3), float32], %cifarresnetv11_stage1_batchnorm2_gamma: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm2_beta: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm2_running_mean: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm2_running_var: Tensor[(16), float32], %cifarresnetv11_stage1_conv3_weight: Tensor[(16, 16, 3, 3), float32], %cifarresnetv11_stage1_batchnorm3_gamma: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm3_beta: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm3_running_mean: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm3_running_var: Tensor[(16), float32], %cifarresnetv11_stage1_conv4_weight: Tensor[(16, 16, 3, 3), float32], %cifarresnetv11_stage1_batchnorm4_gamma: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm4_beta: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm4_running_mean: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm4_running_var: Tensor[(16), float32], %cifarresnetv11_stage1_conv5_weight: Tensor[(16, 16, 3, 3), float32], %cifarresnetv11_stage1_batchnorm5_gamma: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm5_beta: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm5_running_mean: Tensor[(16), float32], %cifarresnetv11_stage1_batchnorm5_running_var: Tensor[(16), float32], %cifarresnetv11_stage2_conv2_weight: Tensor[(32, 16, 1, 1), float32], %cifarresnetv11_stage2_batchnorm2_gamma: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm2_beta: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm2_running_mean: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm2_running_var: Tensor[(32), float32], %cifarresnetv11_stage2_conv0_weight: Tensor[(32, 16, 3, 3), float32], %cifarresnetv11_stage2_batchnorm0_gamma: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm0_beta: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm0_running_mean: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm0_running_var: Tensor[(32), float32], %cifarresnetv11_stage2_conv1_weight: Tensor[(32, 32, 3, 3), float32], %cifarresnetv11_stage2_batchnorm1_gamma: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm1_beta: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm1_running_mean: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm1_running_var: Tensor[(32), float32], %cifarresnetv11_stage2_conv3_weight: Tensor[(32, 32, 3, 3), float32], %cifarresnetv11_stage2_batchnorm3_gamma: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm3_beta: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm3_running_mean: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm3_running_var: Tensor[(32), float32], %cifarresnetv11_stage2_conv4_weight: Tensor[(32, 32, 3, 3), float32], %cifarresnetv11_stage2_batchnorm4_gamma: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm4_beta: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm4_running_mean: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm4_running_var: Tensor[(32), float32], %cifarresnetv11_stage2_conv5_weight: Tensor[(32, 32, 3, 3), float32], %cifarresnetv11_stage2_batchnorm5_gamma: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm5_beta: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm5_running_mean: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm5_running_var: Tensor[(32), float32], %cifarresnetv11_stage2_conv6_weight: Tensor[(32, 32, 3, 3), float32], %cifarresnetv11_stage2_batchnorm6_gamma: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm6_beta: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm6_running_mean: Tensor[(32), float32], %cifarresnetv11_stage2_batchnorm6_running_var: Tensor[(32), float32], %cifarresnetv11_stage3_conv2_weight: Tensor[(64, 32, 1, 1), float32], %cifarresnetv11_stage3_batchnorm2_gamma: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm2_beta: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm2_running_mean: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm2_running_var: Tensor[(64), float32], %cifarresnetv11_stage3_conv0_weight: Tensor[(64, 32, 3, 3), float32], %cifarresnetv11_stage3_batchnorm0_gamma: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm0_beta: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm0_running_mean: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm0_running_var: Tensor[(64), float32], %cifarresnetv11_stage3_conv1_weight: Tensor[(64, 64, 3, 3), float32], %cifarresnetv11_stage3_batchnorm1_gamma: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm1_beta: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm1_running_mean: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm1_running_var: Tensor[(64), float32], %cifarresnetv11_stage3_conv3_weight: Tensor[(64, 64, 3, 3), float32], %cifarresnetv11_stage3_batchnorm3_gamma: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm3_beta: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm3_running_mean: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm3_running_var: Tensor[(64), float32], %cifarresnetv11_stage3_conv4_weight: Tensor[(64, 64, 3, 3), float32], %cifarresnetv11_stage3_batchnorm4_gamma: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm4_beta: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm4_running_mean: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm4_running_var: Tensor[(64), float32], %cifarresnetv11_stage3_conv5_weight: Tensor[(64, 64, 3, 3), float32], %cifarresnetv11_stage3_batchnorm5_gamma: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm5_beta: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm5_running_mean: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm5_running_var: Tensor[(64), float32], %cifarresnetv11_stage3_conv6_weight: Tensor[(64, 64, 3, 3), float32], %cifarresnetv11_stage3_batchnorm6_gamma: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm6_beta: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm6_running_mean: Tensor[(64), float32], %cifarresnetv11_stage3_batchnorm6_running_var: Tensor[(64), float32], %cifarresnetv11_dense0_weight: Tensor[(10, 64), float32], %cifarresnetv11_dense0_bias: Tensor[(10), float32]) -> Tensor[(1, 10), float32] {
  %0 = add(%cifarresnetv11_batchnorm0_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(16), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(16), float32] */;
  %2 = divide(1f /* ty=float32 */, %1) /* ty=Tensor[(16), float32] */;
  %3 = multiply(%2, %cifarresnetv11_batchnorm0_gamma) /* ty=Tensor[(16), float32] */;
  %4 = nn.conv2d(%data, %cifarresnetv11_conv0_weight, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %5 = expand_dims(%3, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %6 = negative(%cifarresnetv11_batchnorm0_running_mean) /* ty=Tensor[(16), float32] */;
  %7 = multiply(%6, %3) /* ty=Tensor[(16), float32] */;
  %8 = add(%7, %cifarresnetv11_batchnorm0_beta) /* ty=Tensor[(16), float32] */;
  %9 = multiply(%4, %5) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %10 = expand_dims(%8, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %11 = add(%cifarresnetv11_batchnorm0_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(16), float32] */;
  %12 = sqrt(%11) /* ty=Tensor[(16), float32] */;
  %13 = divide(1f /* ty=float32 */, %12) /* ty=Tensor[(16), float32] */;
  %14 = multiply(%13, %cifarresnetv11_batchnorm0_gamma) /* ty=Tensor[(16), float32] */;
  %15 = expand_dims(%14, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %16 = negative(%cifarresnetv11_batchnorm0_running_mean) /* ty=Tensor[(16), float32] */;
  %17 = multiply(%16, %14) /* ty=Tensor[(16), float32] */;
  %18 = add(%17, %cifarresnetv11_batchnorm0_beta) /* ty=Tensor[(16), float32] */;
  %19 = multiply(%4, %15) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %20 = expand_dims(%18, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %21 = add(%19, %20) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %22 = add(%cifarresnetv11_stage1_batchnorm0_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(16), float32] */;
  %23 = sqrt(%22) /* ty=Tensor[(16), float32] */;
  %24 = divide(1f /* ty=float32 */, %23) /* ty=Tensor[(16), float32] */;
  %25 = multiply(%24, %cifarresnetv11_stage1_batchnorm0_gamma) /* ty=Tensor[(16), float32] */;
  %26 = nn.conv2d(%21, %cifarresnetv11_stage1_conv0_weight, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %27 = expand_dims(%25, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %28 = negative(%cifarresnetv11_stage1_batchnorm0_running_mean) /* ty=Tensor[(16), float32] */;
  %29 = multiply(%28, %25) /* ty=Tensor[(16), float32] */;
  %30 = add(%29, %cifarresnetv11_stage1_batchnorm0_beta) /* ty=Tensor[(16), float32] */;
  %31 = multiply(%26, %27) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %32 = expand_dims(%30, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %33 = add(%31, %32) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %34 = nn.relu(%33) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %35 = add(%cifarresnetv11_stage1_batchnorm1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(16), float32] */;
  %36 = sqrt(%35) /* ty=Tensor[(16), float32] */;
  %37 = divide(1f /* ty=float32 */, %36) /* ty=Tensor[(16), float32] */;
  %38 = multiply(%37, %cifarresnetv11_stage1_batchnorm1_gamma) /* ty=Tensor[(16), float32] */;
  %39 = nn.conv2d(%34, %cifarresnetv11_stage1_conv1_weight, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %40 = expand_dims(%38, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %41 = negative(%cifarresnetv11_stage1_batchnorm1_running_mean) /* ty=Tensor[(16), float32] */;
  %42 = multiply(%41, %38) /* ty=Tensor[(16), float32] */;
  %43 = add(%42, %cifarresnetv11_stage1_batchnorm1_beta) /* ty=Tensor[(16), float32] */;
  %44 = multiply(%39, %40) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %45 = expand_dims(%43, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %46 = add(%9, %10) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %47 = add(%44, %45) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %48 = add(%46, %47) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %49 = nn.relu(%48) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %50 = add(%cifarresnetv11_stage1_batchnorm2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(16), float32] */;
  %51 = sqrt(%50) /* ty=Tensor[(16), float32] */;
  %52 = divide(1f /* ty=float32 */, %51) /* ty=Tensor[(16), float32] */;
  %53 = multiply(%52, %cifarresnetv11_stage1_batchnorm2_gamma) /* ty=Tensor[(16), float32] */;
  %54 = nn.conv2d(%49, %cifarresnetv11_stage1_conv2_weight, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %55 = expand_dims(%53, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %56 = negative(%cifarresnetv11_stage1_batchnorm2_running_mean) /* ty=Tensor[(16), float32] */;
  %57 = multiply(%56, %53) /* ty=Tensor[(16), float32] */;
  %58 = add(%57, %cifarresnetv11_stage1_batchnorm2_beta) /* ty=Tensor[(16), float32] */;
  %59 = multiply(%54, %55) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %60 = expand_dims(%58, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %61 = add(%59, %60) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %62 = nn.relu(%61) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %63 = add(%cifarresnetv11_stage1_batchnorm3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(16), float32] */;
  %64 = sqrt(%63) /* ty=Tensor[(16), float32] */;
  %65 = divide(1f /* ty=float32 */, %64) /* ty=Tensor[(16), float32] */;
  %66 = multiply(%65, %cifarresnetv11_stage1_batchnorm3_gamma) /* ty=Tensor[(16), float32] */;
  %67 = nn.conv2d(%62, %cifarresnetv11_stage1_conv3_weight, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %68 = expand_dims(%66, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %69 = negative(%cifarresnetv11_stage1_batchnorm3_running_mean) /* ty=Tensor[(16), float32] */;
  %70 = multiply(%69, %66) /* ty=Tensor[(16), float32] */;
  %71 = add(%70, %cifarresnetv11_stage1_batchnorm3_beta) /* ty=Tensor[(16), float32] */;
  %72 = multiply(%67, %68) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %73 = expand_dims(%71, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %74 = add(%72, %73) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %75 = add(%49, %74) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %76 = nn.relu(%75) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %77 = add(%cifarresnetv11_stage1_batchnorm4_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(16), float32] */;
  %78 = sqrt(%77) /* ty=Tensor[(16), float32] */;
  %79 = divide(1f /* ty=float32 */, %78) /* ty=Tensor[(16), float32] */;
  %80 = multiply(%79, %cifarresnetv11_stage1_batchnorm4_gamma) /* ty=Tensor[(16), float32] */;
  %81 = nn.conv2d(%76, %cifarresnetv11_stage1_conv4_weight, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %82 = expand_dims(%80, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %83 = negative(%cifarresnetv11_stage1_batchnorm4_running_mean) /* ty=Tensor[(16), float32] */;
  %84 = multiply(%83, %80) /* ty=Tensor[(16), float32] */;
  %85 = add(%84, %cifarresnetv11_stage1_batchnorm4_beta) /* ty=Tensor[(16), float32] */;
  %86 = multiply(%81, %82) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %87 = expand_dims(%85, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %88 = add(%86, %87) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %89 = nn.relu(%88) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %90 = add(%cifarresnetv11_stage1_batchnorm5_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(16), float32] */;
  %91 = sqrt(%90) /* ty=Tensor[(16), float32] */;
  %92 = divide(1f /* ty=float32 */, %91) /* ty=Tensor[(16), float32] */;
  %93 = multiply(%92, %cifarresnetv11_stage1_batchnorm5_gamma) /* ty=Tensor[(16), float32] */;
  %94 = nn.conv2d(%89, %cifarresnetv11_stage1_conv5_weight, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %95 = expand_dims(%93, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %96 = negative(%cifarresnetv11_stage1_batchnorm5_running_mean) /* ty=Tensor[(16), float32] */;
  %97 = multiply(%96, %93) /* ty=Tensor[(16), float32] */;
  %98 = add(%97, %cifarresnetv11_stage1_batchnorm5_beta) /* ty=Tensor[(16), float32] */;
  %99 = multiply(%94, %95) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %100 = expand_dims(%98, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %101 = add(%99, %100) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %102 = add(%76, %101) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %103 = nn.relu(%102) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %104 = add(%cifarresnetv11_stage2_batchnorm2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %105 = sqrt(%104) /* ty=Tensor[(32), float32] */;
  %106 = divide(1f /* ty=float32 */, %105) /* ty=Tensor[(32), float32] */;
  %107 = multiply(%106, %cifarresnetv11_stage2_batchnorm2_gamma) /* ty=Tensor[(32), float32] */;
  %108 = nn.conv2d(%103, %cifarresnetv11_stage2_conv2_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %109 = expand_dims(%107, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %110 = negative(%cifarresnetv11_stage2_batchnorm2_running_mean) /* ty=Tensor[(32), float32] */;
  %111 = multiply(%110, %107) /* ty=Tensor[(32), float32] */;
  %112 = add(%111, %cifarresnetv11_stage2_batchnorm2_beta) /* ty=Tensor[(32), float32] */;
  %113 = multiply(%108, %109) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %114 = expand_dims(%112, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %115 = add(%cifarresnetv11_stage2_batchnorm0_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %116 = sqrt(%115) /* ty=Tensor[(32), float32] */;
  %117 = divide(1f /* ty=float32 */, %116) /* ty=Tensor[(32), float32] */;
  %118 = multiply(%117, %cifarresnetv11_stage2_batchnorm0_gamma) /* ty=Tensor[(32), float32] */;
  %119 = nn.conv2d(%103, %cifarresnetv11_stage2_conv0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %120 = expand_dims(%118, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %121 = negative(%cifarresnetv11_stage2_batchnorm0_running_mean) /* ty=Tensor[(32), float32] */;
  %122 = multiply(%121, %118) /* ty=Tensor[(32), float32] */;
  %123 = add(%122, %cifarresnetv11_stage2_batchnorm0_beta) /* ty=Tensor[(32), float32] */;
  %124 = multiply(%119, %120) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %125 = expand_dims(%123, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %126 = add(%124, %125) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %127 = nn.relu(%126) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %128 = add(%cifarresnetv11_stage2_batchnorm1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %129 = sqrt(%128) /* ty=Tensor[(32), float32] */;
  %130 = divide(1f /* ty=float32 */, %129) /* ty=Tensor[(32), float32] */;
  %131 = multiply(%130, %cifarresnetv11_stage2_batchnorm1_gamma) /* ty=Tensor[(32), float32] */;
  %132 = nn.conv2d(%127, %cifarresnetv11_stage2_conv1_weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %133 = expand_dims(%131, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %134 = negative(%cifarresnetv11_stage2_batchnorm1_running_mean) /* ty=Tensor[(32), float32] */;
  %135 = multiply(%134, %131) /* ty=Tensor[(32), float32] */;
  %136 = add(%135, %cifarresnetv11_stage2_batchnorm1_beta) /* ty=Tensor[(32), float32] */;
  %137 = multiply(%132, %133) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %138 = expand_dims(%136, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %139 = add(%113, %114) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %140 = add(%137, %138) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %141 = add(%139, %140) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %142 = nn.relu(%141) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %143 = add(%cifarresnetv11_stage2_batchnorm3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %144 = sqrt(%143) /* ty=Tensor[(32), float32] */;
  %145 = divide(1f /* ty=float32 */, %144) /* ty=Tensor[(32), float32] */;
  %146 = multiply(%145, %cifarresnetv11_stage2_batchnorm3_gamma) /* ty=Tensor[(32), float32] */;
  %147 = nn.conv2d(%142, %cifarresnetv11_stage2_conv3_weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %148 = expand_dims(%146, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %149 = negative(%cifarresnetv11_stage2_batchnorm3_running_mean) /* ty=Tensor[(32), float32] */;
  %150 = multiply(%149, %146) /* ty=Tensor[(32), float32] */;
  %151 = add(%150, %cifarresnetv11_stage2_batchnorm3_beta) /* ty=Tensor[(32), float32] */;
  %152 = multiply(%147, %148) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %153 = expand_dims(%151, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %154 = add(%152, %153) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %155 = nn.relu(%154) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %156 = add(%cifarresnetv11_stage2_batchnorm4_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %157 = sqrt(%156) /* ty=Tensor[(32), float32] */;
  %158 = divide(1f /* ty=float32 */, %157) /* ty=Tensor[(32), float32] */;
  %159 = multiply(%158, %cifarresnetv11_stage2_batchnorm4_gamma) /* ty=Tensor[(32), float32] */;
  %160 = nn.conv2d(%155, %cifarresnetv11_stage2_conv4_weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %161 = expand_dims(%159, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %162 = negative(%cifarresnetv11_stage2_batchnorm4_running_mean) /* ty=Tensor[(32), float32] */;
  %163 = multiply(%162, %159) /* ty=Tensor[(32), float32] */;
  %164 = add(%163, %cifarresnetv11_stage2_batchnorm4_beta) /* ty=Tensor[(32), float32] */;
  %165 = multiply(%160, %161) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %166 = expand_dims(%164, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %167 = add(%165, %166) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %168 = add(%142, %167) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %169 = nn.relu(%168) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %170 = add(%cifarresnetv11_stage2_batchnorm5_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %171 = sqrt(%170) /* ty=Tensor[(32), float32] */;
  %172 = divide(1f /* ty=float32 */, %171) /* ty=Tensor[(32), float32] */;
  %173 = multiply(%172, %cifarresnetv11_stage2_batchnorm5_gamma) /* ty=Tensor[(32), float32] */;
  %174 = nn.conv2d(%169, %cifarresnetv11_stage2_conv5_weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %175 = expand_dims(%173, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %176 = negative(%cifarresnetv11_stage2_batchnorm5_running_mean) /* ty=Tensor[(32), float32] */;
  %177 = multiply(%176, %173) /* ty=Tensor[(32), float32] */;
  %178 = add(%177, %cifarresnetv11_stage2_batchnorm5_beta) /* ty=Tensor[(32), float32] */;
  %179 = multiply(%174, %175) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %180 = expand_dims(%178, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %181 = add(%179, %180) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %182 = nn.relu(%181) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %183 = add(%cifarresnetv11_stage2_batchnorm6_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %184 = sqrt(%183) /* ty=Tensor[(32), float32] */;
  %185 = divide(1f /* ty=float32 */, %184) /* ty=Tensor[(32), float32] */;
  %186 = multiply(%185, %cifarresnetv11_stage2_batchnorm6_gamma) /* ty=Tensor[(32), float32] */;
  %187 = nn.conv2d(%182, %cifarresnetv11_stage2_conv6_weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %188 = expand_dims(%186, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %189 = negative(%cifarresnetv11_stage2_batchnorm6_running_mean) /* ty=Tensor[(32), float32] */;
  %190 = multiply(%189, %186) /* ty=Tensor[(32), float32] */;
  %191 = add(%190, %cifarresnetv11_stage2_batchnorm6_beta) /* ty=Tensor[(32), float32] */;
  %192 = multiply(%187, %188) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %193 = expand_dims(%191, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %194 = add(%192, %193) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %195 = add(%169, %194) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %196 = nn.relu(%195) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %197 = add(%cifarresnetv11_stage3_batchnorm2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %198 = sqrt(%197) /* ty=Tensor[(64), float32] */;
  %199 = divide(1f /* ty=float32 */, %198) /* ty=Tensor[(64), float32] */;
  %200 = multiply(%199, %cifarresnetv11_stage3_batchnorm2_gamma) /* ty=Tensor[(64), float32] */;
  %201 = nn.conv2d(%196, %cifarresnetv11_stage3_conv2_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %202 = expand_dims(%200, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %203 = negative(%cifarresnetv11_stage3_batchnorm2_running_mean) /* ty=Tensor[(64), float32] */;
  %204 = multiply(%203, %200) /* ty=Tensor[(64), float32] */;
  %205 = add(%204, %cifarresnetv11_stage3_batchnorm2_beta) /* ty=Tensor[(64), float32] */;
  %206 = multiply(%201, %202) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %207 = expand_dims(%205, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %208 = add(%cifarresnetv11_stage3_batchnorm0_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %209 = sqrt(%208) /* ty=Tensor[(64), float32] */;
  %210 = divide(1f /* ty=float32 */, %209) /* ty=Tensor[(64), float32] */;
  %211 = multiply(%210, %cifarresnetv11_stage3_batchnorm0_gamma) /* ty=Tensor[(64), float32] */;
  %212 = nn.conv2d(%196, %cifarresnetv11_stage3_conv0_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %213 = expand_dims(%211, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %214 = negative(%cifarresnetv11_stage3_batchnorm0_running_mean) /* ty=Tensor[(64), float32] */;
  %215 = multiply(%214, %211) /* ty=Tensor[(64), float32] */;
  %216 = add(%215, %cifarresnetv11_stage3_batchnorm0_beta) /* ty=Tensor[(64), float32] */;
  %217 = multiply(%212, %213) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %218 = expand_dims(%216, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %219 = add(%217, %218) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %220 = nn.relu(%219) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %221 = add(%cifarresnetv11_stage3_batchnorm1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %222 = sqrt(%221) /* ty=Tensor[(64), float32] */;
  %223 = divide(1f /* ty=float32 */, %222) /* ty=Tensor[(64), float32] */;
  %224 = multiply(%223, %cifarresnetv11_stage3_batchnorm1_gamma) /* ty=Tensor[(64), float32] */;
  %225 = nn.conv2d(%220, %cifarresnetv11_stage3_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %226 = expand_dims(%224, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %227 = negative(%cifarresnetv11_stage3_batchnorm1_running_mean) /* ty=Tensor[(64), float32] */;
  %228 = multiply(%227, %224) /* ty=Tensor[(64), float32] */;
  %229 = add(%228, %cifarresnetv11_stage3_batchnorm1_beta) /* ty=Tensor[(64), float32] */;
  %230 = multiply(%225, %226) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %231 = expand_dims(%229, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %232 = add(%206, %207) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %233 = add(%230, %231) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %234 = add(%232, %233) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %235 = nn.relu(%234) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %236 = add(%cifarresnetv11_stage3_batchnorm3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %237 = sqrt(%236) /* ty=Tensor[(64), float32] */;
  %238 = divide(1f /* ty=float32 */, %237) /* ty=Tensor[(64), float32] */;
  %239 = multiply(%238, %cifarresnetv11_stage3_batchnorm3_gamma) /* ty=Tensor[(64), float32] */;
  %240 = nn.conv2d(%235, %cifarresnetv11_stage3_conv3_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %241 = expand_dims(%239, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %242 = negative(%cifarresnetv11_stage3_batchnorm3_running_mean) /* ty=Tensor[(64), float32] */;
  %243 = multiply(%242, %239) /* ty=Tensor[(64), float32] */;
  %244 = add(%243, %cifarresnetv11_stage3_batchnorm3_beta) /* ty=Tensor[(64), float32] */;
  %245 = multiply(%240, %241) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %246 = expand_dims(%244, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %247 = add(%245, %246) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %248 = nn.relu(%247) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %249 = add(%cifarresnetv11_stage3_batchnorm4_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %250 = sqrt(%249) /* ty=Tensor[(64), float32] */;
  %251 = divide(1f /* ty=float32 */, %250) /* ty=Tensor[(64), float32] */;
  %252 = multiply(%251, %cifarresnetv11_stage3_batchnorm4_gamma) /* ty=Tensor[(64), float32] */;
  %253 = nn.conv2d(%248, %cifarresnetv11_stage3_conv4_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %254 = expand_dims(%252, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %255 = negative(%cifarresnetv11_stage3_batchnorm4_running_mean) /* ty=Tensor[(64), float32] */;
  %256 = multiply(%255, %252) /* ty=Tensor[(64), float32] */;
  %257 = add(%256, %cifarresnetv11_stage3_batchnorm4_beta) /* ty=Tensor[(64), float32] */;
  %258 = multiply(%253, %254) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %259 = expand_dims(%257, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %260 = add(%258, %259) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %261 = add(%235, %260) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %262 = nn.relu(%261) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %263 = add(%cifarresnetv11_stage3_batchnorm5_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %264 = sqrt(%263) /* ty=Tensor[(64), float32] */;
  %265 = divide(1f /* ty=float32 */, %264) /* ty=Tensor[(64), float32] */;
  %266 = multiply(%265, %cifarresnetv11_stage3_batchnorm5_gamma) /* ty=Tensor[(64), float32] */;
  %267 = nn.conv2d(%262, %cifarresnetv11_stage3_conv5_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %268 = expand_dims(%266, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %269 = negative(%cifarresnetv11_stage3_batchnorm5_running_mean) /* ty=Tensor[(64), float32] */;
  %270 = multiply(%269, %266) /* ty=Tensor[(64), float32] */;
  %271 = add(%270, %cifarresnetv11_stage3_batchnorm5_beta) /* ty=Tensor[(64), float32] */;
  %272 = multiply(%267, %268) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %273 = expand_dims(%271, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %274 = add(%272, %273) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %275 = nn.relu(%274) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %276 = add(%cifarresnetv11_stage3_batchnorm6_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %277 = sqrt(%276) /* ty=Tensor[(64), float32] */;
  %278 = divide(1f /* ty=float32 */, %277) /* ty=Tensor[(64), float32] */;
  %279 = multiply(%278, %cifarresnetv11_stage3_batchnorm6_gamma) /* ty=Tensor[(64), float32] */;
  %280 = nn.conv2d(%275, %cifarresnetv11_stage3_conv6_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %281 = expand_dims(%279, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %282 = negative(%cifarresnetv11_stage3_batchnorm6_running_mean) /* ty=Tensor[(64), float32] */;
  %283 = multiply(%282, %279) /* ty=Tensor[(64), float32] */;
  %284 = add(%283, %cifarresnetv11_stage3_batchnorm6_beta) /* ty=Tensor[(64), float32] */;
  %285 = multiply(%280, %281) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %286 = expand_dims(%284, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %287 = add(%285, %286) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %288 = add(%262, %287) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %289 = nn.relu(%288) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %290 = nn.global_avg_pool2d(%289) /* from_string */ /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %291 = nn.batch_flatten(%290) /* from_string */ /* ty=Tensor[(1, 64), float32] */;
  %292 = nn.dense(%291, %cifarresnetv11_dense0_weight, units=10) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  nn.bias_add(%292, %cifarresnetv11_dense0_bias, axis=-1) /* from_string */ /* ty=Tensor[(1, 10), float32] */
}
