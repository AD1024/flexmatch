#[version = "0.0.5"]
def @main(%input0: Tensor[(1, 3, 32, 32), float32], %conv1_weight: Tensor[(32, 3, 3, 3), float32], %bn1_weight: Tensor[(32), float32], %bn1_bias: Tensor[(32), float32], %bn1_running_mean: Tensor[(32), float32], %bn1_running_var: Tensor[(32), float32], %layers_0_conv1_weight: Tensor[(32, 32, 1, 1), float32], %layers_0_bn1_weight: Tensor[(32), float32], %layers_0_bn1_bias: Tensor[(32), float32], %layers_0_bn1_running_mean: Tensor[(32), float32], %layers_0_bn1_running_var: Tensor[(32), float32], %layers_0_conv2_weight: Tensor[(32, 1, 3, 3), float32], %layers_0_bn2_weight: Tensor[(32), float32], %layers_0_bn2_bias: Tensor[(32), float32], %layers_0_bn2_running_mean: Tensor[(32), float32], %layers_0_bn2_running_var: Tensor[(32), float32], %layers_0_conv3_weight: Tensor[(16, 32, 1, 1), float32], %layers_0_bn3_weight: Tensor[(16), float32], %layers_0_bn3_bias: Tensor[(16), float32], %layers_0_bn3_running_mean: Tensor[(16), float32], %layers_0_bn3_running_var: Tensor[(16), float32], %layers_0_shortcut_0_weight: Tensor[(16, 32, 1, 1), float32], %layers_0_shortcut_1_weight: Tensor[(16), float32], %layers_0_shortcut_1_bias: Tensor[(16), float32], %layers_0_shortcut_1_running_mean: Tensor[(16), float32], %layers_0_shortcut_1_running_var: Tensor[(16), float32], %layers_1_conv1_weight: Tensor[(96, 16, 1, 1), float32], %layers_1_bn1_weight: Tensor[(96), float32], %layers_1_bn1_bias: Tensor[(96), float32], %layers_1_bn1_running_mean: Tensor[(96), float32], %layers_1_bn1_running_var: Tensor[(96), float32], %layers_1_conv2_weight: Tensor[(96, 1, 3, 3), float32], %layers_1_bn2_weight: Tensor[(96), float32], %layers_1_bn2_bias: Tensor[(96), float32], %layers_1_bn2_running_mean: Tensor[(96), float32], %layers_1_bn2_running_var: Tensor[(96), float32], %layers_1_conv3_weight: Tensor[(24, 96, 1, 1), float32], %layers_1_bn3_weight: Tensor[(24), float32], %layers_1_bn3_bias: Tensor[(24), float32], %layers_1_bn3_running_mean: Tensor[(24), float32], %layers_1_bn3_running_var: Tensor[(24), float32], %layers_1_shortcut_0_weight: Tensor[(24, 16, 1, 1), float32], %layers_1_shortcut_1_weight: Tensor[(24), float32], %layers_1_shortcut_1_bias: Tensor[(24), float32], %layers_1_shortcut_1_running_mean: Tensor[(24), float32], %layers_1_shortcut_1_running_var: Tensor[(24), float32], %layers_2_conv1_weight: Tensor[(144, 24, 1, 1), float32], %layers_2_bn1_weight: Tensor[(144), float32], %layers_2_bn1_bias: Tensor[(144), float32], %layers_2_bn1_running_mean: Tensor[(144), float32], %layers_2_bn1_running_var: Tensor[(144), float32], %layers_2_conv2_weight: Tensor[(144, 1, 3, 3), float32], %layers_2_bn2_weight: Tensor[(144), float32], %layers_2_bn2_bias: Tensor[(144), float32], %layers_2_bn2_running_mean: Tensor[(144), float32], %layers_2_bn2_running_var: Tensor[(144), float32], %layers_2_conv3_weight: Tensor[(24, 144, 1, 1), float32], %layers_2_bn3_weight: Tensor[(24), float32], %layers_2_bn3_bias: Tensor[(24), float32], %layers_2_bn3_running_mean: Tensor[(24), float32], %layers_2_bn3_running_var: Tensor[(24), float32], %layers_3_conv1_weight: Tensor[(144, 24, 1, 1), float32], %layers_3_bn1_weight: Tensor[(144), float32], %layers_3_bn1_bias: Tensor[(144), float32], %layers_3_bn1_running_mean: Tensor[(144), float32], %layers_3_bn1_running_var: Tensor[(144), float32], %layers_3_conv2_weight: Tensor[(144, 1, 3, 3), float32], %layers_3_bn2_weight: Tensor[(144), float32], %layers_3_bn2_bias: Tensor[(144), float32], %layers_3_bn2_running_mean: Tensor[(144), float32], %layers_3_bn2_running_var: Tensor[(144), float32], %layers_3_conv3_weight: Tensor[(32, 144, 1, 1), float32], %layers_3_bn3_weight: Tensor[(32), float32], %layers_3_bn3_bias: Tensor[(32), float32], %layers_3_bn3_running_mean: Tensor[(32), float32], %layers_3_bn3_running_var: Tensor[(32), float32], %layers_4_conv1_weight: Tensor[(192, 32, 1, 1), float32], %layers_4_bn1_weight: Tensor[(192), float32], %layers_4_bn1_bias: Tensor[(192), float32], %layers_4_bn1_running_mean: Tensor[(192), float32], %layers_4_bn1_running_var: Tensor[(192), float32], %layers_4_conv2_weight: Tensor[(192, 1, 3, 3), float32], %layers_4_bn2_weight: Tensor[(192), float32], %layers_4_bn2_bias: Tensor[(192), float32], %layers_4_bn2_running_mean: Tensor[(192), float32], %layers_4_bn2_running_var: Tensor[(192), float32], %layers_4_conv3_weight: Tensor[(32, 192, 1, 1), float32], %layers_4_bn3_weight: Tensor[(32), float32], %layers_4_bn3_bias: Tensor[(32), float32], %layers_4_bn3_running_mean: Tensor[(32), float32], %layers_4_bn3_running_var: Tensor[(32), float32], %layers_5_conv1_weight: Tensor[(192, 32, 1, 1), float32], %layers_5_bn1_weight: Tensor[(192), float32], %layers_5_bn1_bias: Tensor[(192), float32], %layers_5_bn1_running_mean: Tensor[(192), float32], %layers_5_bn1_running_var: Tensor[(192), float32], %layers_5_conv2_weight: Tensor[(192, 1, 3, 3), float32], %layers_5_bn2_weight: Tensor[(192), float32], %layers_5_bn2_bias: Tensor[(192), float32], %layers_5_bn2_running_mean: Tensor[(192), float32], %layers_5_bn2_running_var: Tensor[(192), float32], %layers_5_conv3_weight: Tensor[(32, 192, 1, 1), float32], %layers_5_bn3_weight: Tensor[(32), float32], %layers_5_bn3_bias: Tensor[(32), float32], %layers_5_bn3_running_mean: Tensor[(32), float32], %layers_5_bn3_running_var: Tensor[(32), float32], %layers_6_conv1_weight: Tensor[(192, 32, 1, 1), float32], %layers_6_bn1_weight: Tensor[(192), float32], %layers_6_bn1_bias: Tensor[(192), float32], %layers_6_bn1_running_mean: Tensor[(192), float32], %layers_6_bn1_running_var: Tensor[(192), float32], %layers_6_conv2_weight: Tensor[(192, 1, 3, 3), float32], %layers_6_bn2_weight: Tensor[(192), float32], %layers_6_bn2_bias: Tensor[(192), float32], %layers_6_bn2_running_mean: Tensor[(192), float32], %layers_6_bn2_running_var: Tensor[(192), float32], %layers_6_conv3_weight: Tensor[(64, 192, 1, 1), float32], %layers_6_bn3_weight: Tensor[(64), float32], %layers_6_bn3_bias: Tensor[(64), float32], %layers_6_bn3_running_mean: Tensor[(64), float32], %layers_6_bn3_running_var: Tensor[(64), float32], %layers_7_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_7_bn1_weight: Tensor[(384), float32], %layers_7_bn1_bias: Tensor[(384), float32], %layers_7_bn1_running_mean: Tensor[(384), float32], %layers_7_bn1_running_var: Tensor[(384), float32], %layers_7_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_7_bn2_weight: Tensor[(384), float32], %layers_7_bn2_bias: Tensor[(384), float32], %layers_7_bn2_running_mean: Tensor[(384), float32], %layers_7_bn2_running_var: Tensor[(384), float32], %layers_7_conv3_weight: Tensor[(64, 384, 1, 1), float32], %layers_7_bn3_weight: Tensor[(64), float32], %layers_7_bn3_bias: Tensor[(64), float32], %layers_7_bn3_running_mean: Tensor[(64), float32], %layers_7_bn3_running_var: Tensor[(64), float32], %layers_8_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_8_bn1_weight: Tensor[(384), float32], %layers_8_bn1_bias: Tensor[(384), float32], %layers_8_bn1_running_mean: Tensor[(384), float32], %layers_8_bn1_running_var: Tensor[(384), float32], %layers_8_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_8_bn2_weight: Tensor[(384), float32], %layers_8_bn2_bias: Tensor[(384), float32], %layers_8_bn2_running_mean: Tensor[(384), float32], %layers_8_bn2_running_var: Tensor[(384), float32], %layers_8_conv3_weight: Tensor[(64, 384, 1, 1), float32], %layers_8_bn3_weight: Tensor[(64), float32], %layers_8_bn3_bias: Tensor[(64), float32], %layers_8_bn3_running_mean: Tensor[(64), float32], %layers_8_bn3_running_var: Tensor[(64), float32], %layers_9_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_9_bn1_weight: Tensor[(384), float32], %layers_9_bn1_bias: Tensor[(384), float32], %layers_9_bn1_running_mean: Tensor[(384), float32], %layers_9_bn1_running_var: Tensor[(384), float32], %layers_9_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_9_bn2_weight: Tensor[(384), float32], %layers_9_bn2_bias: Tensor[(384), float32], %layers_9_bn2_running_mean: Tensor[(384), float32], %layers_9_bn2_running_var: Tensor[(384), float32], %layers_9_conv3_weight: Tensor[(64, 384, 1, 1), float32], %layers_9_bn3_weight: Tensor[(64), float32], %layers_9_bn3_bias: Tensor[(64), float32], %layers_9_bn3_running_mean: Tensor[(64), float32], %layers_9_bn3_running_var: Tensor[(64), float32], %layers_10_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_10_bn1_weight: Tensor[(384), float32], %layers_10_bn1_bias: Tensor[(384), float32], %layers_10_bn1_running_mean: Tensor[(384), float32], %layers_10_bn1_running_var: Tensor[(384), float32], %layers_10_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_10_bn2_weight: Tensor[(384), float32], %layers_10_bn2_bias: Tensor[(384), float32], %layers_10_bn2_running_mean: Tensor[(384), float32], %layers_10_bn2_running_var: Tensor[(384), float32], %layers_10_conv3_weight: Tensor[(96, 384, 1, 1), float32], %layers_10_bn3_weight: Tensor[(96), float32], %layers_10_bn3_bias: Tensor[(96), float32], %layers_10_bn3_running_mean: Tensor[(96), float32], %layers_10_bn3_running_var: Tensor[(96), float32], %layers_10_shortcut_0_weight: Tensor[(96, 64, 1, 1), float32], %layers_10_shortcut_1_weight: Tensor[(96), float32], %layers_10_shortcut_1_bias: Tensor[(96), float32], %layers_10_shortcut_1_running_mean: Tensor[(96), float32], %layers_10_shortcut_1_running_var: Tensor[(96), float32], %layers_11_conv1_weight: Tensor[(576, 96, 1, 1), float32], %layers_11_bn1_weight: Tensor[(576), float32], %layers_11_bn1_bias: Tensor[(576), float32], %layers_11_bn1_running_mean: Tensor[(576), float32], %layers_11_bn1_running_var: Tensor[(576), float32], %layers_11_conv2_weight: Tensor[(576, 1, 3, 3), float32], %layers_11_bn2_weight: Tensor[(576), float32], %layers_11_bn2_bias: Tensor[(576), float32], %layers_11_bn2_running_mean: Tensor[(576), float32], %layers_11_bn2_running_var: Tensor[(576), float32], %layers_11_conv3_weight: Tensor[(96, 576, 1, 1), float32], %layers_11_bn3_weight: Tensor[(96), float32], %layers_11_bn3_bias: Tensor[(96), float32], %layers_11_bn3_running_mean: Tensor[(96), float32], %layers_11_bn3_running_var: Tensor[(96), float32], %layers_12_conv1_weight: Tensor[(576, 96, 1, 1), float32], %layers_12_bn1_weight: Tensor[(576), float32], %layers_12_bn1_bias: Tensor[(576), float32], %layers_12_bn1_running_mean: Tensor[(576), float32], %layers_12_bn1_running_var: Tensor[(576), float32], %layers_12_conv2_weight: Tensor[(576, 1, 3, 3), float32], %layers_12_bn2_weight: Tensor[(576), float32], %layers_12_bn2_bias: Tensor[(576), float32], %layers_12_bn2_running_mean: Tensor[(576), float32], %layers_12_bn2_running_var: Tensor[(576), float32], %layers_12_conv3_weight: Tensor[(96, 576, 1, 1), float32], %layers_12_bn3_weight: Tensor[(96), float32], %layers_12_bn3_bias: Tensor[(96), float32], %layers_12_bn3_running_mean: Tensor[(96), float32], %layers_12_bn3_running_var: Tensor[(96), float32], %layers_13_conv1_weight: Tensor[(576, 96, 1, 1), float32], %layers_13_bn1_weight: Tensor[(576), float32], %layers_13_bn1_bias: Tensor[(576), float32], %layers_13_bn1_running_mean: Tensor[(576), float32], %layers_13_bn1_running_var: Tensor[(576), float32], %layers_13_conv2_weight: Tensor[(576, 1, 3, 3), float32], %layers_13_bn2_weight: Tensor[(576), float32], %layers_13_bn2_bias: Tensor[(576), float32], %layers_13_bn2_running_mean: Tensor[(576), float32], %layers_13_bn2_running_var: Tensor[(576), float32], %layers_13_conv3_weight: Tensor[(160, 576, 1, 1), float32], %layers_13_bn3_weight: Tensor[(160), float32], %layers_13_bn3_bias: Tensor[(160), float32], %layers_13_bn3_running_mean: Tensor[(160), float32], %layers_13_bn3_running_var: Tensor[(160), float32], %layers_14_conv1_weight: Tensor[(960, 160, 1, 1), float32], %layers_14_bn1_weight: Tensor[(960), float32], %layers_14_bn1_bias: Tensor[(960), float32], %layers_14_bn1_running_mean: Tensor[(960), float32], %layers_14_bn1_running_var: Tensor[(960), float32], %layers_14_conv2_weight: Tensor[(960, 1, 3, 3), float32], %layers_14_bn2_weight: Tensor[(960), float32], %layers_14_bn2_bias: Tensor[(960), float32], %layers_14_bn2_running_mean: Tensor[(960), float32], %layers_14_bn2_running_var: Tensor[(960), float32], %layers_14_conv3_weight: Tensor[(160, 960, 1, 1), float32], %layers_14_bn3_weight: Tensor[(160), float32], %layers_14_bn3_bias: Tensor[(160), float32], %layers_14_bn3_running_mean: Tensor[(160), float32], %layers_14_bn3_running_var: Tensor[(160), float32], %layers_15_conv1_weight: Tensor[(960, 160, 1, 1), float32], %layers_15_bn1_weight: Tensor[(960), float32], %layers_15_bn1_bias: Tensor[(960), float32], %layers_15_bn1_running_mean: Tensor[(960), float32], %layers_15_bn1_running_var: Tensor[(960), float32], %layers_15_conv2_weight: Tensor[(960, 1, 3, 3), float32], %layers_15_bn2_weight: Tensor[(960), float32], %layers_15_bn2_bias: Tensor[(960), float32], %layers_15_bn2_running_mean: Tensor[(960), float32], %layers_15_bn2_running_var: Tensor[(960), float32], %layers_15_conv3_weight: Tensor[(160, 960, 1, 1), float32], %layers_15_bn3_weight: Tensor[(160), float32], %layers_15_bn3_bias: Tensor[(160), float32], %layers_15_bn3_running_mean: Tensor[(160), float32], %layers_15_bn3_running_var: Tensor[(160), float32], %layers_16_conv1_weight: Tensor[(960, 160, 1, 1), float32], %layers_16_bn1_weight: Tensor[(960), float32], %layers_16_bn1_bias: Tensor[(960), float32], %layers_16_bn1_running_mean: Tensor[(960), float32], %layers_16_bn1_running_var: Tensor[(960), float32], %layers_16_conv2_weight: Tensor[(960, 1, 3, 3), float32], %layers_16_bn2_weight: Tensor[(960), float32], %layers_16_bn2_bias: Tensor[(960), float32], %layers_16_bn2_running_mean: Tensor[(960), float32], %layers_16_bn2_running_var: Tensor[(960), float32], %layers_16_conv3_weight: Tensor[(320, 960, 1, 1), float32], %layers_16_bn3_weight: Tensor[(320), float32], %layers_16_bn3_bias: Tensor[(320), float32], %layers_16_bn3_running_mean: Tensor[(320), float32], %layers_16_bn3_running_var: Tensor[(320), float32], %layers_16_shortcut_0_weight: Tensor[(320, 160, 1, 1), float32], %layers_16_shortcut_1_weight: Tensor[(320), float32], %layers_16_shortcut_1_bias: Tensor[(320), float32], %layers_16_shortcut_1_running_mean: Tensor[(320), float32], %layers_16_shortcut_1_running_var: Tensor[(320), float32], %conv2_weight: Tensor[(1280, 320, 1, 1), float32], %bn2_weight: Tensor[(1280), float32], %bn2_bias: Tensor[(1280), float32], %bn2_running_mean: Tensor[(1280), float32], %bn2_running_var: Tensor[(1280), float32], %linear_weight: Tensor[(10, 1280), float32], %linear_bias: Tensor[(10), float32]) -> Tensor[(1, 10), float32] {
  %0 = add(%bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %1 = sqrt(%0) /* ty=Tensor[(32), float32] */;
  %2 = divide(1f /* ty=float32 */, %1) /* ty=Tensor[(32), float32] */;
  %3 = multiply(%2, %bn1_weight) /* ty=Tensor[(32), float32] */;
  %4 = nn.conv2d(%input0, %conv1_weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %5 = expand_dims(%3, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %6 = negative(%bn1_running_mean) /* ty=Tensor[(32), float32] */;
  %7 = multiply(%6, %3) /* ty=Tensor[(32), float32] */;
  %8 = add(%7, %bn1_bias) /* ty=Tensor[(32), float32] */;
  %9 = multiply(%4, %5) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %10 = expand_dims(%8, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %11 = add(%9, %10) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %12 = nn.relu(%11) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %13 = add(%layers_0_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %14 = sqrt(%13) /* ty=Tensor[(32), float32] */;
  %15 = divide(1f /* ty=float32 */, %14) /* ty=Tensor[(32), float32] */;
  %16 = multiply(%15, %layers_0_bn1_weight) /* ty=Tensor[(32), float32] */;
  %17 = nn.conv2d(%12, %layers_0_conv1_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %18 = expand_dims(%16, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %19 = negative(%layers_0_bn1_running_mean) /* ty=Tensor[(32), float32] */;
  %20 = multiply(%19, %16) /* ty=Tensor[(32), float32] */;
  %21 = add(%20, %layers_0_bn1_bias) /* ty=Tensor[(32), float32] */;
  %22 = multiply(%17, %18) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %23 = expand_dims(%21, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %24 = add(%22, %23) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %25 = nn.relu(%24) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %26 = reshape(%layers_0_conv2_weight, newshape=[32, 1, 3, 3]) /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %27 = add(%layers_0_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %28 = sqrt(%27) /* ty=Tensor[(32), float32] */;
  %29 = divide(1f /* ty=float32 */, %28) /* ty=Tensor[(32), float32] */;
  %30 = multiply(%29, %layers_0_bn2_weight) /* ty=Tensor[(32), float32] */;
  %31 = nn.conv2d(%25, %26, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %32 = expand_dims(%30, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %33 = negative(%layers_0_bn2_running_mean) /* ty=Tensor[(32), float32] */;
  %34 = multiply(%33, %30) /* ty=Tensor[(32), float32] */;
  %35 = add(%34, %layers_0_bn2_bias) /* ty=Tensor[(32), float32] */;
  %36 = multiply(%31, %32) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %37 = expand_dims(%35, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %38 = add(%36, %37) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %39 = nn.relu(%38) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %40 = add(%layers_0_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(16), float32] */;
  %41 = sqrt(%40) /* ty=Tensor[(16), float32] */;
  %42 = divide(1f /* ty=float32 */, %41) /* ty=Tensor[(16), float32] */;
  %43 = multiply(%42, %layers_0_bn3_weight) /* ty=Tensor[(16), float32] */;
  %44 = nn.conv2d(%39, %layers_0_conv3_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %45 = expand_dims(%43, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %46 = negative(%layers_0_bn3_running_mean) /* ty=Tensor[(16), float32] */;
  %47 = multiply(%46, %43) /* ty=Tensor[(16), float32] */;
  %48 = add(%47, %layers_0_bn3_bias) /* ty=Tensor[(16), float32] */;
  %49 = multiply(%44, %45) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %50 = expand_dims(%48, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %51 = add(%layers_0_shortcut_1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(16), float32] */;
  %52 = sqrt(%51) /* ty=Tensor[(16), float32] */;
  %53 = divide(1f /* ty=float32 */, %52) /* ty=Tensor[(16), float32] */;
  %54 = multiply(%53, %layers_0_shortcut_1_weight) /* ty=Tensor[(16), float32] */;
  %55 = nn.conv2d(%12, %layers_0_shortcut_0_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %56 = expand_dims(%54, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %57 = negative(%layers_0_shortcut_1_running_mean) /* ty=Tensor[(16), float32] */;
  %58 = multiply(%57, %54) /* ty=Tensor[(16), float32] */;
  %59 = add(%58, %layers_0_shortcut_1_bias) /* ty=Tensor[(16), float32] */;
  %60 = multiply(%55, %56) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %61 = expand_dims(%59, axis=1, num_newaxis=2) /* ty=Tensor[(16, 1, 1), float32] */;
  %62 = add(%49, %50) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %63 = add(%60, %61) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %64 = add(%62, %63) /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %65 = add(%layers_1_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(96), float32] */;
  %66 = sqrt(%65) /* ty=Tensor[(96), float32] */;
  %67 = divide(1f /* ty=float32 */, %66) /* ty=Tensor[(96), float32] */;
  %68 = multiply(%67, %layers_1_bn1_weight) /* ty=Tensor[(96), float32] */;
  %69 = nn.conv2d(%64, %layers_1_conv1_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %70 = expand_dims(%68, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %71 = negative(%layers_1_bn1_running_mean) /* ty=Tensor[(96), float32] */;
  %72 = multiply(%71, %68) /* ty=Tensor[(96), float32] */;
  %73 = add(%72, %layers_1_bn1_bias) /* ty=Tensor[(96), float32] */;
  %74 = multiply(%69, %70) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %75 = expand_dims(%73, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %76 = add(%74, %75) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %77 = nn.relu(%76) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %78 = reshape(%layers_1_conv2_weight, newshape=[96, 1, 3, 3]) /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %79 = add(%layers_1_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(96), float32] */;
  %80 = sqrt(%79) /* ty=Tensor[(96), float32] */;
  %81 = divide(1f /* ty=float32 */, %80) /* ty=Tensor[(96), float32] */;
  %82 = multiply(%81, %layers_1_bn2_weight) /* ty=Tensor[(96), float32] */;
  %83 = nn.conv2d(%77, %78, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %84 = expand_dims(%82, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %85 = negative(%layers_1_bn2_running_mean) /* ty=Tensor[(96), float32] */;
  %86 = multiply(%85, %82) /* ty=Tensor[(96), float32] */;
  %87 = add(%86, %layers_1_bn2_bias) /* ty=Tensor[(96), float32] */;
  %88 = multiply(%83, %84) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %89 = expand_dims(%87, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %90 = add(%88, %89) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %91 = nn.relu(%90) /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %92 = add(%layers_1_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(24), float32] */;
  %93 = sqrt(%92) /* ty=Tensor[(24), float32] */;
  %94 = divide(1f /* ty=float32 */, %93) /* ty=Tensor[(24), float32] */;
  %95 = multiply(%94, %layers_1_bn3_weight) /* ty=Tensor[(24), float32] */;
  %96 = nn.conv2d(%91, %layers_1_conv3_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %97 = expand_dims(%95, axis=1, num_newaxis=2) /* ty=Tensor[(24, 1, 1), float32] */;
  %98 = negative(%layers_1_bn3_running_mean) /* ty=Tensor[(24), float32] */;
  %99 = multiply(%98, %95) /* ty=Tensor[(24), float32] */;
  %100 = add(%99, %layers_1_bn3_bias) /* ty=Tensor[(24), float32] */;
  %101 = multiply(%96, %97) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %102 = expand_dims(%100, axis=1, num_newaxis=2) /* ty=Tensor[(24, 1, 1), float32] */;
  %103 = add(%layers_1_shortcut_1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(24), float32] */;
  %104 = sqrt(%103) /* ty=Tensor[(24), float32] */;
  %105 = divide(1f /* ty=float32 */, %104) /* ty=Tensor[(24), float32] */;
  %106 = multiply(%105, %layers_1_shortcut_1_weight) /* ty=Tensor[(24), float32] */;
  %107 = nn.conv2d(%64, %layers_1_shortcut_0_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %108 = expand_dims(%106, axis=1, num_newaxis=2) /* ty=Tensor[(24, 1, 1), float32] */;
  %109 = negative(%layers_1_shortcut_1_running_mean) /* ty=Tensor[(24), float32] */;
  %110 = multiply(%109, %106) /* ty=Tensor[(24), float32] */;
  %111 = add(%110, %layers_1_shortcut_1_bias) /* ty=Tensor[(24), float32] */;
  %112 = multiply(%107, %108) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %113 = expand_dims(%111, axis=1, num_newaxis=2) /* ty=Tensor[(24, 1, 1), float32] */;
  %114 = add(%101, %102) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %115 = add(%112, %113) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %116 = add(%114, %115) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %117 = add(%layers_2_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(144), float32] */;
  %118 = sqrt(%117) /* ty=Tensor[(144), float32] */;
  %119 = divide(1f /* ty=float32 */, %118) /* ty=Tensor[(144), float32] */;
  %120 = multiply(%119, %layers_2_bn1_weight) /* ty=Tensor[(144), float32] */;
  %121 = nn.conv2d(%116, %layers_2_conv1_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %122 = expand_dims(%120, axis=1, num_newaxis=2) /* ty=Tensor[(144, 1, 1), float32] */;
  %123 = negative(%layers_2_bn1_running_mean) /* ty=Tensor[(144), float32] */;
  %124 = multiply(%123, %120) /* ty=Tensor[(144), float32] */;
  %125 = add(%124, %layers_2_bn1_bias) /* ty=Tensor[(144), float32] */;
  %126 = multiply(%121, %122) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %127 = expand_dims(%125, axis=1, num_newaxis=2) /* ty=Tensor[(144, 1, 1), float32] */;
  %128 = add(%126, %127) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %129 = nn.relu(%128) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %130 = reshape(%layers_2_conv2_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %131 = add(%layers_2_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(144), float32] */;
  %132 = sqrt(%131) /* ty=Tensor[(144), float32] */;
  %133 = divide(1f /* ty=float32 */, %132) /* ty=Tensor[(144), float32] */;
  %134 = multiply(%133, %layers_2_bn2_weight) /* ty=Tensor[(144), float32] */;
  %135 = nn.conv2d(%129, %130, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %136 = expand_dims(%134, axis=1, num_newaxis=2) /* ty=Tensor[(144, 1, 1), float32] */;
  %137 = negative(%layers_2_bn2_running_mean) /* ty=Tensor[(144), float32] */;
  %138 = multiply(%137, %134) /* ty=Tensor[(144), float32] */;
  %139 = add(%138, %layers_2_bn2_bias) /* ty=Tensor[(144), float32] */;
  %140 = multiply(%135, %136) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %141 = expand_dims(%139, axis=1, num_newaxis=2) /* ty=Tensor[(144, 1, 1), float32] */;
  %142 = add(%140, %141) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %143 = nn.relu(%142) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %144 = add(%layers_2_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(24), float32] */;
  %145 = sqrt(%144) /* ty=Tensor[(24), float32] */;
  %146 = divide(1f /* ty=float32 */, %145) /* ty=Tensor[(24), float32] */;
  %147 = multiply(%146, %layers_2_bn3_weight) /* ty=Tensor[(24), float32] */;
  %148 = nn.conv2d(%143, %layers_2_conv3_weight, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %149 = expand_dims(%147, axis=1, num_newaxis=2) /* ty=Tensor[(24, 1, 1), float32] */;
  %150 = negative(%layers_2_bn3_running_mean) /* ty=Tensor[(24), float32] */;
  %151 = multiply(%150, %147) /* ty=Tensor[(24), float32] */;
  %152 = add(%151, %layers_2_bn3_bias) /* ty=Tensor[(24), float32] */;
  %153 = multiply(%148, %149) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %154 = expand_dims(%152, axis=1, num_newaxis=2) /* ty=Tensor[(24, 1, 1), float32] */;
  %155 = add(%153, %154) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %156 = add(%155, %116) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %157 = add(%layers_3_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(144), float32] */;
  %158 = sqrt(%157) /* ty=Tensor[(144), float32] */;
  %159 = divide(1f /* ty=float32 */, %158) /* ty=Tensor[(144), float32] */;
  %160 = multiply(%159, %layers_3_bn1_weight) /* ty=Tensor[(144), float32] */;
  %161 = nn.conv2d(%156, %layers_3_conv1_weight, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %162 = expand_dims(%160, axis=1, num_newaxis=2) /* ty=Tensor[(144, 1, 1), float32] */;
  %163 = negative(%layers_3_bn1_running_mean) /* ty=Tensor[(144), float32] */;
  %164 = multiply(%163, %160) /* ty=Tensor[(144), float32] */;
  %165 = add(%164, %layers_3_bn1_bias) /* ty=Tensor[(144), float32] */;
  %166 = multiply(%161, %162) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %167 = expand_dims(%165, axis=1, num_newaxis=2) /* ty=Tensor[(144, 1, 1), float32] */;
  %168 = add(%166, %167) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %169 = nn.relu(%168) /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %170 = reshape(%layers_3_conv2_weight, newshape=[144, 1, 3, 3]) /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %171 = add(%layers_3_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(144), float32] */;
  %172 = sqrt(%171) /* ty=Tensor[(144), float32] */;
  %173 = divide(1f /* ty=float32 */, %172) /* ty=Tensor[(144), float32] */;
  %174 = multiply(%173, %layers_3_bn2_weight) /* ty=Tensor[(144), float32] */;
  %175 = nn.conv2d(%169, %170, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %176 = expand_dims(%174, axis=1, num_newaxis=2) /* ty=Tensor[(144, 1, 1), float32] */;
  %177 = negative(%layers_3_bn2_running_mean) /* ty=Tensor[(144), float32] */;
  %178 = multiply(%177, %174) /* ty=Tensor[(144), float32] */;
  %179 = add(%178, %layers_3_bn2_bias) /* ty=Tensor[(144), float32] */;
  %180 = multiply(%175, %176) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %181 = expand_dims(%179, axis=1, num_newaxis=2) /* ty=Tensor[(144, 1, 1), float32] */;
  %182 = add(%180, %181) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %183 = nn.relu(%182) /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %184 = add(%layers_3_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %185 = sqrt(%184) /* ty=Tensor[(32), float32] */;
  %186 = divide(1f /* ty=float32 */, %185) /* ty=Tensor[(32), float32] */;
  %187 = multiply(%186, %layers_3_bn3_weight) /* ty=Tensor[(32), float32] */;
  %188 = nn.conv2d(%183, %layers_3_conv3_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %189 = expand_dims(%187, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %190 = negative(%layers_3_bn3_running_mean) /* ty=Tensor[(32), float32] */;
  %191 = multiply(%190, %187) /* ty=Tensor[(32), float32] */;
  %192 = add(%191, %layers_3_bn3_bias) /* ty=Tensor[(32), float32] */;
  %193 = multiply(%188, %189) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %194 = expand_dims(%192, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %195 = add(%193, %194) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %196 = add(%layers_4_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(192), float32] */;
  %197 = sqrt(%196) /* ty=Tensor[(192), float32] */;
  %198 = divide(1f /* ty=float32 */, %197) /* ty=Tensor[(192), float32] */;
  %199 = multiply(%198, %layers_4_bn1_weight) /* ty=Tensor[(192), float32] */;
  %200 = nn.conv2d(%195, %layers_4_conv1_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %201 = expand_dims(%199, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %202 = negative(%layers_4_bn1_running_mean) /* ty=Tensor[(192), float32] */;
  %203 = multiply(%202, %199) /* ty=Tensor[(192), float32] */;
  %204 = add(%203, %layers_4_bn1_bias) /* ty=Tensor[(192), float32] */;
  %205 = multiply(%200, %201) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %206 = expand_dims(%204, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %207 = add(%205, %206) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %208 = nn.relu(%207) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %209 = reshape(%layers_4_conv2_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %210 = add(%layers_4_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(192), float32] */;
  %211 = sqrt(%210) /* ty=Tensor[(192), float32] */;
  %212 = divide(1f /* ty=float32 */, %211) /* ty=Tensor[(192), float32] */;
  %213 = multiply(%212, %layers_4_bn2_weight) /* ty=Tensor[(192), float32] */;
  %214 = nn.conv2d(%208, %209, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %215 = expand_dims(%213, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %216 = negative(%layers_4_bn2_running_mean) /* ty=Tensor[(192), float32] */;
  %217 = multiply(%216, %213) /* ty=Tensor[(192), float32] */;
  %218 = add(%217, %layers_4_bn2_bias) /* ty=Tensor[(192), float32] */;
  %219 = multiply(%214, %215) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %220 = expand_dims(%218, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %221 = add(%219, %220) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %222 = nn.relu(%221) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %223 = add(%layers_4_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %224 = sqrt(%223) /* ty=Tensor[(32), float32] */;
  %225 = divide(1f /* ty=float32 */, %224) /* ty=Tensor[(32), float32] */;
  %226 = multiply(%225, %layers_4_bn3_weight) /* ty=Tensor[(32), float32] */;
  %227 = nn.conv2d(%222, %layers_4_conv3_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %228 = expand_dims(%226, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %229 = negative(%layers_4_bn3_running_mean) /* ty=Tensor[(32), float32] */;
  %230 = multiply(%229, %226) /* ty=Tensor[(32), float32] */;
  %231 = add(%230, %layers_4_bn3_bias) /* ty=Tensor[(32), float32] */;
  %232 = multiply(%227, %228) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %233 = expand_dims(%231, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %234 = add(%232, %233) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %235 = add(%234, %195) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %236 = add(%layers_5_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(192), float32] */;
  %237 = sqrt(%236) /* ty=Tensor[(192), float32] */;
  %238 = divide(1f /* ty=float32 */, %237) /* ty=Tensor[(192), float32] */;
  %239 = multiply(%238, %layers_5_bn1_weight) /* ty=Tensor[(192), float32] */;
  %240 = nn.conv2d(%235, %layers_5_conv1_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %241 = expand_dims(%239, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %242 = negative(%layers_5_bn1_running_mean) /* ty=Tensor[(192), float32] */;
  %243 = multiply(%242, %239) /* ty=Tensor[(192), float32] */;
  %244 = add(%243, %layers_5_bn1_bias) /* ty=Tensor[(192), float32] */;
  %245 = multiply(%240, %241) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %246 = expand_dims(%244, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %247 = add(%245, %246) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %248 = nn.relu(%247) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %249 = reshape(%layers_5_conv2_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %250 = add(%layers_5_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(192), float32] */;
  %251 = sqrt(%250) /* ty=Tensor[(192), float32] */;
  %252 = divide(1f /* ty=float32 */, %251) /* ty=Tensor[(192), float32] */;
  %253 = multiply(%252, %layers_5_bn2_weight) /* ty=Tensor[(192), float32] */;
  %254 = nn.conv2d(%248, %249, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %255 = expand_dims(%253, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %256 = negative(%layers_5_bn2_running_mean) /* ty=Tensor[(192), float32] */;
  %257 = multiply(%256, %253) /* ty=Tensor[(192), float32] */;
  %258 = add(%257, %layers_5_bn2_bias) /* ty=Tensor[(192), float32] */;
  %259 = multiply(%254, %255) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %260 = expand_dims(%258, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %261 = add(%259, %260) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %262 = nn.relu(%261) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %263 = add(%layers_5_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(32), float32] */;
  %264 = sqrt(%263) /* ty=Tensor[(32), float32] */;
  %265 = divide(1f /* ty=float32 */, %264) /* ty=Tensor[(32), float32] */;
  %266 = multiply(%265, %layers_5_bn3_weight) /* ty=Tensor[(32), float32] */;
  %267 = nn.conv2d(%262, %layers_5_conv3_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %268 = expand_dims(%266, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %269 = negative(%layers_5_bn3_running_mean) /* ty=Tensor[(32), float32] */;
  %270 = multiply(%269, %266) /* ty=Tensor[(32), float32] */;
  %271 = add(%270, %layers_5_bn3_bias) /* ty=Tensor[(32), float32] */;
  %272 = multiply(%267, %268) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %273 = expand_dims(%271, axis=1, num_newaxis=2) /* ty=Tensor[(32, 1, 1), float32] */;
  %274 = add(%272, %273) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %275 = add(%274, %235) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %276 = add(%layers_6_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(192), float32] */;
  %277 = sqrt(%276) /* ty=Tensor[(192), float32] */;
  %278 = divide(1f /* ty=float32 */, %277) /* ty=Tensor[(192), float32] */;
  %279 = multiply(%278, %layers_6_bn1_weight) /* ty=Tensor[(192), float32] */;
  %280 = nn.conv2d(%275, %layers_6_conv1_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %281 = expand_dims(%279, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %282 = negative(%layers_6_bn1_running_mean) /* ty=Tensor[(192), float32] */;
  %283 = multiply(%282, %279) /* ty=Tensor[(192), float32] */;
  %284 = add(%283, %layers_6_bn1_bias) /* ty=Tensor[(192), float32] */;
  %285 = multiply(%280, %281) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %286 = expand_dims(%284, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %287 = add(%285, %286) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %288 = nn.relu(%287) /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %289 = reshape(%layers_6_conv2_weight, newshape=[192, 1, 3, 3]) /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %290 = add(%layers_6_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(192), float32] */;
  %291 = sqrt(%290) /* ty=Tensor[(192), float32] */;
  %292 = divide(1f /* ty=float32 */, %291) /* ty=Tensor[(192), float32] */;
  %293 = multiply(%292, %layers_6_bn2_weight) /* ty=Tensor[(192), float32] */;
  %294 = nn.conv2d(%288, %289, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %295 = expand_dims(%293, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %296 = negative(%layers_6_bn2_running_mean) /* ty=Tensor[(192), float32] */;
  %297 = multiply(%296, %293) /* ty=Tensor[(192), float32] */;
  %298 = add(%297, %layers_6_bn2_bias) /* ty=Tensor[(192), float32] */;
  %299 = multiply(%294, %295) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %300 = expand_dims(%298, axis=1, num_newaxis=2) /* ty=Tensor[(192, 1, 1), float32] */;
  %301 = add(%299, %300) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %302 = nn.relu(%301) /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %303 = add(%layers_6_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %304 = sqrt(%303) /* ty=Tensor[(64), float32] */;
  %305 = divide(1f /* ty=float32 */, %304) /* ty=Tensor[(64), float32] */;
  %306 = multiply(%305, %layers_6_bn3_weight) /* ty=Tensor[(64), float32] */;
  %307 = nn.conv2d(%302, %layers_6_conv3_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %308 = expand_dims(%306, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %309 = negative(%layers_6_bn3_running_mean) /* ty=Tensor[(64), float32] */;
  %310 = multiply(%309, %306) /* ty=Tensor[(64), float32] */;
  %311 = add(%310, %layers_6_bn3_bias) /* ty=Tensor[(64), float32] */;
  %312 = multiply(%307, %308) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %313 = expand_dims(%311, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %314 = add(%312, %313) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %315 = add(%layers_7_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(384), float32] */;
  %316 = sqrt(%315) /* ty=Tensor[(384), float32] */;
  %317 = divide(1f /* ty=float32 */, %316) /* ty=Tensor[(384), float32] */;
  %318 = multiply(%317, %layers_7_bn1_weight) /* ty=Tensor[(384), float32] */;
  %319 = nn.conv2d(%314, %layers_7_conv1_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %320 = expand_dims(%318, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %321 = negative(%layers_7_bn1_running_mean) /* ty=Tensor[(384), float32] */;
  %322 = multiply(%321, %318) /* ty=Tensor[(384), float32] */;
  %323 = add(%322, %layers_7_bn1_bias) /* ty=Tensor[(384), float32] */;
  %324 = multiply(%319, %320) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %325 = expand_dims(%323, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %326 = add(%324, %325) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %327 = nn.relu(%326) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %328 = reshape(%layers_7_conv2_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %329 = add(%layers_7_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(384), float32] */;
  %330 = sqrt(%329) /* ty=Tensor[(384), float32] */;
  %331 = divide(1f /* ty=float32 */, %330) /* ty=Tensor[(384), float32] */;
  %332 = multiply(%331, %layers_7_bn2_weight) /* ty=Tensor[(384), float32] */;
  %333 = nn.conv2d(%327, %328, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %334 = expand_dims(%332, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %335 = negative(%layers_7_bn2_running_mean) /* ty=Tensor[(384), float32] */;
  %336 = multiply(%335, %332) /* ty=Tensor[(384), float32] */;
  %337 = add(%336, %layers_7_bn2_bias) /* ty=Tensor[(384), float32] */;
  %338 = multiply(%333, %334) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %339 = expand_dims(%337, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %340 = add(%338, %339) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %341 = nn.relu(%340) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %342 = add(%layers_7_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %343 = sqrt(%342) /* ty=Tensor[(64), float32] */;
  %344 = divide(1f /* ty=float32 */, %343) /* ty=Tensor[(64), float32] */;
  %345 = multiply(%344, %layers_7_bn3_weight) /* ty=Tensor[(64), float32] */;
  %346 = nn.conv2d(%341, %layers_7_conv3_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %347 = expand_dims(%345, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %348 = negative(%layers_7_bn3_running_mean) /* ty=Tensor[(64), float32] */;
  %349 = multiply(%348, %345) /* ty=Tensor[(64), float32] */;
  %350 = add(%349, %layers_7_bn3_bias) /* ty=Tensor[(64), float32] */;
  %351 = multiply(%346, %347) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %352 = expand_dims(%350, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %353 = add(%351, %352) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %354 = add(%353, %314) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %355 = add(%layers_8_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(384), float32] */;
  %356 = sqrt(%355) /* ty=Tensor[(384), float32] */;
  %357 = divide(1f /* ty=float32 */, %356) /* ty=Tensor[(384), float32] */;
  %358 = multiply(%357, %layers_8_bn1_weight) /* ty=Tensor[(384), float32] */;
  %359 = nn.conv2d(%354, %layers_8_conv1_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %360 = expand_dims(%358, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %361 = negative(%layers_8_bn1_running_mean) /* ty=Tensor[(384), float32] */;
  %362 = multiply(%361, %358) /* ty=Tensor[(384), float32] */;
  %363 = add(%362, %layers_8_bn1_bias) /* ty=Tensor[(384), float32] */;
  %364 = multiply(%359, %360) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %365 = expand_dims(%363, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %366 = add(%364, %365) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %367 = nn.relu(%366) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %368 = reshape(%layers_8_conv2_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %369 = add(%layers_8_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(384), float32] */;
  %370 = sqrt(%369) /* ty=Tensor[(384), float32] */;
  %371 = divide(1f /* ty=float32 */, %370) /* ty=Tensor[(384), float32] */;
  %372 = multiply(%371, %layers_8_bn2_weight) /* ty=Tensor[(384), float32] */;
  %373 = nn.conv2d(%367, %368, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %374 = expand_dims(%372, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %375 = negative(%layers_8_bn2_running_mean) /* ty=Tensor[(384), float32] */;
  %376 = multiply(%375, %372) /* ty=Tensor[(384), float32] */;
  %377 = add(%376, %layers_8_bn2_bias) /* ty=Tensor[(384), float32] */;
  %378 = multiply(%373, %374) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %379 = expand_dims(%377, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %380 = add(%378, %379) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %381 = nn.relu(%380) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %382 = add(%layers_8_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %383 = sqrt(%382) /* ty=Tensor[(64), float32] */;
  %384 = divide(1f /* ty=float32 */, %383) /* ty=Tensor[(64), float32] */;
  %385 = multiply(%384, %layers_8_bn3_weight) /* ty=Tensor[(64), float32] */;
  %386 = nn.conv2d(%381, %layers_8_conv3_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %387 = expand_dims(%385, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %388 = negative(%layers_8_bn3_running_mean) /* ty=Tensor[(64), float32] */;
  %389 = multiply(%388, %385) /* ty=Tensor[(64), float32] */;
  %390 = add(%389, %layers_8_bn3_bias) /* ty=Tensor[(64), float32] */;
  %391 = multiply(%386, %387) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %392 = expand_dims(%390, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %393 = add(%391, %392) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %394 = add(%393, %354) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %395 = add(%layers_9_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(384), float32] */;
  %396 = sqrt(%395) /* ty=Tensor[(384), float32] */;
  %397 = divide(1f /* ty=float32 */, %396) /* ty=Tensor[(384), float32] */;
  %398 = multiply(%397, %layers_9_bn1_weight) /* ty=Tensor[(384), float32] */;
  %399 = nn.conv2d(%394, %layers_9_conv1_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %400 = expand_dims(%398, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %401 = negative(%layers_9_bn1_running_mean) /* ty=Tensor[(384), float32] */;
  %402 = multiply(%401, %398) /* ty=Tensor[(384), float32] */;
  %403 = add(%402, %layers_9_bn1_bias) /* ty=Tensor[(384), float32] */;
  %404 = multiply(%399, %400) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %405 = expand_dims(%403, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %406 = add(%404, %405) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %407 = nn.relu(%406) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %408 = reshape(%layers_9_conv2_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %409 = add(%layers_9_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(384), float32] */;
  %410 = sqrt(%409) /* ty=Tensor[(384), float32] */;
  %411 = divide(1f /* ty=float32 */, %410) /* ty=Tensor[(384), float32] */;
  %412 = multiply(%411, %layers_9_bn2_weight) /* ty=Tensor[(384), float32] */;
  %413 = nn.conv2d(%407, %408, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %414 = expand_dims(%412, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %415 = negative(%layers_9_bn2_running_mean) /* ty=Tensor[(384), float32] */;
  %416 = multiply(%415, %412) /* ty=Tensor[(384), float32] */;
  %417 = add(%416, %layers_9_bn2_bias) /* ty=Tensor[(384), float32] */;
  %418 = multiply(%413, %414) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %419 = expand_dims(%417, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %420 = add(%418, %419) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %421 = nn.relu(%420) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %422 = add(%layers_9_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(64), float32] */;
  %423 = sqrt(%422) /* ty=Tensor[(64), float32] */;
  %424 = divide(1f /* ty=float32 */, %423) /* ty=Tensor[(64), float32] */;
  %425 = multiply(%424, %layers_9_bn3_weight) /* ty=Tensor[(64), float32] */;
  %426 = nn.conv2d(%421, %layers_9_conv3_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %427 = expand_dims(%425, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %428 = negative(%layers_9_bn3_running_mean) /* ty=Tensor[(64), float32] */;
  %429 = multiply(%428, %425) /* ty=Tensor[(64), float32] */;
  %430 = add(%429, %layers_9_bn3_bias) /* ty=Tensor[(64), float32] */;
  %431 = multiply(%426, %427) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %432 = expand_dims(%430, axis=1, num_newaxis=2) /* ty=Tensor[(64, 1, 1), float32] */;
  %433 = add(%431, %432) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %434 = add(%433, %394) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %435 = add(%layers_10_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(384), float32] */;
  %436 = sqrt(%435) /* ty=Tensor[(384), float32] */;
  %437 = divide(1f /* ty=float32 */, %436) /* ty=Tensor[(384), float32] */;
  %438 = multiply(%437, %layers_10_bn1_weight) /* ty=Tensor[(384), float32] */;
  %439 = nn.conv2d(%434, %layers_10_conv1_weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %440 = expand_dims(%438, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %441 = negative(%layers_10_bn1_running_mean) /* ty=Tensor[(384), float32] */;
  %442 = multiply(%441, %438) /* ty=Tensor[(384), float32] */;
  %443 = add(%442, %layers_10_bn1_bias) /* ty=Tensor[(384), float32] */;
  %444 = multiply(%439, %440) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %445 = expand_dims(%443, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %446 = add(%444, %445) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %447 = nn.relu(%446) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %448 = reshape(%layers_10_conv2_weight, newshape=[384, 1, 3, 3]) /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %449 = add(%layers_10_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(384), float32] */;
  %450 = sqrt(%449) /* ty=Tensor[(384), float32] */;
  %451 = divide(1f /* ty=float32 */, %450) /* ty=Tensor[(384), float32] */;
  %452 = multiply(%451, %layers_10_bn2_weight) /* ty=Tensor[(384), float32] */;
  %453 = nn.conv2d(%447, %448, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %454 = expand_dims(%452, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %455 = negative(%layers_10_bn2_running_mean) /* ty=Tensor[(384), float32] */;
  %456 = multiply(%455, %452) /* ty=Tensor[(384), float32] */;
  %457 = add(%456, %layers_10_bn2_bias) /* ty=Tensor[(384), float32] */;
  %458 = multiply(%453, %454) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %459 = expand_dims(%457, axis=1, num_newaxis=2) /* ty=Tensor[(384, 1, 1), float32] */;
  %460 = add(%458, %459) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %461 = nn.relu(%460) /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %462 = add(%layers_10_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(96), float32] */;
  %463 = sqrt(%462) /* ty=Tensor[(96), float32] */;
  %464 = divide(1f /* ty=float32 */, %463) /* ty=Tensor[(96), float32] */;
  %465 = multiply(%464, %layers_10_bn3_weight) /* ty=Tensor[(96), float32] */;
  %466 = nn.conv2d(%461, %layers_10_conv3_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %467 = expand_dims(%465, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %468 = negative(%layers_10_bn3_running_mean) /* ty=Tensor[(96), float32] */;
  %469 = multiply(%468, %465) /* ty=Tensor[(96), float32] */;
  %470 = add(%469, %layers_10_bn3_bias) /* ty=Tensor[(96), float32] */;
  %471 = multiply(%466, %467) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %472 = expand_dims(%470, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %473 = add(%layers_10_shortcut_1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(96), float32] */;
  %474 = sqrt(%473) /* ty=Tensor[(96), float32] */;
  %475 = divide(1f /* ty=float32 */, %474) /* ty=Tensor[(96), float32] */;
  %476 = multiply(%475, %layers_10_shortcut_1_weight) /* ty=Tensor[(96), float32] */;
  %477 = nn.conv2d(%434, %layers_10_shortcut_0_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %478 = expand_dims(%476, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %479 = negative(%layers_10_shortcut_1_running_mean) /* ty=Tensor[(96), float32] */;
  %480 = multiply(%479, %476) /* ty=Tensor[(96), float32] */;
  %481 = add(%480, %layers_10_shortcut_1_bias) /* ty=Tensor[(96), float32] */;
  %482 = multiply(%477, %478) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %483 = expand_dims(%481, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %484 = add(%471, %472) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %485 = add(%482, %483) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %486 = add(%484, %485) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %487 = add(%layers_11_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(576), float32] */;
  %488 = sqrt(%487) /* ty=Tensor[(576), float32] */;
  %489 = divide(1f /* ty=float32 */, %488) /* ty=Tensor[(576), float32] */;
  %490 = multiply(%489, %layers_11_bn1_weight) /* ty=Tensor[(576), float32] */;
  %491 = nn.conv2d(%486, %layers_11_conv1_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %492 = expand_dims(%490, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %493 = negative(%layers_11_bn1_running_mean) /* ty=Tensor[(576), float32] */;
  %494 = multiply(%493, %490) /* ty=Tensor[(576), float32] */;
  %495 = add(%494, %layers_11_bn1_bias) /* ty=Tensor[(576), float32] */;
  %496 = multiply(%491, %492) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %497 = expand_dims(%495, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %498 = add(%496, %497) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %499 = nn.relu(%498) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %500 = reshape(%layers_11_conv2_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %501 = add(%layers_11_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(576), float32] */;
  %502 = sqrt(%501) /* ty=Tensor[(576), float32] */;
  %503 = divide(1f /* ty=float32 */, %502) /* ty=Tensor[(576), float32] */;
  %504 = multiply(%503, %layers_11_bn2_weight) /* ty=Tensor[(576), float32] */;
  %505 = nn.conv2d(%499, %500, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %506 = expand_dims(%504, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %507 = negative(%layers_11_bn2_running_mean) /* ty=Tensor[(576), float32] */;
  %508 = multiply(%507, %504) /* ty=Tensor[(576), float32] */;
  %509 = add(%508, %layers_11_bn2_bias) /* ty=Tensor[(576), float32] */;
  %510 = multiply(%505, %506) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %511 = expand_dims(%509, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %512 = add(%510, %511) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %513 = nn.relu(%512) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %514 = add(%layers_11_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(96), float32] */;
  %515 = sqrt(%514) /* ty=Tensor[(96), float32] */;
  %516 = divide(1f /* ty=float32 */, %515) /* ty=Tensor[(96), float32] */;
  %517 = multiply(%516, %layers_11_bn3_weight) /* ty=Tensor[(96), float32] */;
  %518 = nn.conv2d(%513, %layers_11_conv3_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %519 = expand_dims(%517, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %520 = negative(%layers_11_bn3_running_mean) /* ty=Tensor[(96), float32] */;
  %521 = multiply(%520, %517) /* ty=Tensor[(96), float32] */;
  %522 = add(%521, %layers_11_bn3_bias) /* ty=Tensor[(96), float32] */;
  %523 = multiply(%518, %519) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %524 = expand_dims(%522, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %525 = add(%523, %524) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %526 = add(%525, %486) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %527 = add(%layers_12_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(576), float32] */;
  %528 = sqrt(%527) /* ty=Tensor[(576), float32] */;
  %529 = divide(1f /* ty=float32 */, %528) /* ty=Tensor[(576), float32] */;
  %530 = multiply(%529, %layers_12_bn1_weight) /* ty=Tensor[(576), float32] */;
  %531 = nn.conv2d(%526, %layers_12_conv1_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %532 = expand_dims(%530, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %533 = negative(%layers_12_bn1_running_mean) /* ty=Tensor[(576), float32] */;
  %534 = multiply(%533, %530) /* ty=Tensor[(576), float32] */;
  %535 = add(%534, %layers_12_bn1_bias) /* ty=Tensor[(576), float32] */;
  %536 = multiply(%531, %532) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %537 = expand_dims(%535, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %538 = add(%536, %537) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %539 = nn.relu(%538) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %540 = reshape(%layers_12_conv2_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %541 = add(%layers_12_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(576), float32] */;
  %542 = sqrt(%541) /* ty=Tensor[(576), float32] */;
  %543 = divide(1f /* ty=float32 */, %542) /* ty=Tensor[(576), float32] */;
  %544 = multiply(%543, %layers_12_bn2_weight) /* ty=Tensor[(576), float32] */;
  %545 = nn.conv2d(%539, %540, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %546 = expand_dims(%544, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %547 = negative(%layers_12_bn2_running_mean) /* ty=Tensor[(576), float32] */;
  %548 = multiply(%547, %544) /* ty=Tensor[(576), float32] */;
  %549 = add(%548, %layers_12_bn2_bias) /* ty=Tensor[(576), float32] */;
  %550 = multiply(%545, %546) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %551 = expand_dims(%549, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %552 = add(%550, %551) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %553 = nn.relu(%552) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %554 = add(%layers_12_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(96), float32] */;
  %555 = sqrt(%554) /* ty=Tensor[(96), float32] */;
  %556 = divide(1f /* ty=float32 */, %555) /* ty=Tensor[(96), float32] */;
  %557 = multiply(%556, %layers_12_bn3_weight) /* ty=Tensor[(96), float32] */;
  %558 = nn.conv2d(%553, %layers_12_conv3_weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %559 = expand_dims(%557, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %560 = negative(%layers_12_bn3_running_mean) /* ty=Tensor[(96), float32] */;
  %561 = multiply(%560, %557) /* ty=Tensor[(96), float32] */;
  %562 = add(%561, %layers_12_bn3_bias) /* ty=Tensor[(96), float32] */;
  %563 = multiply(%558, %559) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %564 = expand_dims(%562, axis=1, num_newaxis=2) /* ty=Tensor[(96, 1, 1), float32] */;
  %565 = add(%563, %564) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %566 = add(%565, %526) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %567 = add(%layers_13_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(576), float32] */;
  %568 = sqrt(%567) /* ty=Tensor[(576), float32] */;
  %569 = divide(1f /* ty=float32 */, %568) /* ty=Tensor[(576), float32] */;
  %570 = multiply(%569, %layers_13_bn1_weight) /* ty=Tensor[(576), float32] */;
  %571 = nn.conv2d(%566, %layers_13_conv1_weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %572 = expand_dims(%570, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %573 = negative(%layers_13_bn1_running_mean) /* ty=Tensor[(576), float32] */;
  %574 = multiply(%573, %570) /* ty=Tensor[(576), float32] */;
  %575 = add(%574, %layers_13_bn1_bias) /* ty=Tensor[(576), float32] */;
  %576 = multiply(%571, %572) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %577 = expand_dims(%575, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %578 = add(%576, %577) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %579 = nn.relu(%578) /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %580 = reshape(%layers_13_conv2_weight, newshape=[576, 1, 3, 3]) /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %581 = add(%layers_13_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(576), float32] */;
  %582 = sqrt(%581) /* ty=Tensor[(576), float32] */;
  %583 = divide(1f /* ty=float32 */, %582) /* ty=Tensor[(576), float32] */;
  %584 = multiply(%583, %layers_13_bn2_weight) /* ty=Tensor[(576), float32] */;
  %585 = nn.conv2d(%579, %580, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %586 = expand_dims(%584, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %587 = negative(%layers_13_bn2_running_mean) /* ty=Tensor[(576), float32] */;
  %588 = multiply(%587, %584) /* ty=Tensor[(576), float32] */;
  %589 = add(%588, %layers_13_bn2_bias) /* ty=Tensor[(576), float32] */;
  %590 = multiply(%585, %586) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %591 = expand_dims(%589, axis=1, num_newaxis=2) /* ty=Tensor[(576, 1, 1), float32] */;
  %592 = add(%590, %591) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %593 = nn.relu(%592) /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %594 = add(%layers_13_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(160), float32] */;
  %595 = sqrt(%594) /* ty=Tensor[(160), float32] */;
  %596 = divide(1f /* ty=float32 */, %595) /* ty=Tensor[(160), float32] */;
  %597 = multiply(%596, %layers_13_bn3_weight) /* ty=Tensor[(160), float32] */;
  %598 = nn.conv2d(%593, %layers_13_conv3_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %599 = expand_dims(%597, axis=1, num_newaxis=2) /* ty=Tensor[(160, 1, 1), float32] */;
  %600 = negative(%layers_13_bn3_running_mean) /* ty=Tensor[(160), float32] */;
  %601 = multiply(%600, %597) /* ty=Tensor[(160), float32] */;
  %602 = add(%601, %layers_13_bn3_bias) /* ty=Tensor[(160), float32] */;
  %603 = multiply(%598, %599) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %604 = expand_dims(%602, axis=1, num_newaxis=2) /* ty=Tensor[(160, 1, 1), float32] */;
  %605 = add(%603, %604) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %606 = add(%layers_14_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(960), float32] */;
  %607 = sqrt(%606) /* ty=Tensor[(960), float32] */;
  %608 = divide(1f /* ty=float32 */, %607) /* ty=Tensor[(960), float32] */;
  %609 = multiply(%608, %layers_14_bn1_weight) /* ty=Tensor[(960), float32] */;
  %610 = nn.conv2d(%605, %layers_14_conv1_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %611 = expand_dims(%609, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %612 = negative(%layers_14_bn1_running_mean) /* ty=Tensor[(960), float32] */;
  %613 = multiply(%612, %609) /* ty=Tensor[(960), float32] */;
  %614 = add(%613, %layers_14_bn1_bias) /* ty=Tensor[(960), float32] */;
  %615 = multiply(%610, %611) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %616 = expand_dims(%614, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %617 = add(%615, %616) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %618 = nn.relu(%617) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %619 = reshape(%layers_14_conv2_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %620 = add(%layers_14_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(960), float32] */;
  %621 = sqrt(%620) /* ty=Tensor[(960), float32] */;
  %622 = divide(1f /* ty=float32 */, %621) /* ty=Tensor[(960), float32] */;
  %623 = multiply(%622, %layers_14_bn2_weight) /* ty=Tensor[(960), float32] */;
  %624 = nn.conv2d(%618, %619, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %625 = expand_dims(%623, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %626 = negative(%layers_14_bn2_running_mean) /* ty=Tensor[(960), float32] */;
  %627 = multiply(%626, %623) /* ty=Tensor[(960), float32] */;
  %628 = add(%627, %layers_14_bn2_bias) /* ty=Tensor[(960), float32] */;
  %629 = multiply(%624, %625) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %630 = expand_dims(%628, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %631 = add(%629, %630) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %632 = nn.relu(%631) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %633 = add(%layers_14_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(160), float32] */;
  %634 = sqrt(%633) /* ty=Tensor[(160), float32] */;
  %635 = divide(1f /* ty=float32 */, %634) /* ty=Tensor[(160), float32] */;
  %636 = multiply(%635, %layers_14_bn3_weight) /* ty=Tensor[(160), float32] */;
  %637 = nn.conv2d(%632, %layers_14_conv3_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %638 = expand_dims(%636, axis=1, num_newaxis=2) /* ty=Tensor[(160, 1, 1), float32] */;
  %639 = negative(%layers_14_bn3_running_mean) /* ty=Tensor[(160), float32] */;
  %640 = multiply(%639, %636) /* ty=Tensor[(160), float32] */;
  %641 = add(%640, %layers_14_bn3_bias) /* ty=Tensor[(160), float32] */;
  %642 = multiply(%637, %638) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %643 = expand_dims(%641, axis=1, num_newaxis=2) /* ty=Tensor[(160, 1, 1), float32] */;
  %644 = add(%642, %643) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %645 = add(%644, %605) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %646 = add(%layers_15_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(960), float32] */;
  %647 = sqrt(%646) /* ty=Tensor[(960), float32] */;
  %648 = divide(1f /* ty=float32 */, %647) /* ty=Tensor[(960), float32] */;
  %649 = multiply(%648, %layers_15_bn1_weight) /* ty=Tensor[(960), float32] */;
  %650 = nn.conv2d(%645, %layers_15_conv1_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %651 = expand_dims(%649, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %652 = negative(%layers_15_bn1_running_mean) /* ty=Tensor[(960), float32] */;
  %653 = multiply(%652, %649) /* ty=Tensor[(960), float32] */;
  %654 = add(%653, %layers_15_bn1_bias) /* ty=Tensor[(960), float32] */;
  %655 = multiply(%650, %651) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %656 = expand_dims(%654, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %657 = add(%655, %656) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %658 = nn.relu(%657) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %659 = reshape(%layers_15_conv2_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %660 = add(%layers_15_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(960), float32] */;
  %661 = sqrt(%660) /* ty=Tensor[(960), float32] */;
  %662 = divide(1f /* ty=float32 */, %661) /* ty=Tensor[(960), float32] */;
  %663 = multiply(%662, %layers_15_bn2_weight) /* ty=Tensor[(960), float32] */;
  %664 = nn.conv2d(%658, %659, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %665 = expand_dims(%663, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %666 = negative(%layers_15_bn2_running_mean) /* ty=Tensor[(960), float32] */;
  %667 = multiply(%666, %663) /* ty=Tensor[(960), float32] */;
  %668 = add(%667, %layers_15_bn2_bias) /* ty=Tensor[(960), float32] */;
  %669 = multiply(%664, %665) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %670 = expand_dims(%668, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %671 = add(%669, %670) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %672 = nn.relu(%671) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %673 = add(%layers_15_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(160), float32] */;
  %674 = sqrt(%673) /* ty=Tensor[(160), float32] */;
  %675 = divide(1f /* ty=float32 */, %674) /* ty=Tensor[(160), float32] */;
  %676 = multiply(%675, %layers_15_bn3_weight) /* ty=Tensor[(160), float32] */;
  %677 = nn.conv2d(%672, %layers_15_conv3_weight, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %678 = expand_dims(%676, axis=1, num_newaxis=2) /* ty=Tensor[(160, 1, 1), float32] */;
  %679 = negative(%layers_15_bn3_running_mean) /* ty=Tensor[(160), float32] */;
  %680 = multiply(%679, %676) /* ty=Tensor[(160), float32] */;
  %681 = add(%680, %layers_15_bn3_bias) /* ty=Tensor[(160), float32] */;
  %682 = multiply(%677, %678) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %683 = expand_dims(%681, axis=1, num_newaxis=2) /* ty=Tensor[(160, 1, 1), float32] */;
  %684 = add(%682, %683) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %685 = add(%684, %645) /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %686 = add(%layers_16_bn1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(960), float32] */;
  %687 = sqrt(%686) /* ty=Tensor[(960), float32] */;
  %688 = divide(1f /* ty=float32 */, %687) /* ty=Tensor[(960), float32] */;
  %689 = multiply(%688, %layers_16_bn1_weight) /* ty=Tensor[(960), float32] */;
  %690 = nn.conv2d(%685, %layers_16_conv1_weight, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %691 = expand_dims(%689, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %692 = negative(%layers_16_bn1_running_mean) /* ty=Tensor[(960), float32] */;
  %693 = multiply(%692, %689) /* ty=Tensor[(960), float32] */;
  %694 = add(%693, %layers_16_bn1_bias) /* ty=Tensor[(960), float32] */;
  %695 = multiply(%690, %691) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %696 = expand_dims(%694, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %697 = add(%695, %696) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %698 = nn.relu(%697) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %699 = reshape(%layers_16_conv2_weight, newshape=[960, 1, 3, 3]) /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %700 = add(%layers_16_bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(960), float32] */;
  %701 = sqrt(%700) /* ty=Tensor[(960), float32] */;
  %702 = divide(1f /* ty=float32 */, %701) /* ty=Tensor[(960), float32] */;
  %703 = multiply(%702, %layers_16_bn2_weight) /* ty=Tensor[(960), float32] */;
  %704 = nn.conv2d(%698, %699, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %705 = expand_dims(%703, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %706 = negative(%layers_16_bn2_running_mean) /* ty=Tensor[(960), float32] */;
  %707 = multiply(%706, %703) /* ty=Tensor[(960), float32] */;
  %708 = add(%707, %layers_16_bn2_bias) /* ty=Tensor[(960), float32] */;
  %709 = multiply(%704, %705) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %710 = expand_dims(%708, axis=1, num_newaxis=2) /* ty=Tensor[(960, 1, 1), float32] */;
  %711 = add(%709, %710) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %712 = nn.relu(%711) /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %713 = add(%layers_16_bn3_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(320), float32] */;
  %714 = sqrt(%713) /* ty=Tensor[(320), float32] */;
  %715 = divide(1f /* ty=float32 */, %714) /* ty=Tensor[(320), float32] */;
  %716 = multiply(%715, %layers_16_bn3_weight) /* ty=Tensor[(320), float32] */;
  %717 = nn.conv2d(%712, %layers_16_conv3_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %718 = expand_dims(%716, axis=1, num_newaxis=2) /* ty=Tensor[(320, 1, 1), float32] */;
  %719 = negative(%layers_16_bn3_running_mean) /* ty=Tensor[(320), float32] */;
  %720 = multiply(%719, %716) /* ty=Tensor[(320), float32] */;
  %721 = add(%720, %layers_16_bn3_bias) /* ty=Tensor[(320), float32] */;
  %722 = multiply(%717, %718) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %723 = expand_dims(%721, axis=1, num_newaxis=2) /* ty=Tensor[(320, 1, 1), float32] */;
  %724 = add(%layers_16_shortcut_1_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(320), float32] */;
  %725 = sqrt(%724) /* ty=Tensor[(320), float32] */;
  %726 = divide(1f /* ty=float32 */, %725) /* ty=Tensor[(320), float32] */;
  %727 = multiply(%726, %layers_16_shortcut_1_weight) /* ty=Tensor[(320), float32] */;
  %728 = nn.conv2d(%685, %layers_16_shortcut_0_weight, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %729 = expand_dims(%727, axis=1, num_newaxis=2) /* ty=Tensor[(320, 1, 1), float32] */;
  %730 = negative(%layers_16_shortcut_1_running_mean) /* ty=Tensor[(320), float32] */;
  %731 = multiply(%730, %727) /* ty=Tensor[(320), float32] */;
  %732 = add(%731, %layers_16_shortcut_1_bias) /* ty=Tensor[(320), float32] */;
  %733 = multiply(%728, %729) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %734 = expand_dims(%732, axis=1, num_newaxis=2) /* ty=Tensor[(320, 1, 1), float32] */;
  %735 = add(%722, %723) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %736 = add(%733, %734) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %737 = add(%735, %736) /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %738 = add(%bn2_running_var, 1e-05f /* ty=float32 */) /* ty=Tensor[(1280), float32] */;
  %739 = sqrt(%738) /* ty=Tensor[(1280), float32] */;
  %740 = divide(1f /* ty=float32 */, %739) /* ty=Tensor[(1280), float32] */;
  %741 = multiply(%740, %bn2_weight) /* ty=Tensor[(1280), float32] */;
  %742 = nn.conv2d(%737, %conv2_weight, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %743 = expand_dims(%741, axis=1, num_newaxis=2) /* ty=Tensor[(1280, 1, 1), float32] */;
  %744 = negative(%bn2_running_mean) /* ty=Tensor[(1280), float32] */;
  %745 = multiply(%744, %741) /* ty=Tensor[(1280), float32] */;
  %746 = add(%745, %bn2_bias) /* ty=Tensor[(1280), float32] */;
  %747 = multiply(%742, %743) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %748 = expand_dims(%746, axis=1, num_newaxis=2) /* ty=Tensor[(1280, 1, 1), float32] */;
  %749 = add(%747, %748) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %750 = nn.relu(%749) /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %751 = nn.avg_pool2d(%750, pool_size=[4, 4], strides=[4, 4], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %752 = transpose(%linear_weight, axes=[1, 0]) /* ty=Tensor[(1280, 10), float32] */;
  %753 = reshape(%751, newshape=[1, -1]) /* ty=Tensor[(1, 1280), float32] */;
  %754 = transpose(%752, axes=[1, 0]) /* ty=Tensor[(10, 1280), float32] */;
  %755 = nn.dense(%753, %754, units=10) /* ty=Tensor[(1, 10), float32] */;
  add(%755, %linear_bias) /* ty=Tensor[(1, 10), float32] */
}
