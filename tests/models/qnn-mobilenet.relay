#[version = "0.0.5"]
def @main(%input: Tensor[(1, 224, 224, 3), uint8], %v_param_1: Tensor[(3, 3, 3, 32), uint8], %v_param_2: Tensor[(32), int32], %v_param_3: Tensor[(3, 3, 32, 1), uint8], %v_param_4: Tensor[(32), int32], %v_param_5: Tensor[(1, 1, 32, 16), uint8], %v_param_6: Tensor[(16), int32], %v_param_7: Tensor[(1, 1, 16, 96), uint8], %v_param_8: Tensor[(96), int32], %v_param_9: Tensor[(3, 3, 96, 1), uint8], %v_param_10: Tensor[(96), int32], %v_param_11: Tensor[(1, 1, 96, 24), uint8], %v_param_12: Tensor[(24), int32], %v_param_13: Tensor[(1, 1, 24, 144), uint8], %v_param_14: Tensor[(144), int32], %v_param_15: Tensor[(3, 3, 144, 1), uint8], %v_param_16: Tensor[(144), int32], %v_param_17: Tensor[(1, 1, 144, 24), uint8], %v_param_18: Tensor[(24), int32], %v_param_19: Tensor[(1, 1, 24, 144), uint8], %v_param_20: Tensor[(144), int32], %v_param_21: Tensor[(3, 3, 144, 1), uint8], %v_param_22: Tensor[(144), int32], %v_param_23: Tensor[(1, 1, 144, 32), uint8], %v_param_24: Tensor[(32), int32], %v_param_25: Tensor[(1, 1, 32, 192), uint8], %v_param_26: Tensor[(192), int32], %v_param_27: Tensor[(3, 3, 192, 1), uint8], %v_param_28: Tensor[(192), int32], %v_param_29: Tensor[(1, 1, 192, 32), uint8], %v_param_30: Tensor[(32), int32], %v_param_31: Tensor[(1, 1, 32, 192), uint8], %v_param_32: Tensor[(192), int32], %v_param_33: Tensor[(3, 3, 192, 1), uint8], %v_param_34: Tensor[(192), int32], %v_param_35: Tensor[(1, 1, 192, 32), uint8], %v_param_36: Tensor[(32), int32], %v_param_37: Tensor[(1, 1, 32, 192), uint8], %v_param_38: Tensor[(192), int32], %v_param_39: Tensor[(3, 3, 192, 1), uint8], %v_param_40: Tensor[(192), int32], %v_param_41: Tensor[(1, 1, 192, 64), uint8], %v_param_42: Tensor[(64), int32], %v_param_43: Tensor[(1, 1, 64, 384), uint8], %v_param_44: Tensor[(384), int32], %v_param_45: Tensor[(3, 3, 384, 1), uint8], %v_param_46: Tensor[(384), int32], %v_param_47: Tensor[(1, 1, 384, 64), uint8], %v_param_48: Tensor[(64), int32], %v_param_49: Tensor[(1, 1, 64, 384), uint8], %v_param_50: Tensor[(384), int32], %v_param_51: Tensor[(3, 3, 384, 1), uint8], %v_param_52: Tensor[(384), int32], %v_param_53: Tensor[(1, 1, 384, 64), uint8], %v_param_54: Tensor[(64), int32], %v_param_55: Tensor[(1, 1, 64, 384), uint8], %v_param_56: Tensor[(384), int32], %v_param_57: Tensor[(3, 3, 384, 1), uint8], %v_param_58: Tensor[(384), int32], %v_param_59: Tensor[(1, 1, 384, 64), uint8], %v_param_60: Tensor[(64), int32], %v_param_61: Tensor[(1, 1, 64, 384), uint8], %v_param_62: Tensor[(384), int32], %v_param_63: Tensor[(3, 3, 384, 1), uint8], %v_param_64: Tensor[(384), int32], %v_param_65: Tensor[(1, 1, 384, 96), uint8], %v_param_66: Tensor[(96), int32], %v_param_67: Tensor[(1, 1, 96, 576), uint8], %v_param_68: Tensor[(576), int32], %v_param_69: Tensor[(3, 3, 576, 1), uint8], %v_param_70: Tensor[(576), int32], %v_param_71: Tensor[(1, 1, 576, 96), uint8], %v_param_72: Tensor[(96), int32], %v_param_73: Tensor[(1, 1, 96, 576), uint8], %v_param_74: Tensor[(576), int32], %v_param_75: Tensor[(3, 3, 576, 1), uint8], %v_param_76: Tensor[(576), int32], %v_param_77: Tensor[(1, 1, 576, 96), uint8], %v_param_78: Tensor[(96), int32], %v_param_79: Tensor[(1, 1, 96, 576), uint8], %v_param_80: Tensor[(576), int32], %v_param_81: Tensor[(3, 3, 576, 1), uint8], %v_param_82: Tensor[(576), int32], %v_param_83: Tensor[(1, 1, 576, 160), uint8], %v_param_84: Tensor[(160), int32], %v_param_85: Tensor[(1, 1, 160, 960), uint8], %v_param_86: Tensor[(960), int32], %v_param_87: Tensor[(3, 3, 960, 1), uint8], %v_param_88: Tensor[(960), int32], %v_param_89: Tensor[(1, 1, 960, 160), uint8], %v_param_90: Tensor[(160), int32], %v_param_91: Tensor[(1, 1, 160, 960), uint8], %v_param_92: Tensor[(960), int32], %v_param_93: Tensor[(3, 3, 960, 1), uint8], %v_param_94: Tensor[(960), int32], %v_param_95: Tensor[(1, 1, 960, 160), uint8], %v_param_96: Tensor[(160), int32], %v_param_97: Tensor[(1, 1, 160, 960), uint8], %v_param_98: Tensor[(960), int32], %v_param_99: Tensor[(3, 3, 960, 1), uint8], %v_param_100: Tensor[(960), int32], %v_param_101: Tensor[(1, 1, 960, 320), uint8], %v_param_102: Tensor[(320), int32], %v_param_103: Tensor[(1, 1, 320, 1280), uint8], %v_param_104: Tensor[(1280), int32], %v_param_105: Tensor[(1, 1, 1280, 1001), uint8], %v_param_106: Tensor[(1001), int32]) {
  %0 = qnn.conv2d(%input, %v_param_1, 128, 122, 0.0078125f, 0.0339689f, strides=[2, 2], padding=[0, 0, 1, 1], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %1 = nn.bias_add(%0, %v_param_2, axis=3);
  %2 = qnn.requantize(%1, 0.000265382f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %3 = qnn.conv2d(%2, %v_param_3, 0, 165, 0.0235285f, 0.343696f, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %4 = nn.bias_add(%3, %v_param_4, axis=3);
  %5 = qnn.requantize(%4, 0.00808663f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %6 = qnn.conv2d(%5, %v_param_5, 0, 140, 0.0235285f, 0.0373718f, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %7 = nn.bias_add(%6, %v_param_6, axis=3);
  %8 = qnn.requantize(%7, 0.0008793f, 0, 0.354413f, 129, axis=3, out_dtype="uint8");
  %9 = qnn.conv2d(%8, %v_param_7, 129, 127, 0.354413f, 0.00975851f, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %10 = nn.bias_add(%9, %v_param_8, axis=3);
  %11 = qnn.requantize(%10, 0.00345855f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %12 = qnn.conv2d(%11, %v_param_9, 0, 109, 0.0235285f, 0.0209691f, strides=[2, 2], padding=[0, 0, 1, 1], groups=96, channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %13 = nn.bias_add(%12, %v_param_10, axis=3);
  %14 = qnn.requantize(%13, 0.000493371f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %15 = qnn.conv2d(%14, %v_param_11, 0, 156, 0.0235285f, 0.022536f, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %16 = nn.bias_add(%15, %v_param_12, axis=3);
  %17 = qnn.requantize(%16, 0.000530238f, 0, 0.275834f, 119, axis=3, out_dtype="uint8");
  %18 = qnn.conv2d(%17, %v_param_13, 119, 144, 0.275834f, 0.0036557f, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %19 = nn.bias_add(%18, %v_param_14, axis=3);
  %20 = qnn.requantize(%19, 0.00100837f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %21 = qnn.conv2d(%20, %v_param_15, 0, 52, 0.0235285f, 0.169819f, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %22 = nn.bias_add(%21, %v_param_16, axis=3);
  %23 = qnn.requantize(%22, 0.00399559f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %24 = qnn.conv2d(%23, %v_param_17, 0, 122, 0.0235285f, 0.0274089f, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %25 = nn.bias_add(%24, %v_param_18, axis=3);
  %26 = qnn.requantize(%25, 0.000644889f, 0, 0.401493f, 136, axis=3, out_dtype="uint8");
  %27 = qnn.add(%26, %17, 0.401493f, 136, 0.275834f, 119, 0.432169f, 133);
  %28 = qnn.conv2d(%27, %v_param_19, 133, 104, 0.432169f, 0.00299887f, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %29 = nn.bias_add(%28, %v_param_20, axis=3);
  %30 = qnn.requantize(%29, 0.00129602f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %31 = qnn.conv2d(%30, %v_param_21, 0, 143, 0.0235285f, 0.0172029f, strides=[2, 2], padding=[0, 0, 1, 1], groups=144, channels=144, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %32 = nn.bias_add(%31, %v_param_22, axis=3);
  %33 = qnn.requantize(%32, 0.000404757f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %34 = qnn.conv2d(%33, %v_param_23, 0, 111, 0.0235285f, 0.0168447f, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %35 = nn.bias_add(%34, %v_param_24, axis=3);
  %36 = qnn.requantize(%35, 0.00039633f, 0, 0.218362f, 127, axis=3, out_dtype="uint8");
  %37 = qnn.conv2d(%36, %v_param_25, 127, 128, 0.218362f, 0.00192442f, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %38 = nn.bias_add(%37, %v_param_26, axis=3);
  %39 = qnn.requantize(%38, 0.000420222f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %40 = qnn.conv2d(%39, %v_param_27, 0, 118, 0.0235285f, 0.0652507f, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %41 = nn.bias_add(%40, %v_param_28, axis=3);
  %42 = qnn.requantize(%41, 0.00153525f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %43 = qnn.conv2d(%42, %v_param_29, 0, 146, 0.0235285f, 0.0190629f, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %44 = nn.bias_add(%43, %v_param_30, axis=3);
  %45 = qnn.requantize(%44, 0.000448521f, 0, 0.227942f, 121, axis=3, out_dtype="uint8");
  %46 = qnn.add(%45, %36, 0.227942f, 121, 0.218362f, 127, 0.25969f, 130);
  %47 = qnn.conv2d(%46, %v_param_31, 130, 135, 0.25969f, 0.00136492f, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %48 = nn.bias_add(%47, %v_param_32, axis=3);
  %49 = qnn.requantize(%48, 0.000354455f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %50 = qnn.conv2d(%49, %v_param_33, 0, 95, 0.0235285f, 0.0790978f, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %51 = nn.bias_add(%50, %v_param_34, axis=3);
  %52 = qnn.requantize(%51, 0.00186105f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %53 = qnn.conv2d(%52, %v_param_35, 0, 128, 0.0235285f, 0.0182931f, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %54 = nn.bias_add(%53, %v_param_36, axis=3);
  %55 = qnn.requantize(%54, 0.000430409f, 0, 0.257749f, 124, axis=3, out_dtype="uint8");
  %56 = qnn.add(%55, %46, 0.257749f, 124, 0.25969f, 130, 0.331715f, 124);
  %57 = qnn.conv2d(%56, %v_param_37, 124, 127, 0.331715f, 0.00191704f, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %58 = nn.bias_add(%57, %v_param_38, axis=3);
  %59 = qnn.requantize(%58, 0.000635912f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %60 = qnn.conv2d(%59, %v_param_39, 0, 127, 0.0235285f, 0.0100879f, strides=[2, 2], padding=[0, 0, 1, 1], groups=192, channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %61 = nn.bias_add(%60, %v_param_40, axis=3);
  %62 = qnn.requantize(%61, 0.000237353f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %63 = qnn.conv2d(%62, %v_param_41, 0, 147, 0.0235285f, 0.0146013f, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %64 = nn.bias_add(%63, %v_param_42, axis=3);
  %65 = qnn.requantize(%64, 0.000343546f, 0, 0.185405f, 126, axis=3, out_dtype="uint8");
  %66 = qnn.conv2d(%65, %v_param_43, 126, 125, 0.185405f, 0.00155389f, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %67 = nn.bias_add(%66, %v_param_44, axis=3);
  %68 = qnn.requantize(%67, 0.0002881f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %69 = qnn.conv2d(%68, %v_param_45, 0, 110, 0.0235285f, 0.0609271f, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %70 = nn.bias_add(%69, %v_param_46, axis=3);
  %71 = qnn.requantize(%70, 0.00143352f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %72 = qnn.conv2d(%71, %v_param_47, 0, 124, 0.0235285f, 0.0167829f, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %73 = nn.bias_add(%72, %v_param_48, axis=3);
  %74 = qnn.requantize(%73, 0.000394877f, 0, 0.172635f, 109, axis=3, out_dtype="uint8");
  %75 = qnn.add(%74, %65, 0.172635f, 109, 0.185405f, 126, 0.18911f, 122);
  %76 = qnn.conv2d(%75, %v_param_49, 122, 134, 0.18911f, 0.0014703f, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %77 = nn.bias_add(%76, %v_param_50, axis=3);
  %78 = qnn.requantize(%77, 0.000278048f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %79 = qnn.conv2d(%78, %v_param_51, 0, 133, 0.0235285f, 0.0524078f, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %80 = nn.bias_add(%79, %v_param_52, axis=3);
  %81 = qnn.requantize(%80, 0.00123308f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %82 = qnn.conv2d(%81, %v_param_53, 0, 125, 0.0235285f, 0.0128983f, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %83 = nn.bias_add(%82, %v_param_54, axis=3);
  %84 = qnn.requantize(%83, 0.000303476f, 0, 0.147155f, 123, axis=3, out_dtype="uint8");
  %85 = qnn.add(%84, %75, 0.147155f, 123, 0.18911f, 122, 0.199681f, 124);
  %86 = qnn.conv2d(%85, %v_param_55, 124, 127, 0.199681f, 0.00137335f, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %87 = nn.bias_add(%86, %v_param_56, axis=3);
  %88 = qnn.requantize(%87, 0.000274232f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %89 = qnn.conv2d(%88, %v_param_57, 0, 155, 0.0235285f, 0.0407789f, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %90 = nn.bias_add(%89, %v_param_58, axis=3);
  %91 = qnn.requantize(%90, 0.000959465f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %92 = qnn.conv2d(%91, %v_param_59, 0, 144, 0.0235285f, 0.0195615f, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %93 = nn.bias_add(%92, %v_param_60, axis=3);
  %94 = qnn.requantize(%93, 0.000460252f, 0, 0.156276f, 122, axis=3, out_dtype="uint8");
  %95 = qnn.add(%94, %85, 0.156276f, 122, 0.199681f, 124, 0.220273f, 120);
  %96 = qnn.conv2d(%95, %v_param_61, 120, 131, 0.220273f, 0.00162825f, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %97 = nn.bias_add(%96, %v_param_62, axis=3);
  %98 = qnn.requantize(%97, 0.00035866f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %99 = qnn.conv2d(%98, %v_param_63, 0, 143, 0.0235285f, 0.0311078f, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %100 = nn.bias_add(%99, %v_param_64, axis=3);
  %101 = qnn.requantize(%100, 0.00073192f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %102 = qnn.conv2d(%101, %v_param_65, 0, 129, 0.0235285f, 0.00743631f, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %103 = nn.bias_add(%102, %v_param_66, axis=3);
  %104 = qnn.requantize(%103, 0.000174965f, 0, 0.170611f, 129, axis=3, out_dtype="uint8");
  %105 = qnn.conv2d(%104, %v_param_67, 129, 134, 0.170611f, 0.00163099f, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %106 = nn.bias_add(%105, %v_param_68, axis=3);
  %107 = qnn.requantize(%106, 0.000278264f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %108 = qnn.conv2d(%107, %v_param_69, 0, 66, 0.0235285f, 0.0708081f, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %109 = nn.bias_add(%108, %v_param_70, axis=3);
  %110 = qnn.requantize(%109, 0.00166601f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %111 = qnn.conv2d(%110, %v_param_71, 0, 136, 0.0235285f, 0.00838223f, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %112 = nn.bias_add(%111, %v_param_72, axis=3);
  %113 = qnn.requantize(%112, 0.000197221f, 0, 0.123328f, 127, axis=3, out_dtype="uint8");
  %114 = qnn.add(%113, %104, 0.123328f, 127, 0.170611f, 129, 0.176158f, 127);
  %115 = qnn.conv2d(%114, %v_param_73, 127, 138, 0.176158f, 0.00182588f, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %116 = nn.bias_add(%115, %v_param_74, axis=3);
  %117 = qnn.requantize(%116, 0.000321643f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %118 = qnn.conv2d(%117, %v_param_75, 0, 159, 0.0235285f, 0.0744879f, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %119 = nn.bias_add(%118, %v_param_76, axis=3);
  %120 = qnn.requantize(%119, 0.00175259f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %121 = qnn.conv2d(%120, %v_param_77, 0, 154, 0.0235285f, 0.0239826f, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %122 = nn.bias_add(%121, %v_param_78, axis=3);
  %123 = qnn.requantize(%122, 0.000564274f, 0, 0.186196f, 127, axis=3, out_dtype="uint8");
  %124 = qnn.add(%123, %114, 0.186196f, 127, 0.176158f, 127, 0.233401f, 126);
  %125 = qnn.conv2d(%124, %v_param_79, 126, 123, 0.233401f, 0.0013828f, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %126 = nn.bias_add(%125, %v_param_80, axis=3);
  %127 = qnn.requantize(%126, 0.000322747f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %128 = qnn.conv2d(%127, %v_param_81, 0, 92, 0.0235285f, 0.0152579f, strides=[2, 2], padding=[0, 0, 1, 1], groups=576, channels=576, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %129 = nn.bias_add(%128, %v_param_82, axis=3);
  %130 = qnn.requantize(%129, 0.000358996f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %131 = qnn.conv2d(%130, %v_param_83, 0, 140, 0.0235285f, 0.00944795f, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %132 = nn.bias_add(%131, %v_param_84, axis=3);
  %133 = qnn.requantize(%132, 0.000222296f, 0, 0.132378f, 132, axis=3, out_dtype="uint8");
  %134 = qnn.conv2d(%133, %v_param_85, 132, 135, 0.132378f, 0.00202221f, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %135 = nn.bias_add(%134, %v_param_86, axis=3);
  %136 = qnn.requantize(%135, 0.000267696f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %137 = qnn.conv2d(%136, %v_param_87, 0, 147, 0.0235285f, 0.0416675f, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %138 = nn.bias_add(%137, %v_param_88, axis=3);
  %139 = qnn.requantize(%138, 0.000980373f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %140 = qnn.conv2d(%139, %v_param_89, 0, 139, 0.0235285f, 0.0078987f, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %141 = nn.bias_add(%140, %v_param_90, axis=3);
  %142 = qnn.requantize(%141, 0.000185844f, 0, 0.100457f, 129, axis=3, out_dtype="uint8");
  %143 = qnn.add(%142, %133, 0.100457f, 129, 0.132378f, 132, 0.15071f, 134);
  %144 = qnn.conv2d(%143, %v_param_91, 134, 127, 0.15071f, 0.00159444f, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %145 = nn.bias_add(%144, %v_param_92, axis=3);
  %146 = qnn.requantize(%145, 0.000240298f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %147 = qnn.conv2d(%146, %v_param_93, 0, 102, 0.0235285f, 0.0428194f, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %148 = nn.bias_add(%147, %v_param_94, axis=3);
  %149 = qnn.requantize(%148, 0.00100747f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %150 = qnn.conv2d(%149, %v_param_95, 0, 131, 0.0235285f, 0.0369741f, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %151 = nn.bias_add(%150, %v_param_96, axis=3);
  %152 = qnn.requantize(%151, 0.000869944f, 0, 0.169606f, 133, axis=3, out_dtype="uint8");
  %153 = qnn.add(%152, %143, 0.169606f, 133, 0.15071f, 134, 0.210051f, 131);
  %154 = qnn.conv2d(%153, %v_param_97, 131, 135, 0.210051f, 0.00204683f, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %155 = nn.bias_add(%154, %v_param_98, axis=3);
  %156 = qnn.requantize(%155, 0.000429939f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %157 = qnn.conv2d(%156, %v_param_99, 0, 201, 0.0235285f, 0.164563f, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="int32");
  %158 = nn.bias_add(%157, %v_param_100, axis=3);
  %159 = qnn.requantize(%158, 0.00387191f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %160 = qnn.conv2d(%159, %v_param_101, 0, 111, 0.0235285f, 0.00800929f, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %161 = nn.bias_add(%160, %v_param_102, axis=3);
  %162 = qnn.requantize(%161, 0.000188446f, 0, 0.116945f, 130, axis=3, out_dtype="uint8");
  %163 = qnn.conv2d(%162, %v_param_103, 130, 125, 0.116945f, 0.00516707f, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %164 = nn.bias_add(%163, %v_param_104, axis=3);
  %165 = qnn.requantize(%164, 0.000604263f, 0, 0.0235285f, 0, axis=3, out_dtype="uint8");
  %166 = cast(%165, dtype="int32");
  %167 = nn.avg_pool2d(%166, pool_size=[7, 7], padding=[0, 0, 0, 0], layout="NHWC");
  %168 = cast(%167, dtype="uint8");
  %169 = qnn.conv2d(%168, %v_param_105, 0, 113, 0.0235285f, 0.00169108f, padding=[0, 0, 0, 0], channels=1001, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32");
  %170 = nn.bias_add(%169, %v_param_106, axis=3);
  %171 = qnn.requantize(%170, 3.97886e-05f, 0, 0.0988925f, 58, axis=3, out_dtype="uint8");
  reshape(%171, newshape=[1, 1001])
}
