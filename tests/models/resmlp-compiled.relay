def @main(%input0: Tensor[(1, 3, 32, 32), float32], %v1_weight: Tensor[(64, 768), float32], %v1_bias: Tensor[(64), float32], %v2_0_affine_g: Tensor[(1, 1, 64), float32], %v2_0_affine_b: Tensor[(1, 1, 64), float32], %v2_0_fn_weight: Tensor[(4, 4, 1), float32], %v2_0_fn_bias: Tensor[(4), float32], %v2_0_scale: Tensor[(1, 1, 64), float32], %v2_1_affine_g: Tensor[(1, 1, 64), float32], %v2_1_affine_b: Tensor[(1, 1, 64), float32], %v2_1_fn_0_weight: Tensor[(256, 64), float32], %v2_1_fn_0_bias: Tensor[(256), float32], %v2_1_fn_2_weight: Tensor[(64, 256), float32], %v2_1_fn_2_bias: Tensor[(64), float32], %v2_1_scale: Tensor[(1, 1, 64), float32], %v3_g: Tensor[(1, 1, 64), float32], %v3_b: Tensor[(1, 1, 64), float32], %v5_weight: Tensor[(32, 64), float32], %v5_bias: Tensor[(32), float32]) -> Tensor[(1, 32), float32] {
  let %var_2: Tensor[(1, 3, 2, 16, 2, 16), float32] = reshape(%input0, newshape=[1, 3, 2, 16, 2, 16]) /* ty=Tensor[(1, 3, 2, 16, 2, 16), float32] */;
  let %var_3: Tensor[(1, 2, 2, 16, 16, 3), float32] = transpose(%var_2, axes=[0, 2, 4, 3, 5, 1]) /* ty=Tensor[(1, 2, 2, 16, 16, 3), float32] */;
  let %var_4: Tensor[(1, 4, 768), float32] = reshape(%var_3, newshape=[1, 4, 768]) /* ty=Tensor[(1, 4, 768), float32] */;
  let %var_6: Tensor[(768, 64), float32] = transpose(%v1_weight, axes=[1, 0]) /* ty=Tensor[(768, 64), float32] */;
  let %var_8: Tensor[(4, 768), float32] = reshape(%var_4, newshape=[4, 768]) /* ty=Tensor[(4, 768), float32] */;
  let %var_9: Tensor[(64, 768), float32] = transpose(%var_6, axes=[1, 0]) /* ty=Tensor[(64, 768), float32] */;
  %1 = fn (%outer_arg_0: Tensor[(4, 768), float32], %outer_arg_1: Tensor[(64, 768), float32], %outer_arg_2: Tensor[(64), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_0") -> Tensor[(4, 64), float32] {
    %0 = fn (%inner_arg_0: Tensor[(4, 768), float32], %inner_arg_1: Tensor[(64, 768), float32], %inner_arg_2: Tensor[(64), float32], Composite="ilaflex.linear") -> Tensor[(4, 64), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][0]) /* ty=Tensor[(4, 64), float32] */
    };
    %0(%outer_arg_0, %outer_arg_1, %outer_arg_2) /* ty=Tensor[(4, 64), float32] */
  };
  let %var_10: Tensor[(4, 64), float32] = %1(%var_8, %var_9, %v1_bias) /* ty=Tensor[(4, 64), float32] */;
  let %var_12: Tensor[(1, 4, 64), float32] = reshape(%var_10, newshape=[1, 4, 64]) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_14: Tensor[(1, 4, 64), float32] = multiply(%var_12, %v2_0_affine_g) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_16: Tensor[(1, 4, 64), float32] = add(%var_14, %v2_0_affine_b) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_18: Tensor[(1, 4, 64), float32] = nn.conv1d(%var_16, %v2_0_fn_weight) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_20: Tensor[(1, 4, 64), float32] = nn.bias_add(%var_18, %v2_0_fn_bias) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_21: Tensor[(1, 4, 64), float32] = multiply(%var_20, %v2_0_scale) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_23: Tensor[(1, 4, 64), float32] = add(%var_21, %var_12) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_25: Tensor[(1, 4, 64), float32] = multiply(%var_23, %v2_1_affine_g) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_26: Tensor[(1, 4, 64), float32] = add(%var_25, %v2_1_affine_b) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_28: Tensor[(64, 256), float32] = transpose(%v2_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(64, 256), float32] */;
  let %var_30: Tensor[(4, 64), float32] = reshape(%var_26, newshape=[4, 64]) /* ty=Tensor[(4, 64), float32] */;
  let %var_31: Tensor[(256, 64), float32] = transpose(%var_28, axes=[1, 0]) /* ty=Tensor[(256, 64), float32] */;
  %3 = fn (%outer_arg_01: Tensor[(4, 64), float32], %outer_arg_11: Tensor[(256, 64), float32], %outer_arg_21: Tensor[(256), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_1") -> Tensor[(4, 256), float32] {
    %2 = fn (%inner_arg_01: Tensor[(4, 64), float32], %inner_arg_11: Tensor[(256, 64), float32], %inner_arg_21: Tensor[(256), float32], Composite="ilaflex.linear") -> Tensor[(4, 256), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][1]) /* ty=Tensor[(4, 256), float32] */
    };
    %2(%outer_arg_01, %outer_arg_11, %outer_arg_21) /* ty=Tensor[(4, 256), float32] */
  };
  let %var_32: Tensor[(4, 256), float32] = %3(%var_30, %var_31, %v2_1_fn_0_bias) /* ty=Tensor[(4, 256), float32] */;
  let %var_33: Tensor[(1, 4, 256), float32] = reshape(%var_32, newshape=[1, 4, 256]) /* ty=Tensor[(1, 4, 256), float32] */;
  let %var_34: Tensor[(1, 4, 256), float32] = multiply(%var_33, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 256), float32] */;
  let %var_35: Tensor[(1, 4, 256), float32] = erf(%var_34) /* ty=Tensor[(1, 4, 256), float32] */;
  let %var_36: Tensor[(1, 4, 256), float32] = multiply(%var_35, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 256), float32] */;
  let %var_37: Tensor[(1, 4, 256), float32] = add(0.5f /* ty=float32 */, %var_36) /* ty=Tensor[(1, 4, 256), float32] */;
  let %var_38: Tensor[(1, 4, 256), float32] = multiply(%var_33, %var_37) /* ty=Tensor[(1, 4, 256), float32] */;
  let %var_40: Tensor[(256, 64), float32] = transpose(%v2_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(256, 64), float32] */;
  let %var_42: Tensor[(4, 256), float32] = reshape(%var_38, newshape=[4, 256]) /* ty=Tensor[(4, 256), float32] */;
  let %var_43: Tensor[(64, 256), float32] = transpose(%var_40, axes=[1, 0]) /* ty=Tensor[(64, 256), float32] */;
  %5 = fn (%outer_arg_02: Tensor[(4, 256), float32], %outer_arg_12: Tensor[(64, 256), float32], %outer_arg_22: Tensor[(64), float32], Compiler="ilaflex", Primitive=1, global_symbol="ilaflex.linear_2") -> Tensor[(4, 64), float32] {
    %4 = fn (%inner_arg_02: Tensor[(4, 256), float32], %inner_arg_12: Tensor[(64, 256), float32], %inner_arg_22: Tensor[(64), float32], Composite="ilaflex.linear") -> Tensor[(4, 64), float32] {
      accelerator_call(meta[relay.attrs.AcceleratorCallAttrs][2]) /* ty=Tensor[(4, 64), float32] */
    };
    %4(%outer_arg_02, %outer_arg_12, %outer_arg_22) /* ty=Tensor[(4, 64), float32] */
  };
  let %var_44: Tensor[(4, 64), float32] = %5(%var_42, %var_43, %v2_1_fn_2_bias) /* ty=Tensor[(4, 64), float32] */;
  let %var_46: Tensor[(1, 4, 64), float32] = reshape(%var_44, newshape=[1, 4, 64]) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_47: Tensor[(1, 4, 64), float32] = multiply(%var_46, %v2_1_scale) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_49: Tensor[(1, 4, 64), float32] = add(%var_47, %var_23) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_51: Tensor[(1, 4, 64), float32] = multiply(%var_49, %v3_g) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_52: Tensor[(1, 4, 64), float32] = add(%var_51, %v3_b) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_53: Tensor[(1, 4, 64), float32] = reshape(%var_52, newshape=[1, 4, 64]) /* ty=Tensor[(1, 4, 64), float32] */;
  let %var_54: Tensor[(1, 64), float32] = mean(%var_53, axis=[1]) /* ty=Tensor[(1, 64), float32] */;
  let %var_55: Tensor[(1, 64), float32] = transpose(%var_54, axes=[0, 1]) /* ty=Tensor[(1, 64), float32] */;
  let %var_57: Tensor[(64, 32), float32] = transpose(%v5_weight, axes=[1, 0]) /* ty=Tensor[(64, 32), float32] */;
  let %var_58: Tensor[(1, 64), float32] = reshape(%var_55, newshape=[1, 64]) /* ty=Tensor[(1, 64), float32] */;
  let %var_59: Tensor[(32, 64), float32] = transpose(%var_57, axes=[1, 0]) /* ty=Tensor[(32, 64), float32] */;
  let %var_61: Tensor[(1, 32), float32] = nn.dense(%var_58, %var_59, units=None) /* ty=Tensor[(1, 32), float32] */;
  add(%var_61, %v5_bias) /* ty=Tensor[(1, 32), float32] */
}

