#[version = "0.0.5"]
def @main(%input0: Tensor[(1, 3, 32, 32), float32], %conv1_weight: Tensor[(32, 3, 3, 3), float32], %bn1_running_var: Tensor[(32), float32], %bn1_weight: Tensor[(32), float32], %bn1_running_mean: Tensor[(32), float32], %bn1_bias: Tensor[(32), float32], %layers_0_conv1_weight: Tensor[(32, 32, 1, 1), float32], %layers_0_bn1_running_var: Tensor[(32), float32], %layers_0_bn1_weight: Tensor[(32), float32], %layers_0_bn1_running_mean: Tensor[(32), float32], %layers_0_bn1_bias: Tensor[(32), float32], %layers_0_conv2_weight: Tensor[(32, 1, 3, 3), float32], %layers_0_bn2_running_var: Tensor[(32), float32], %layers_0_bn2_weight: Tensor[(32), float32], %layers_0_bn2_running_mean: Tensor[(32), float32], %layers_0_bn2_bias: Tensor[(32), float32], %layers_0_conv3_weight: Tensor[(16, 32, 1, 1), float32], %layers_0_bn3_running_var: Tensor[(16), float32], %layers_0_bn3_weight: Tensor[(16), float32], %layers_0_bn3_running_mean: Tensor[(16), float32], %layers_0_bn3_bias: Tensor[(16), float32], %layers_0_shortcut_0_weight: Tensor[(16, 32, 1, 1), float32], %layers_0_shortcut_1_running_var: Tensor[(16), float32], %layers_0_shortcut_1_weight: Tensor[(16), float32], %layers_0_shortcut_1_running_mean: Tensor[(16), float32], %layers_0_shortcut_1_bias: Tensor[(16), float32], %layers_1_conv1_weight: Tensor[(96, 16, 1, 1), float32], %layers_1_bn1_running_var: Tensor[(96), float32], %layers_1_bn1_weight: Tensor[(96), float32], %layers_1_bn1_running_mean: Tensor[(96), float32], %layers_1_bn1_bias: Tensor[(96), float32], %layers_1_conv2_weight: Tensor[(96, 1, 3, 3), float32], %layers_1_bn2_running_var: Tensor[(96), float32], %layers_1_bn2_weight: Tensor[(96), float32], %layers_1_bn2_running_mean: Tensor[(96), float32], %layers_1_bn2_bias: Tensor[(96), float32], %layers_1_conv3_weight: Tensor[(24, 96, 1, 1), float32], %layers_1_bn3_running_var: Tensor[(24), float32], %layers_1_bn3_weight: Tensor[(24), float32], %layers_1_bn3_running_mean: Tensor[(24), float32], %layers_1_bn3_bias: Tensor[(24), float32], %layers_1_shortcut_0_weight: Tensor[(24, 16, 1, 1), float32], %layers_1_shortcut_1_running_var: Tensor[(24), float32], %layers_1_shortcut_1_weight: Tensor[(24), float32], %layers_1_shortcut_1_running_mean: Tensor[(24), float32], %layers_1_shortcut_1_bias: Tensor[(24), float32], %layers_2_conv1_weight: Tensor[(144, 24, 1, 1), float32], %layers_2_bn1_running_var: Tensor[(144), float32], %layers_2_bn1_weight: Tensor[(144), float32], %layers_2_bn1_running_mean: Tensor[(144), float32], %layers_2_bn1_bias: Tensor[(144), float32], %layers_2_conv2_weight: Tensor[(144, 1, 3, 3), float32], %layers_2_bn2_running_var: Tensor[(144), float32], %layers_2_bn2_weight: Tensor[(144), float32], %layers_2_bn2_running_mean: Tensor[(144), float32], %layers_2_bn2_bias: Tensor[(144), float32], %layers_2_conv3_weight: Tensor[(24, 144, 1, 1), float32], %layers_2_bn3_running_var: Tensor[(24), float32], %layers_2_bn3_weight: Tensor[(24), float32], %layers_2_bn3_running_mean: Tensor[(24), float32], %layers_2_bn3_bias: Tensor[(24), float32], %layers_3_conv1_weight: Tensor[(144, 24, 1, 1), float32], %layers_3_bn1_running_var: Tensor[(144), float32], %layers_3_bn1_weight: Tensor[(144), float32], %layers_3_bn1_running_mean: Tensor[(144), float32], %layers_3_bn1_bias: Tensor[(144), float32], %layers_3_conv2_weight: Tensor[(144, 1, 3, 3), float32], %layers_3_bn2_running_var: Tensor[(144), float32], %layers_3_bn2_weight: Tensor[(144), float32], %layers_3_bn2_running_mean: Tensor[(144), float32], %layers_3_bn2_bias: Tensor[(144), float32], %layers_3_conv3_weight: Tensor[(32, 144, 1, 1), float32], %layers_3_bn3_running_var: Tensor[(32), float32], %layers_3_bn3_weight: Tensor[(32), float32], %layers_3_bn3_running_mean: Tensor[(32), float32], %layers_3_bn3_bias: Tensor[(32), float32], %layers_4_conv1_weight: Tensor[(192, 32, 1, 1), float32], %layers_4_bn1_running_var: Tensor[(192), float32], %layers_4_bn1_weight: Tensor[(192), float32], %layers_4_bn1_running_mean: Tensor[(192), float32], %layers_4_bn1_bias: Tensor[(192), float32], %layers_4_conv2_weight: Tensor[(192, 1, 3, 3), float32], %layers_4_bn2_running_var: Tensor[(192), float32], %layers_4_bn2_weight: Tensor[(192), float32], %layers_4_bn2_running_mean: Tensor[(192), float32], %layers_4_bn2_bias: Tensor[(192), float32], %layers_4_conv3_weight: Tensor[(32, 192, 1, 1), float32], %layers_4_bn3_running_var: Tensor[(32), float32], %layers_4_bn3_weight: Tensor[(32), float32], %layers_4_bn3_running_mean: Tensor[(32), float32], %layers_4_bn3_bias: Tensor[(32), float32], %layers_5_conv1_weight: Tensor[(192, 32, 1, 1), float32], %layers_5_bn1_running_var: Tensor[(192), float32], %layers_5_bn1_weight: Tensor[(192), float32], %layers_5_bn1_running_mean: Tensor[(192), float32], %layers_5_bn1_bias: Tensor[(192), float32], %layers_5_conv2_weight: Tensor[(192, 1, 3, 3), float32], %layers_5_bn2_running_var: Tensor[(192), float32], %layers_5_bn2_weight: Tensor[(192), float32], %layers_5_bn2_running_mean: Tensor[(192), float32], %layers_5_bn2_bias: Tensor[(192), float32], %layers_5_conv3_weight: Tensor[(32, 192, 1, 1), float32], %layers_5_bn3_running_var: Tensor[(32), float32], %layers_5_bn3_weight: Tensor[(32), float32], %layers_5_bn3_running_mean: Tensor[(32), float32], %layers_5_bn3_bias: Tensor[(32), float32], %layers_6_conv1_weight: Tensor[(192, 32, 1, 1), float32], %layers_6_bn1_running_var: Tensor[(192), float32], %layers_6_bn1_weight: Tensor[(192), float32], %layers_6_bn1_running_mean: Tensor[(192), float32], %layers_6_bn1_bias: Tensor[(192), float32], %layers_6_conv2_weight: Tensor[(192, 1, 3, 3), float32], %layers_6_bn2_running_var: Tensor[(192), float32], %layers_6_bn2_weight: Tensor[(192), float32], %layers_6_bn2_running_mean: Tensor[(192), float32], %layers_6_bn2_bias: Tensor[(192), float32], %layers_6_conv3_weight: Tensor[(64, 192, 1, 1), float32], %layers_6_bn3_running_var: Tensor[(64), float32], %layers_6_bn3_weight: Tensor[(64), float32], %layers_6_bn3_running_mean: Tensor[(64), float32], %layers_6_bn3_bias: Tensor[(64), float32], %layers_7_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_7_bn1_running_var: Tensor[(384), float32], %layers_7_bn1_weight: Tensor[(384), float32], %layers_7_bn1_running_mean: Tensor[(384), float32], %layers_7_bn1_bias: Tensor[(384), float32], %layers_7_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_7_bn2_running_var: Tensor[(384), float32], %layers_7_bn2_weight: Tensor[(384), float32], %layers_7_bn2_running_mean: Tensor[(384), float32], %layers_7_bn2_bias: Tensor[(384), float32], %layers_7_conv3_weight: Tensor[(64, 384, 1, 1), float32], %layers_7_bn3_running_var: Tensor[(64), float32], %layers_7_bn3_weight: Tensor[(64), float32], %layers_7_bn3_running_mean: Tensor[(64), float32], %layers_7_bn3_bias: Tensor[(64), float32], %layers_8_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_8_bn1_running_var: Tensor[(384), float32], %layers_8_bn1_weight: Tensor[(384), float32], %layers_8_bn1_running_mean: Tensor[(384), float32], %layers_8_bn1_bias: Tensor[(384), float32], %layers_8_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_8_bn2_running_var: Tensor[(384), float32], %layers_8_bn2_weight: Tensor[(384), float32], %layers_8_bn2_running_mean: Tensor[(384), float32], %layers_8_bn2_bias: Tensor[(384), float32], %layers_8_conv3_weight: Tensor[(64, 384, 1, 1), float32], %layers_8_bn3_running_var: Tensor[(64), float32], %layers_8_bn3_weight: Tensor[(64), float32], %layers_8_bn3_running_mean: Tensor[(64), float32], %layers_8_bn3_bias: Tensor[(64), float32], %layers_9_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_9_bn1_running_var: Tensor[(384), float32], %layers_9_bn1_weight: Tensor[(384), float32], %layers_9_bn1_running_mean: Tensor[(384), float32], %layers_9_bn1_bias: Tensor[(384), float32], %layers_9_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_9_bn2_running_var: Tensor[(384), float32], %layers_9_bn2_weight: Tensor[(384), float32], %layers_9_bn2_running_mean: Tensor[(384), float32], %layers_9_bn2_bias: Tensor[(384), float32], %layers_9_conv3_weight: Tensor[(64, 384, 1, 1), float32], %layers_9_bn3_running_var: Tensor[(64), float32], %layers_9_bn3_weight: Tensor[(64), float32], %layers_9_bn3_running_mean: Tensor[(64), float32], %layers_9_bn3_bias: Tensor[(64), float32], %layers_10_conv1_weight: Tensor[(384, 64, 1, 1), float32], %layers_10_bn1_running_var: Tensor[(384), float32], %layers_10_bn1_weight: Tensor[(384), float32], %layers_10_bn1_running_mean: Tensor[(384), float32], %layers_10_bn1_bias: Tensor[(384), float32], %layers_10_conv2_weight: Tensor[(384, 1, 3, 3), float32], %layers_10_bn2_running_var: Tensor[(384), float32], %layers_10_bn2_weight: Tensor[(384), float32], %layers_10_bn2_running_mean: Tensor[(384), float32], %layers_10_bn2_bias: Tensor[(384), float32], %layers_10_conv3_weight: Tensor[(96, 384, 1, 1), float32], %layers_10_bn3_running_var: Tensor[(96), float32], %layers_10_bn3_weight: Tensor[(96), float32], %layers_10_bn3_running_mean: Tensor[(96), float32], %layers_10_bn3_bias: Tensor[(96), float32], %layers_10_shortcut_0_weight: Tensor[(96, 64, 1, 1), float32], %layers_10_shortcut_1_running_var: Tensor[(96), float32], %layers_10_shortcut_1_weight: Tensor[(96), float32], %layers_10_shortcut_1_running_mean: Tensor[(96), float32], %layers_10_shortcut_1_bias: Tensor[(96), float32], %layers_11_conv1_weight: Tensor[(576, 96, 1, 1), float32], %layers_11_bn1_running_var: Tensor[(576), float32], %layers_11_bn1_weight: Tensor[(576), float32], %layers_11_bn1_running_mean: Tensor[(576), float32], %layers_11_bn1_bias: Tensor[(576), float32], %layers_11_conv2_weight: Tensor[(576, 1, 3, 3), float32], %layers_11_bn2_running_var: Tensor[(576), float32], %layers_11_bn2_weight: Tensor[(576), float32], %layers_11_bn2_running_mean: Tensor[(576), float32], %layers_11_bn2_bias: Tensor[(576), float32], %layers_11_conv3_weight: Tensor[(96, 576, 1, 1), float32], %layers_11_bn3_running_var: Tensor[(96), float32], %layers_11_bn3_weight: Tensor[(96), float32], %layers_11_bn3_running_mean: Tensor[(96), float32], %layers_11_bn3_bias: Tensor[(96), float32], %layers_12_conv1_weight: Tensor[(576, 96, 1, 1), float32], %layers_12_bn1_running_var: Tensor[(576), float32], %layers_12_bn1_weight: Tensor[(576), float32], %layers_12_bn1_running_mean: Tensor[(576), float32], %layers_12_bn1_bias: Tensor[(576), float32], %layers_12_conv2_weight: Tensor[(576, 1, 3, 3), float32], %layers_12_bn2_running_var: Tensor[(576), float32], %layers_12_bn2_weight: Tensor[(576), float32], %layers_12_bn2_running_mean: Tensor[(576), float32], %layers_12_bn2_bias: Tensor[(576), float32], %layers_12_conv3_weight: Tensor[(96, 576, 1, 1), float32], %layers_12_bn3_running_var: Tensor[(96), float32], %layers_12_bn3_weight: Tensor[(96), float32], %layers_12_bn3_running_mean: Tensor[(96), float32], %layers_12_bn3_bias: Tensor[(96), float32], %layers_13_conv1_weight: Tensor[(576, 96, 1, 1), float32], %layers_13_bn1_running_var: Tensor[(576), float32], %layers_13_bn1_weight: Tensor[(576), float32], %layers_13_bn1_running_mean: Tensor[(576), float32], %layers_13_bn1_bias: Tensor[(576), float32], %layers_13_conv2_weight: Tensor[(576, 1, 3, 3), float32], %layers_13_bn2_running_var: Tensor[(576), float32], %layers_13_bn2_weight: Tensor[(576), float32], %layers_13_bn2_running_mean: Tensor[(576), float32], %layers_13_bn2_bias: Tensor[(576), float32], %layers_13_conv3_weight: Tensor[(160, 576, 1, 1), float32], %layers_13_bn3_running_var: Tensor[(160), float32], %layers_13_bn3_weight: Tensor[(160), float32], %layers_13_bn3_running_mean: Tensor[(160), float32], %layers_13_bn3_bias: Tensor[(160), float32], %layers_14_conv1_weight: Tensor[(960, 160, 1, 1), float32], %layers_14_bn1_running_var: Tensor[(960), float32], %layers_14_bn1_weight: Tensor[(960), float32], %layers_14_bn1_running_mean: Tensor[(960), float32], %layers_14_bn1_bias: Tensor[(960), float32], %layers_14_conv2_weight: Tensor[(960, 1, 3, 3), float32], %layers_14_bn2_running_var: Tensor[(960), float32], %layers_14_bn2_weight: Tensor[(960), float32], %layers_14_bn2_running_mean: Tensor[(960), float32], %layers_14_bn2_bias: Tensor[(960), float32], %layers_14_conv3_weight: Tensor[(160, 960, 1, 1), float32], %layers_14_bn3_running_var: Tensor[(160), float32], %layers_14_bn3_weight: Tensor[(160), float32], %layers_14_bn3_running_mean: Tensor[(160), float32], %layers_14_bn3_bias: Tensor[(160), float32], %layers_15_conv1_weight: Tensor[(960, 160, 1, 1), float32], %layers_15_bn1_running_var: Tensor[(960), float32], %layers_15_bn1_weight: Tensor[(960), float32], %layers_15_bn1_running_mean: Tensor[(960), float32], %layers_15_bn1_bias: Tensor[(960), float32], %layers_15_conv2_weight: Tensor[(960, 1, 3, 3), float32], %layers_15_bn2_running_var: Tensor[(960), float32], %layers_15_bn2_weight: Tensor[(960), float32], %layers_15_bn2_running_mean: Tensor[(960), float32], %layers_15_bn2_bias: Tensor[(960), float32], %layers_15_conv3_weight: Tensor[(160, 960, 1, 1), float32], %layers_15_bn3_running_var: Tensor[(160), float32], %layers_15_bn3_weight: Tensor[(160), float32], %layers_15_bn3_running_mean: Tensor[(160), float32], %layers_15_bn3_bias: Tensor[(160), float32], %layers_16_conv1_weight: Tensor[(960, 160, 1, 1), float32], %layers_16_bn1_running_var: Tensor[(960), float32], %layers_16_bn1_weight: Tensor[(960), float32], %layers_16_bn1_running_mean: Tensor[(960), float32], %layers_16_bn1_bias: Tensor[(960), float32], %layers_16_conv2_weight: Tensor[(960, 1, 3, 3), float32], %layers_16_bn2_running_var: Tensor[(960), float32], %layers_16_bn2_weight: Tensor[(960), float32], %layers_16_bn2_running_mean: Tensor[(960), float32], %layers_16_bn2_bias: Tensor[(960), float32], %layers_16_conv3_weight: Tensor[(320, 960, 1, 1), float32], %layers_16_bn3_running_var: Tensor[(320), float32], %layers_16_bn3_weight: Tensor[(320), float32], %layers_16_bn3_running_mean: Tensor[(320), float32], %layers_16_bn3_bias: Tensor[(320), float32], %layers_16_shortcut_0_weight: Tensor[(320, 160, 1, 1), float32], %layers_16_shortcut_1_running_var: Tensor[(320), float32], %layers_16_shortcut_1_weight: Tensor[(320), float32], %layers_16_shortcut_1_running_mean: Tensor[(320), float32], %layers_16_shortcut_1_bias: Tensor[(320), float32], %conv2_weight: Tensor[(1280, 320, 1, 1), float32], %bn2_running_var: Tensor[(1280), float32], %bn2_weight: Tensor[(1280), float32], %bn2_running_mean: Tensor[(1280), float32], %bn2_bias: Tensor[(1280), float32], %linear_weight: Tensor[(10, 1280), float32], %linear_bias: Tensor[(10), float32]) -> Tensor[(1, 10), float32] {
  %14 = reshape(%conv2_weight, newshape=[1280, 320]) /* from_string */ /* ty=Tensor[(1280, 320), float32] */;
  %15 = max(%14) /* ty=float32 */;
  %16 = min(%14) /* ty=float32 */;
  %17 = divide(%15, 127f /* ty=float32 */) /* ty=float32 */;
  %18 = divide(%16, -127f /* ty=float32 */) /* ty=float32 */;
  %19 = maximum(%17, %18) /* ty=float32 */;
  %20 = divide(%14, %19) /* ty=Tensor[(1280, 320), float32] */;
  %21 = round(%20) /* ty=Tensor[(1280, 320), float32] */;
  %29 = reshape(%layers_16_conv3_weight, newshape=[320, 960]) /* from_string */ /* ty=Tensor[(320, 960), float32] */;
  %30 = max(%29) /* ty=float32 */;
  %31 = min(%29) /* ty=float32 */;
  %32 = divide(%30, 127f /* ty=float32 */) /* ty=float32 */;
  %33 = divide(%31, -127f /* ty=float32 */) /* ty=float32 */;
  %34 = maximum(%32, %33) /* ty=float32 */;
  %35 = divide(%29, %34) /* ty=Tensor[(320, 960), float32] */;
  %36 = round(%35) /* ty=Tensor[(320, 960), float32] */;
  %44 = reshape(%layers_16_conv1_weight, newshape=[960, 160]) /* from_string */ /* ty=Tensor[(960, 160), float32] */;
  %45 = max(%44) /* ty=float32 */;
  %46 = min(%44) /* ty=float32 */;
  %47 = divide(%45, 127f /* ty=float32 */) /* ty=float32 */;
  %48 = divide(%46, -127f /* ty=float32 */) /* ty=float32 */;
  %49 = maximum(%47, %48) /* ty=float32 */;
  %50 = divide(%44, %49) /* ty=Tensor[(960, 160), float32] */;
  %51 = round(%50) /* ty=Tensor[(960, 160), float32] */;
  %59 = reshape(%layers_15_conv3_weight, newshape=[160, 960]) /* from_string */ /* ty=Tensor[(160, 960), float32] */;
  %60 = max(%59) /* ty=float32 */;
  %61 = min(%59) /* ty=float32 */;
  %62 = divide(%60, 127f /* ty=float32 */) /* ty=float32 */;
  %63 = divide(%61, -127f /* ty=float32 */) /* ty=float32 */;
  %64 = maximum(%62, %63) /* ty=float32 */;
  %65 = divide(%59, %64) /* ty=Tensor[(160, 960), float32] */;
  %66 = round(%65) /* ty=Tensor[(160, 960), float32] */;
  %74 = reshape(%layers_15_conv1_weight, newshape=[960, 160]) /* from_string */ /* ty=Tensor[(960, 160), float32] */;
  %75 = max(%74) /* ty=float32 */;
  %76 = min(%74) /* ty=float32 */;
  %77 = divide(%75, 127f /* ty=float32 */) /* ty=float32 */;
  %78 = divide(%76, -127f /* ty=float32 */) /* ty=float32 */;
  %79 = maximum(%77, %78) /* ty=float32 */;
  %80 = divide(%74, %79) /* ty=Tensor[(960, 160), float32] */;
  %81 = round(%80) /* ty=Tensor[(960, 160), float32] */;
  %89 = reshape(%layers_14_conv3_weight, newshape=[160, 960]) /* from_string */ /* ty=Tensor[(160, 960), float32] */;
  %90 = max(%89) /* ty=float32 */;
  %91 = min(%89) /* ty=float32 */;
  %92 = divide(%90, 127f /* ty=float32 */) /* ty=float32 */;
  %93 = divide(%91, -127f /* ty=float32 */) /* ty=float32 */;
  %94 = maximum(%92, %93) /* ty=float32 */;
  %95 = divide(%89, %94) /* ty=Tensor[(160, 960), float32] */;
  %96 = round(%95) /* ty=Tensor[(160, 960), float32] */;
  %104 = reshape(%layers_14_conv1_weight, newshape=[960, 160]) /* from_string */ /* ty=Tensor[(960, 160), float32] */;
  %105 = max(%104) /* ty=float32 */;
  %106 = min(%104) /* ty=float32 */;
  %107 = divide(%105, 127f /* ty=float32 */) /* ty=float32 */;
  %108 = divide(%106, -127f /* ty=float32 */) /* ty=float32 */;
  %109 = maximum(%107, %108) /* ty=float32 */;
  %110 = divide(%104, %109) /* ty=Tensor[(960, 160), float32] */;
  %111 = round(%110) /* ty=Tensor[(960, 160), float32] */;
  %119 = reshape(%layers_13_conv3_weight, newshape=[160, 576]) /* from_string */ /* ty=Tensor[(160, 576), float32] */;
  %120 = max(%119) /* ty=float32 */;
  %121 = min(%119) /* ty=float32 */;
  %122 = divide(%120, 127f /* ty=float32 */) /* ty=float32 */;
  %123 = divide(%121, -127f /* ty=float32 */) /* ty=float32 */;
  %124 = maximum(%122, %123) /* ty=float32 */;
  %125 = divide(%119, %124) /* ty=Tensor[(160, 576), float32] */;
  %126 = round(%125) /* ty=Tensor[(160, 576), float32] */;
  %134 = reshape(%layers_13_conv1_weight, newshape=[576, 96]) /* from_string */ /* ty=Tensor[(576, 96), float32] */;
  %135 = max(%134) /* ty=float32 */;
  %136 = min(%134) /* ty=float32 */;
  %137 = divide(%135, 127f /* ty=float32 */) /* ty=float32 */;
  %138 = divide(%136, -127f /* ty=float32 */) /* ty=float32 */;
  %139 = maximum(%137, %138) /* ty=float32 */;
  %140 = divide(%134, %139) /* ty=Tensor[(576, 96), float32] */;
  %141 = round(%140) /* ty=Tensor[(576, 96), float32] */;
  %149 = reshape(%layers_12_conv3_weight, newshape=[96, 576]) /* from_string */ /* ty=Tensor[(96, 576), float32] */;
  %150 = max(%149) /* ty=float32 */;
  %151 = min(%149) /* ty=float32 */;
  %152 = divide(%150, 127f /* ty=float32 */) /* ty=float32 */;
  %153 = divide(%151, -127f /* ty=float32 */) /* ty=float32 */;
  %154 = maximum(%152, %153) /* ty=float32 */;
  %155 = divide(%149, %154) /* ty=Tensor[(96, 576), float32] */;
  %156 = round(%155) /* ty=Tensor[(96, 576), float32] */;
  %164 = reshape(%layers_12_conv1_weight, newshape=[576, 96]) /* from_string */ /* ty=Tensor[(576, 96), float32] */;
  %165 = max(%164) /* ty=float32 */;
  %166 = min(%164) /* ty=float32 */;
  %167 = divide(%165, 127f /* ty=float32 */) /* ty=float32 */;
  %168 = divide(%166, -127f /* ty=float32 */) /* ty=float32 */;
  %169 = maximum(%167, %168) /* ty=float32 */;
  %170 = divide(%164, %169) /* ty=Tensor[(576, 96), float32] */;
  %171 = round(%170) /* ty=Tensor[(576, 96), float32] */;
  %179 = reshape(%layers_11_conv3_weight, newshape=[96, 576]) /* from_string */ /* ty=Tensor[(96, 576), float32] */;
  %180 = max(%179) /* ty=float32 */;
  %181 = min(%179) /* ty=float32 */;
  %182 = divide(%180, 127f /* ty=float32 */) /* ty=float32 */;
  %183 = divide(%181, -127f /* ty=float32 */) /* ty=float32 */;
  %184 = maximum(%182, %183) /* ty=float32 */;
  %185 = divide(%179, %184) /* ty=Tensor[(96, 576), float32] */;
  %186 = round(%185) /* ty=Tensor[(96, 576), float32] */;
  %194 = reshape(%layers_11_conv1_weight, newshape=[576, 96]) /* from_string */ /* ty=Tensor[(576, 96), float32] */;
  %195 = max(%194) /* ty=float32 */;
  %196 = min(%194) /* ty=float32 */;
  %197 = divide(%195, 127f /* ty=float32 */) /* ty=float32 */;
  %198 = divide(%196, -127f /* ty=float32 */) /* ty=float32 */;
  %199 = maximum(%197, %198) /* ty=float32 */;
  %200 = divide(%194, %199) /* ty=Tensor[(576, 96), float32] */;
  %201 = round(%200) /* ty=Tensor[(576, 96), float32] */;
  %209 = reshape(%layers_10_conv3_weight, newshape=[96, 384]) /* from_string */ /* ty=Tensor[(96, 384), float32] */;
  %210 = max(%209) /* ty=float32 */;
  %211 = min(%209) /* ty=float32 */;
  %212 = divide(%210, 127f /* ty=float32 */) /* ty=float32 */;
  %213 = divide(%211, -127f /* ty=float32 */) /* ty=float32 */;
  %214 = maximum(%212, %213) /* ty=float32 */;
  %215 = divide(%209, %214) /* ty=Tensor[(96, 384), float32] */;
  %216 = round(%215) /* ty=Tensor[(96, 384), float32] */;
  %224 = reshape(%layers_10_conv1_weight, newshape=[384, 64]) /* from_string */ /* ty=Tensor[(384, 64), float32] */;
  %225 = max(%224) /* ty=float32 */;
  %226 = min(%224) /* ty=float32 */;
  %227 = divide(%225, 127f /* ty=float32 */) /* ty=float32 */;
  %228 = divide(%226, -127f /* ty=float32 */) /* ty=float32 */;
  %229 = maximum(%227, %228) /* ty=float32 */;
  %230 = divide(%224, %229) /* ty=Tensor[(384, 64), float32] */;
  %231 = round(%230) /* ty=Tensor[(384, 64), float32] */;
  %239 = reshape(%layers_9_conv3_weight, newshape=[64, 384]) /* from_string */ /* ty=Tensor[(64, 384), float32] */;
  %240 = max(%239) /* ty=float32 */;
  %241 = min(%239) /* ty=float32 */;
  %242 = divide(%240, 127f /* ty=float32 */) /* ty=float32 */;
  %243 = divide(%241, -127f /* ty=float32 */) /* ty=float32 */;
  %244 = maximum(%242, %243) /* ty=float32 */;
  %245 = divide(%239, %244) /* ty=Tensor[(64, 384), float32] */;
  %246 = round(%245) /* ty=Tensor[(64, 384), float32] */;
  %254 = reshape(%layers_9_conv1_weight, newshape=[384, 64]) /* from_string */ /* ty=Tensor[(384, 64), float32] */;
  %255 = max(%254) /* ty=float32 */;
  %256 = min(%254) /* ty=float32 */;
  %257 = divide(%255, 127f /* ty=float32 */) /* ty=float32 */;
  %258 = divide(%256, -127f /* ty=float32 */) /* ty=float32 */;
  %259 = maximum(%257, %258) /* ty=float32 */;
  %260 = divide(%254, %259) /* ty=Tensor[(384, 64), float32] */;
  %261 = round(%260) /* ty=Tensor[(384, 64), float32] */;
  %269 = reshape(%layers_8_conv3_weight, newshape=[64, 384]) /* from_string */ /* ty=Tensor[(64, 384), float32] */;
  %270 = max(%269) /* ty=float32 */;
  %271 = min(%269) /* ty=float32 */;
  %272 = divide(%270, 127f /* ty=float32 */) /* ty=float32 */;
  %273 = divide(%271, -127f /* ty=float32 */) /* ty=float32 */;
  %274 = maximum(%272, %273) /* ty=float32 */;
  %275 = divide(%269, %274) /* ty=Tensor[(64, 384), float32] */;
  %276 = round(%275) /* ty=Tensor[(64, 384), float32] */;
  %284 = reshape(%layers_8_conv1_weight, newshape=[384, 64]) /* from_string */ /* ty=Tensor[(384, 64), float32] */;
  %285 = max(%284) /* ty=float32 */;
  %286 = min(%284) /* ty=float32 */;
  %287 = divide(%285, 127f /* ty=float32 */) /* ty=float32 */;
  %288 = divide(%286, -127f /* ty=float32 */) /* ty=float32 */;
  %289 = maximum(%287, %288) /* ty=float32 */;
  %290 = divide(%284, %289) /* ty=Tensor[(384, 64), float32] */;
  %291 = round(%290) /* ty=Tensor[(384, 64), float32] */;
  %299 = reshape(%layers_7_conv3_weight, newshape=[64, 384]) /* from_string */ /* ty=Tensor[(64, 384), float32] */;
  %300 = max(%299) /* ty=float32 */;
  %301 = min(%299) /* ty=float32 */;
  %302 = divide(%300, 127f /* ty=float32 */) /* ty=float32 */;
  %303 = divide(%301, -127f /* ty=float32 */) /* ty=float32 */;
  %304 = maximum(%302, %303) /* ty=float32 */;
  %305 = divide(%299, %304) /* ty=Tensor[(64, 384), float32] */;
  %306 = round(%305) /* ty=Tensor[(64, 384), float32] */;
  %314 = reshape(%layers_7_conv1_weight, newshape=[384, 64]) /* from_string */ /* ty=Tensor[(384, 64), float32] */;
  %315 = max(%314) /* ty=float32 */;
  %316 = min(%314) /* ty=float32 */;
  %317 = divide(%315, 127f /* ty=float32 */) /* ty=float32 */;
  %318 = divide(%316, -127f /* ty=float32 */) /* ty=float32 */;
  %319 = maximum(%317, %318) /* ty=float32 */;
  %320 = divide(%314, %319) /* ty=Tensor[(384, 64), float32] */;
  %321 = round(%320) /* ty=Tensor[(384, 64), float32] */;
  %329 = reshape(%layers_6_conv3_weight, newshape=[64, 192]) /* from_string */ /* ty=Tensor[(64, 192), float32] */;
  %330 = max(%329) /* ty=float32 */;
  %331 = min(%329) /* ty=float32 */;
  %332 = divide(%330, 127f /* ty=float32 */) /* ty=float32 */;
  %333 = divide(%331, -127f /* ty=float32 */) /* ty=float32 */;
  %334 = maximum(%332, %333) /* ty=float32 */;
  %335 = divide(%329, %334) /* ty=Tensor[(64, 192), float32] */;
  %336 = round(%335) /* ty=Tensor[(64, 192), float32] */;
  %344 = reshape(%layers_6_conv1_weight, newshape=[192, 32]) /* from_string */ /* ty=Tensor[(192, 32), float32] */;
  %345 = max(%344) /* ty=float32 */;
  %346 = min(%344) /* ty=float32 */;
  %347 = divide(%345, 127f /* ty=float32 */) /* ty=float32 */;
  %348 = divide(%346, -127f /* ty=float32 */) /* ty=float32 */;
  %349 = maximum(%347, %348) /* ty=float32 */;
  %350 = divide(%344, %349) /* ty=Tensor[(192, 32), float32] */;
  %351 = round(%350) /* ty=Tensor[(192, 32), float32] */;
  %359 = reshape(%layers_5_conv3_weight, newshape=[32, 192]) /* from_string */ /* ty=Tensor[(32, 192), float32] */;
  %360 = max(%359) /* ty=float32 */;
  %361 = min(%359) /* ty=float32 */;
  %362 = divide(%360, 127f /* ty=float32 */) /* ty=float32 */;
  %363 = divide(%361, -127f /* ty=float32 */) /* ty=float32 */;
  %364 = maximum(%362, %363) /* ty=float32 */;
  %365 = divide(%359, %364) /* ty=Tensor[(32, 192), float32] */;
  %366 = round(%365) /* ty=Tensor[(32, 192), float32] */;
  %374 = reshape(%layers_5_conv1_weight, newshape=[192, 32]) /* from_string */ /* ty=Tensor[(192, 32), float32] */;
  %375 = max(%374) /* ty=float32 */;
  %376 = min(%374) /* ty=float32 */;
  %377 = divide(%375, 127f /* ty=float32 */) /* ty=float32 */;
  %378 = divide(%376, -127f /* ty=float32 */) /* ty=float32 */;
  %379 = maximum(%377, %378) /* ty=float32 */;
  %380 = divide(%374, %379) /* ty=Tensor[(192, 32), float32] */;
  %381 = round(%380) /* ty=Tensor[(192, 32), float32] */;
  %389 = reshape(%layers_4_conv3_weight, newshape=[32, 192]) /* from_string */ /* ty=Tensor[(32, 192), float32] */;
  %390 = max(%389) /* ty=float32 */;
  %391 = min(%389) /* ty=float32 */;
  %392 = divide(%390, 127f /* ty=float32 */) /* ty=float32 */;
  %393 = divide(%391, -127f /* ty=float32 */) /* ty=float32 */;
  %394 = maximum(%392, %393) /* ty=float32 */;
  %395 = divide(%389, %394) /* ty=Tensor[(32, 192), float32] */;
  %396 = round(%395) /* ty=Tensor[(32, 192), float32] */;
  %404 = reshape(%layers_4_conv1_weight, newshape=[192, 32]) /* from_string */ /* ty=Tensor[(192, 32), float32] */;
  %405 = max(%404) /* ty=float32 */;
  %406 = min(%404) /* ty=float32 */;
  %407 = divide(%405, 127f /* ty=float32 */) /* ty=float32 */;
  %408 = divide(%406, -127f /* ty=float32 */) /* ty=float32 */;
  %409 = maximum(%407, %408) /* ty=float32 */;
  %410 = divide(%404, %409) /* ty=Tensor[(192, 32), float32] */;
  %411 = round(%410) /* ty=Tensor[(192, 32), float32] */;
  %419 = reshape(%layers_3_conv3_weight, newshape=[32, 144]) /* from_string */ /* ty=Tensor[(32, 144), float32] */;
  %420 = max(%419) /* ty=float32 */;
  %421 = min(%419) /* ty=float32 */;
  %422 = divide(%420, 127f /* ty=float32 */) /* ty=float32 */;
  %423 = divide(%421, -127f /* ty=float32 */) /* ty=float32 */;
  %424 = maximum(%422, %423) /* ty=float32 */;
  %425 = divide(%419, %424) /* ty=Tensor[(32, 144), float32] */;
  %426 = round(%425) /* ty=Tensor[(32, 144), float32] */;
  %434 = reshape(%layers_3_conv1_weight, newshape=[144, 24]) /* from_string */ /* ty=Tensor[(144, 24), float32] */;
  %435 = max(%434) /* ty=float32 */;
  %436 = min(%434) /* ty=float32 */;
  %437 = divide(%435, 127f /* ty=float32 */) /* ty=float32 */;
  %438 = divide(%436, -127f /* ty=float32 */) /* ty=float32 */;
  %439 = maximum(%437, %438) /* ty=float32 */;
  %440 = divide(%434, %439) /* ty=Tensor[(144, 24), float32] */;
  %441 = round(%440) /* ty=Tensor[(144, 24), float32] */;
  %449 = reshape(%layers_2_conv3_weight, newshape=[24, 144]) /* from_string */ /* ty=Tensor[(24, 144), float32] */;
  %450 = max(%449) /* ty=float32 */;
  %451 = min(%449) /* ty=float32 */;
  %452 = divide(%450, 127f /* ty=float32 */) /* ty=float32 */;
  %453 = divide(%451, -127f /* ty=float32 */) /* ty=float32 */;
  %454 = maximum(%452, %453) /* ty=float32 */;
  %455 = divide(%449, %454) /* ty=Tensor[(24, 144), float32] */;
  %456 = round(%455) /* ty=Tensor[(24, 144), float32] */;
  %464 = reshape(%layers_2_conv1_weight, newshape=[144, 24]) /* from_string */ /* ty=Tensor[(144, 24), float32] */;
  %465 = max(%464) /* ty=float32 */;
  %466 = min(%464) /* ty=float32 */;
  %467 = divide(%465, 127f /* ty=float32 */) /* ty=float32 */;
  %468 = divide(%466, -127f /* ty=float32 */) /* ty=float32 */;
  %469 = maximum(%467, %468) /* ty=float32 */;
  %470 = divide(%464, %469) /* ty=Tensor[(144, 24), float32] */;
  %471 = round(%470) /* ty=Tensor[(144, 24), float32] */;
  %479 = reshape(%layers_1_conv3_weight, newshape=[24, 96]) /* from_string */ /* ty=Tensor[(24, 96), float32] */;
  %480 = max(%479) /* ty=float32 */;
  %481 = min(%479) /* ty=float32 */;
  %482 = divide(%480, 127f /* ty=float32 */) /* ty=float32 */;
  %483 = divide(%481, -127f /* ty=float32 */) /* ty=float32 */;
  %484 = maximum(%482, %483) /* ty=float32 */;
  %485 = divide(%479, %484) /* ty=Tensor[(24, 96), float32] */;
  %486 = round(%485) /* ty=Tensor[(24, 96), float32] */;
  %494 = reshape(%layers_1_conv1_weight, newshape=[96, 16]) /* from_string */ /* ty=Tensor[(96, 16), float32] */;
  %495 = max(%494) /* ty=float32 */;
  %496 = min(%494) /* ty=float32 */;
  %497 = divide(%495, 127f /* ty=float32 */) /* ty=float32 */;
  %498 = divide(%496, -127f /* ty=float32 */) /* ty=float32 */;
  %499 = maximum(%497, %498) /* ty=float32 */;
  %500 = divide(%494, %499) /* ty=Tensor[(96, 16), float32] */;
  %501 = round(%500) /* ty=Tensor[(96, 16), float32] */;
  %509 = reshape(%layers_0_conv3_weight, newshape=[16, 32]) /* from_string */ /* ty=Tensor[(16, 32), float32] */;
  %510 = max(%509) /* ty=float32 */;
  %511 = min(%509) /* ty=float32 */;
  %512 = divide(%510, 127f /* ty=float32 */) /* ty=float32 */;
  %513 = divide(%511, -127f /* ty=float32 */) /* ty=float32 */;
  %514 = maximum(%512, %513) /* ty=float32 */;
  %515 = divide(%509, %514) /* ty=Tensor[(16, 32), float32] */;
  %516 = round(%515) /* ty=Tensor[(16, 32), float32] */;
  %524 = reshape(%layers_0_conv1_weight, newshape=[32, 32]) /* from_string */ /* ty=Tensor[(32, 32), float32] */;
  %525 = max(%524) /* ty=float32 */;
  %526 = min(%524) /* ty=float32 */;
  %527 = divide(%525, 127f /* ty=float32 */) /* ty=float32 */;
  %528 = divide(%526, -127f /* ty=float32 */) /* ty=float32 */;
  %529 = maximum(%527, %528) /* ty=float32 */;
  %530 = divide(%524, %529) /* ty=Tensor[(32, 32), float32] */;
  %531 = round(%530) /* ty=Tensor[(32, 32), float32] */;
  %539 = reshape(%conv1_weight, newshape=[32, 27]) /* from_string */ /* ty=Tensor[(32, 27), float32] */;
  %540 = max(%539) /* ty=float32 */;
  %541 = min(%539) /* ty=float32 */;
  %542 = divide(%540, 127f /* ty=float32 */) /* ty=float32 */;
  %543 = divide(%541, -127f /* ty=float32 */) /* ty=float32 */;
  %544 = maximum(%542, %543) /* ty=float32 */;
  %545 = divide(%539, %544) /* ty=Tensor[(32, 27), float32] */;
  %546 = round(%545) /* ty=Tensor[(32, 27), float32] */;
  %547 = nn.pad(%input0, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [1, 1], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 3, 34, 32), float32] */;
  %548 = nn.pad(%547, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [1, 1]]) /* from_string */ /* ty=Tensor[(1, 3, 34, 34), float32] */;
  %549 = windows(%548, axis=1, window_shape=[3, 3, 3], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 32, 32, 3, 3, 3), float32] */;
  %550 = squeeze(%549, axis=[1]) /* from_string */ /* ty=Tensor[(1, 32, 32, 3, 3, 3), float32] */;
  %551 = reshape(%550, newshape=[1024, 27]) /* from_string */ /* ty=Tensor[(1024, 27), float32] */;
  %552 = max(%551) /* ty=float32 */;
  %553 = min(%551) /* ty=float32 */;
  %554 = divide(%552, 127f /* ty=float32 */) /* ty=float32 */;
  %555 = divide(%553, -127f /* ty=float32 */) /* ty=float32 */;
  %556 = maximum(%554, %555) /* ty=float32 */;
  %557 = divide(%551, %556) /* ty=Tensor[(1024, 27), float32] */;
  %558 = round(%557) /* ty=Tensor[(1024, 27), float32] */;
  %559 = nn.dense(%539, %551, units=None) /* ty=Tensor[(32, 1024), float32] */;
  %560 = max(%559) /* ty=float32 */;
  %561 = min(%559) /* ty=float32 */;
  %562 = divide(%560, 127f /* ty=float32 */) /* ty=float32 */;
  %563 = divide(%561, -127f /* ty=float32 */) /* ty=float32 */;
  %564 = cast(%546, dtype="int8") /* ty=Tensor[(32, 27), int8] */;
  %565 = cast(%558, dtype="int8") /* ty=Tensor[(1024, 27), int8] */;
  %566 = maximum(%562, %563) /* ty=float32 */;
  %567 = fn (%outer_arg_036: Tensor[(32, 27), int8], %outer_arg_136: Tensor[(1024, 27), int8], %outer_arg_236: float32, %outer_arg_336: float32, %outer_arg_436: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_0") -> Tensor[(32, 1024), int8] {
    %538 = fn (%data36: Tensor[(32, 27), int8], %weights36: Tensor[(1024, 27), int8], %s_data36: float32, %s_w36: float32, %s_act36: float32, Composite="ilavta.dense") -> Tensor[(32, 1024), int8] {
      %532 = nn.dense(%data36, %weights36, units=None, out_dtype="int32") /* ty=Tensor[(32, 1024), int32] */;
      %533 = multiply(%s_data36, %s_w36) /* ty=float32 */;
      %534 = cast(%532, dtype="float32") /* ty=Tensor[(32, 1024), float32] */;
      %535 = divide(%533, %s_act36) /* ty=float32 */;
      %536 = multiply(%534, %535) /* ty=Tensor[(32, 1024), float32] */;
      %537 = clip(%536, a_min=-127f, a_max=127f) /* ty=Tensor[(32, 1024), float32] */;
      cast(%537, dtype="int8") /* ty=Tensor[(32, 1024), int8] */
    };
    %538(%outer_arg_036, %outer_arg_136, %outer_arg_236, %outer_arg_336, %outer_arg_436) /* ty=Tensor[(32, 1024), int8] */
  };
  %568 = %567(%564, %565, %544, %556, %566) /* ty=Tensor[(32, 1024), int8] */;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(32, 1024), float32] */;
  %570 = multiply(%569, %566) /* ty=Tensor[(32, 1024), float32] */;
  %571 = reshape(%570, newshape=[32, 1, 32, 32]) /* from_string */ /* ty=Tensor[(32, 1, 32, 32), float32] */;
  %572 = add(%bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(32), float32] */;
  %573 = expand_dims(1f /* ty=float32 */, axis=0) /* from_string */ /* ty=Tensor[(1), float32] */;
  %574 = sqrt(%572) /* from_string */ /* ty=Tensor[(32), float32] */;
  %575 = divide(%573, %574) /* from_string */ /* ty=Tensor[(32), float32] */;
  %576 = multiply(%575, %bn1_weight) /* from_string */ /* ty=Tensor[(32), float32] */;
  %577 = expand_dims(%576, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %578 = transpose(%571, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %579 = expand_dims(%577, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %580 = negative(%bn1_running_mean) /* from_string */ /* ty=Tensor[(32), float32] */;
  %581 = multiply(%580, %576) /* from_string */ /* ty=Tensor[(32), float32] */;
  %582 = add(%581, %bn1_bias) /* from_string */ /* ty=Tensor[(32), float32] */;
  %583 = expand_dims(%582, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %584 = multiply(%578, %579) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %585 = expand_dims(%583, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %586 = add(%584, %585) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %587 = nn.relu(%586) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %588 = nn.pad(%587, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %589 = nn.pad(%588, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %590 = windows(%589, axis=1, window_shape=[32, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 32, 32, 32, 1, 1), float32] */;
  %591 = squeeze(%590, axis=[1]) /* from_string */ /* ty=Tensor[(1, 32, 32, 32, 1, 1), float32] */;
  %592 = reshape(%591, newshape=[1024, 32]) /* from_string */ /* ty=Tensor[(1024, 32), float32] */;
  %593 = max(%592) /* ty=float32 */;
  %594 = min(%592) /* ty=float32 */;
  %595 = divide(%593, 127f /* ty=float32 */) /* ty=float32 */;
  %596 = divide(%594, -127f /* ty=float32 */) /* ty=float32 */;
  %597 = maximum(%595, %596) /* ty=float32 */;
  %598 = divide(%592, %597) /* ty=Tensor[(1024, 32), float32] */;
  %599 = round(%598) /* ty=Tensor[(1024, 32), float32] */;
  %600 = nn.dense(%524, %592, units=None) /* ty=Tensor[(32, 1024), float32] */;
  %601 = max(%600) /* ty=float32 */;
  %602 = min(%600) /* ty=float32 */;
  %603 = divide(%601, 127f /* ty=float32 */) /* ty=float32 */;
  %604 = divide(%602, -127f /* ty=float32 */) /* ty=float32 */;
  %605 = cast(%531, dtype="int8") /* ty=Tensor[(32, 32), int8] */;
  %606 = cast(%599, dtype="int8") /* ty=Tensor[(1024, 32), int8] */;
  %607 = maximum(%603, %604) /* ty=float32 */;
  %608 = fn (%outer_arg_035: Tensor[(32, 32), int8], %outer_arg_135: Tensor[(1024, 32), int8], %outer_arg_235: float32, %outer_arg_335: float32, %outer_arg_435: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_1") -> Tensor[(32, 1024), int8] {
    %523 = fn (%data35: Tensor[(32, 32), int8], %weights35: Tensor[(1024, 32), int8], %s_data35: float32, %s_w35: float32, %s_act35: float32, Composite="ilavta.dense") -> Tensor[(32, 1024), int8] {
      %517 = nn.dense(%data35, %weights35, units=None, out_dtype="int32") /* ty=Tensor[(32, 1024), int32] */;
      %518 = multiply(%s_data35, %s_w35) /* ty=float32 */;
      %519 = cast(%517, dtype="float32") /* ty=Tensor[(32, 1024), float32] */;
      %520 = divide(%518, %s_act35) /* ty=float32 */;
      %521 = multiply(%519, %520) /* ty=Tensor[(32, 1024), float32] */;
      %522 = clip(%521, a_min=-127f, a_max=127f) /* ty=Tensor[(32, 1024), float32] */;
      cast(%522, dtype="int8") /* ty=Tensor[(32, 1024), int8] */
    };
    %523(%outer_arg_035, %outer_arg_135, %outer_arg_235, %outer_arg_335, %outer_arg_435) /* ty=Tensor[(32, 1024), int8] */
  };
  %609 = %608(%605, %606, %529, %597, %607) /* ty=Tensor[(32, 1024), int8] */;
  %610 = cast(%609, dtype="float32") /* ty=Tensor[(32, 1024), float32] */;
  %611 = multiply(%610, %607) /* ty=Tensor[(32, 1024), float32] */;
  %612 = reshape(%611, newshape=[32, 1, 32, 32]) /* from_string */ /* ty=Tensor[(32, 1, 32, 32), float32] */;
  %613 = add(%layers_0_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(32), float32] */;
  %614 = sqrt(%613) /* from_string */ /* ty=Tensor[(32), float32] */;
  %615 = divide(%573, %614) /* from_string */ /* ty=Tensor[(32), float32] */;
  %616 = multiply(%615, %layers_0_bn1_weight) /* from_string */ /* ty=Tensor[(32), float32] */;
  %617 = expand_dims(%616, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %618 = transpose(%612, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %619 = expand_dims(%617, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %620 = negative(%layers_0_bn1_running_mean) /* from_string */ /* ty=Tensor[(32), float32] */;
  %621 = multiply(%620, %616) /* from_string */ /* ty=Tensor[(32), float32] */;
  %622 = add(%621, %layers_0_bn1_bias) /* from_string */ /* ty=Tensor[(32), float32] */;
  %623 = expand_dims(%622, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %624 = multiply(%618, %619) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %625 = expand_dims(%623, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %626 = add(%624, %625) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %627 = nn.relu(%626) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %628 = reshape(%layers_0_conv2_weight, newshape=[32, 1, 3, 3]) /* from_string */ /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %629 = add(%layers_0_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(32), float32] */;
  %630 = sqrt(%629) /* from_string */ /* ty=Tensor[(32), float32] */;
  %631 = divide(%573, %630) /* from_string */ /* ty=Tensor[(32), float32] */;
  %632 = multiply(%631, %layers_0_bn2_weight) /* from_string */ /* ty=Tensor[(32), float32] */;
  %633 = expand_dims(%632, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %634 = nn.conv2d(%627, %628, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %635 = expand_dims(%633, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %636 = negative(%layers_0_bn2_running_mean) /* from_string */ /* ty=Tensor[(32), float32] */;
  %637 = multiply(%636, %632) /* from_string */ /* ty=Tensor[(32), float32] */;
  %638 = add(%637, %layers_0_bn2_bias) /* from_string */ /* ty=Tensor[(32), float32] */;
  %639 = expand_dims(%638, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %640 = multiply(%634, %635) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %641 = expand_dims(%639, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %642 = add(%640, %641) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %643 = nn.relu(%642) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %644 = nn.pad(%643, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %645 = nn.pad(%644, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %646 = windows(%645, axis=1, window_shape=[32, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 32, 32, 32, 1, 1), float32] */;
  %647 = squeeze(%646, axis=[1]) /* from_string */ /* ty=Tensor[(1, 32, 32, 32, 1, 1), float32] */;
  %648 = reshape(%647, newshape=[1024, 32]) /* from_string */ /* ty=Tensor[(1024, 32), float32] */;
  %649 = max(%648) /* ty=float32 */;
  %650 = min(%648) /* ty=float32 */;
  %651 = divide(%649, 127f /* ty=float32 */) /* ty=float32 */;
  %652 = divide(%650, -127f /* ty=float32 */) /* ty=float32 */;
  %653 = maximum(%651, %652) /* ty=float32 */;
  %654 = divide(%648, %653) /* ty=Tensor[(1024, 32), float32] */;
  %655 = round(%654) /* ty=Tensor[(1024, 32), float32] */;
  %656 = nn.dense(%509, %648, units=None) /* ty=Tensor[(16, 1024), float32] */;
  %657 = max(%656) /* ty=float32 */;
  %658 = min(%656) /* ty=float32 */;
  %659 = divide(%657, 127f /* ty=float32 */) /* ty=float32 */;
  %660 = divide(%658, -127f /* ty=float32 */) /* ty=float32 */;
  %661 = cast(%516, dtype="int8") /* ty=Tensor[(16, 32), int8] */;
  %662 = cast(%655, dtype="int8") /* ty=Tensor[(1024, 32), int8] */;
  %663 = maximum(%659, %660) /* ty=float32 */;
  %664 = fn (%outer_arg_034: Tensor[(16, 32), int8], %outer_arg_134: Tensor[(1024, 32), int8], %outer_arg_234: float32, %outer_arg_334: float32, %outer_arg_434: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_2") -> Tensor[(16, 1024), int8] {
    %508 = fn (%data34: Tensor[(16, 32), int8], %weights34: Tensor[(1024, 32), int8], %s_data34: float32, %s_w34: float32, %s_act34: float32, Composite="ilavta.dense") -> Tensor[(16, 1024), int8] {
      %502 = nn.dense(%data34, %weights34, units=None, out_dtype="int32") /* ty=Tensor[(16, 1024), int32] */;
      %503 = multiply(%s_data34, %s_w34) /* ty=float32 */;
      %504 = cast(%502, dtype="float32") /* ty=Tensor[(16, 1024), float32] */;
      %505 = divide(%503, %s_act34) /* ty=float32 */;
      %506 = multiply(%504, %505) /* ty=Tensor[(16, 1024), float32] */;
      %507 = clip(%506, a_min=-127f, a_max=127f) /* ty=Tensor[(16, 1024), float32] */;
      cast(%507, dtype="int8") /* ty=Tensor[(16, 1024), int8] */
    };
    %508(%outer_arg_034, %outer_arg_134, %outer_arg_234, %outer_arg_334, %outer_arg_434) /* ty=Tensor[(16, 1024), int8] */
  };
  %665 = %664(%661, %662, %514, %653, %663) /* ty=Tensor[(16, 1024), int8] */;
  %666 = cast(%665, dtype="float32") /* ty=Tensor[(16, 1024), float32] */;
  %667 = multiply(%666, %663) /* ty=Tensor[(16, 1024), float32] */;
  %668 = reshape(%667, newshape=[16, 1, 32, 32]) /* from_string */ /* ty=Tensor[(16, 1, 32, 32), float32] */;
  %669 = add(%layers_0_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(16), float32] */;
  %670 = sqrt(%669) /* from_string */ /* ty=Tensor[(16), float32] */;
  %671 = divide(%573, %670) /* from_string */ /* ty=Tensor[(16), float32] */;
  %672 = multiply(%671, %layers_0_bn3_weight) /* from_string */ /* ty=Tensor[(16), float32] */;
  %673 = expand_dims(%672, axis=1) /* from_string */ /* ty=Tensor[(16, 1), float32] */;
  %674 = transpose(%668, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %675 = expand_dims(%673, axis=1) /* from_string */ /* ty=Tensor[(16, 1, 1), float32] */;
  %676 = negative(%layers_0_bn3_running_mean) /* from_string */ /* ty=Tensor[(16), float32] */;
  %677 = multiply(%676, %672) /* from_string */ /* ty=Tensor[(16), float32] */;
  %678 = add(%677, %layers_0_bn3_bias) /* from_string */ /* ty=Tensor[(16), float32] */;
  %679 = expand_dims(%678, axis=1) /* from_string */ /* ty=Tensor[(16, 1), float32] */;
  %680 = multiply(%674, %675) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %681 = expand_dims(%679, axis=1) /* from_string */ /* ty=Tensor[(16, 1, 1), float32] */;
  %689 = reshape(%layers_0_shortcut_0_weight, newshape=[16, 32]) /* from_string */ /* ty=Tensor[(16, 32), float32] */;
  %690 = max(%689) /* ty=float32 */;
  %691 = min(%689) /* ty=float32 */;
  %692 = divide(%690, 127f /* ty=float32 */) /* ty=float32 */;
  %693 = divide(%691, -127f /* ty=float32 */) /* ty=float32 */;
  %694 = maximum(%692, %693) /* ty=float32 */;
  %695 = divide(%689, %694) /* ty=Tensor[(16, 32), float32] */;
  %696 = round(%695) /* ty=Tensor[(16, 32), float32] */;
  %697 = max(%592) /* ty=float32 */;
  %698 = min(%592) /* ty=float32 */;
  %699 = divide(%697, 127f /* ty=float32 */) /* ty=float32 */;
  %700 = divide(%698, -127f /* ty=float32 */) /* ty=float32 */;
  %701 = maximum(%699, %700) /* ty=float32 */;
  %702 = divide(%592, %701) /* ty=Tensor[(1024, 32), float32] */;
  %703 = round(%702) /* ty=Tensor[(1024, 32), float32] */;
  %704 = nn.dense(%689, %592, units=None) /* ty=Tensor[(16, 1024), float32] */;
  %705 = max(%704) /* ty=float32 */;
  %706 = min(%704) /* ty=float32 */;
  %707 = divide(%705, 127f /* ty=float32 */) /* ty=float32 */;
  %708 = divide(%706, -127f /* ty=float32 */) /* ty=float32 */;
  %709 = cast(%696, dtype="int8") /* ty=Tensor[(16, 32), int8] */;
  %710 = cast(%703, dtype="int8") /* ty=Tensor[(1024, 32), int8] */;
  %711 = maximum(%707, %708) /* ty=float32 */;
  %712 = fn (%outer_arg_037: Tensor[(16, 32), int8], %outer_arg_137: Tensor[(1024, 32), int8], %outer_arg_237: float32, %outer_arg_337: float32, %outer_arg_437: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_3") -> Tensor[(16, 1024), int8] {
    %688 = fn (%data37: Tensor[(16, 32), int8], %weights37: Tensor[(1024, 32), int8], %s_data37: float32, %s_w37: float32, %s_act37: float32, Composite="ilavta.dense") -> Tensor[(16, 1024), int8] {
      %682 = nn.dense(%data37, %weights37, units=None, out_dtype="int32") /* ty=Tensor[(16, 1024), int32] */;
      %683 = multiply(%s_data37, %s_w37) /* ty=float32 */;
      %684 = cast(%682, dtype="float32") /* ty=Tensor[(16, 1024), float32] */;
      %685 = divide(%683, %s_act37) /* ty=float32 */;
      %686 = multiply(%684, %685) /* ty=Tensor[(16, 1024), float32] */;
      %687 = clip(%686, a_min=-127f, a_max=127f) /* ty=Tensor[(16, 1024), float32] */;
      cast(%687, dtype="int8") /* ty=Tensor[(16, 1024), int8] */
    };
    %688(%outer_arg_037, %outer_arg_137, %outer_arg_237, %outer_arg_337, %outer_arg_437) /* ty=Tensor[(16, 1024), int8] */
  };
  %713 = %712(%709, %710, %694, %701, %711) /* ty=Tensor[(16, 1024), int8] */;
  %714 = cast(%713, dtype="float32") /* ty=Tensor[(16, 1024), float32] */;
  %715 = multiply(%714, %711) /* ty=Tensor[(16, 1024), float32] */;
  %716 = reshape(%715, newshape=[16, 1, 32, 32]) /* from_string */ /* ty=Tensor[(16, 1, 32, 32), float32] */;
  %717 = add(%layers_0_shortcut_1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(16), float32] */;
  %718 = sqrt(%717) /* from_string */ /* ty=Tensor[(16), float32] */;
  %719 = divide(%573, %718) /* from_string */ /* ty=Tensor[(16), float32] */;
  %720 = multiply(%719, %layers_0_shortcut_1_weight) /* from_string */ /* ty=Tensor[(16), float32] */;
  %721 = expand_dims(%720, axis=1) /* from_string */ /* ty=Tensor[(16, 1), float32] */;
  %722 = transpose(%716, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %723 = expand_dims(%721, axis=1) /* from_string */ /* ty=Tensor[(16, 1, 1), float32] */;
  %724 = negative(%layers_0_shortcut_1_running_mean) /* from_string */ /* ty=Tensor[(16), float32] */;
  %725 = multiply(%724, %720) /* from_string */ /* ty=Tensor[(16), float32] */;
  %726 = add(%725, %layers_0_shortcut_1_bias) /* from_string */ /* ty=Tensor[(16), float32] */;
  %727 = expand_dims(%726, axis=1) /* from_string */ /* ty=Tensor[(16, 1), float32] */;
  %728 = multiply(%722, %723) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %729 = expand_dims(%727, axis=1) /* from_string */ /* ty=Tensor[(16, 1, 1), float32] */;
  %730 = add(%680, %681) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %731 = add(%728, %729) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %732 = add(%730, %731) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %733 = nn.pad(%732, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %734 = nn.pad(%733, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), float32] */;
  %735 = windows(%734, axis=1, window_shape=[16, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 32, 32, 16, 1, 1), float32] */;
  %736 = squeeze(%735, axis=[1]) /* from_string */ /* ty=Tensor[(1, 32, 32, 16, 1, 1), float32] */;
  %737 = reshape(%736, newshape=[1024, 16]) /* from_string */ /* ty=Tensor[(1024, 16), float32] */;
  %738 = max(%737) /* ty=float32 */;
  %739 = min(%737) /* ty=float32 */;
  %740 = divide(%738, 127f /* ty=float32 */) /* ty=float32 */;
  %741 = divide(%739, -127f /* ty=float32 */) /* ty=float32 */;
  %742 = maximum(%740, %741) /* ty=float32 */;
  %743 = divide(%737, %742) /* ty=Tensor[(1024, 16), float32] */;
  %744 = round(%743) /* ty=Tensor[(1024, 16), float32] */;
  %745 = nn.dense(%494, %737, units=None) /* ty=Tensor[(96, 1024), float32] */;
  %746 = max(%745) /* ty=float32 */;
  %747 = min(%745) /* ty=float32 */;
  %748 = divide(%746, 127f /* ty=float32 */) /* ty=float32 */;
  %749 = divide(%747, -127f /* ty=float32 */) /* ty=float32 */;
  %750 = cast(%501, dtype="int8") /* ty=Tensor[(96, 16), int8] */;
  %751 = cast(%744, dtype="int8") /* ty=Tensor[(1024, 16), int8] */;
  %752 = maximum(%748, %749) /* ty=float32 */;
  %753 = fn (%outer_arg_033: Tensor[(96, 16), int8], %outer_arg_133: Tensor[(1024, 16), int8], %outer_arg_233: float32, %outer_arg_333: float32, %outer_arg_433: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_4") -> Tensor[(96, 1024), int8] {
    %493 = fn (%data33: Tensor[(96, 16), int8], %weights33: Tensor[(1024, 16), int8], %s_data33: float32, %s_w33: float32, %s_act33: float32, Composite="ilavta.dense") -> Tensor[(96, 1024), int8] {
      %487 = nn.dense(%data33, %weights33, units=None, out_dtype="int32") /* ty=Tensor[(96, 1024), int32] */;
      %488 = multiply(%s_data33, %s_w33) /* ty=float32 */;
      %489 = cast(%487, dtype="float32") /* ty=Tensor[(96, 1024), float32] */;
      %490 = divide(%488, %s_act33) /* ty=float32 */;
      %491 = multiply(%489, %490) /* ty=Tensor[(96, 1024), float32] */;
      %492 = clip(%491, a_min=-127f, a_max=127f) /* ty=Tensor[(96, 1024), float32] */;
      cast(%492, dtype="int8") /* ty=Tensor[(96, 1024), int8] */
    };
    %493(%outer_arg_033, %outer_arg_133, %outer_arg_233, %outer_arg_333, %outer_arg_433) /* ty=Tensor[(96, 1024), int8] */
  };
  %754 = %753(%750, %751, %499, %742, %752) /* ty=Tensor[(96, 1024), int8] */;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(96, 1024), float32] */;
  %756 = multiply(%755, %752) /* ty=Tensor[(96, 1024), float32] */;
  %757 = reshape(%756, newshape=[96, 1, 32, 32]) /* from_string */ /* ty=Tensor[(96, 1, 32, 32), float32] */;
  %758 = add(%layers_1_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(96), float32] */;
  %759 = sqrt(%758) /* from_string */ /* ty=Tensor[(96), float32] */;
  %760 = divide(%573, %759) /* from_string */ /* ty=Tensor[(96), float32] */;
  %761 = multiply(%760, %layers_1_bn1_weight) /* from_string */ /* ty=Tensor[(96), float32] */;
  %762 = expand_dims(%761, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %763 = transpose(%757, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %764 = expand_dims(%762, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %765 = negative(%layers_1_bn1_running_mean) /* from_string */ /* ty=Tensor[(96), float32] */;
  %766 = multiply(%765, %761) /* from_string */ /* ty=Tensor[(96), float32] */;
  %767 = add(%766, %layers_1_bn1_bias) /* from_string */ /* ty=Tensor[(96), float32] */;
  %768 = expand_dims(%767, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %769 = multiply(%763, %764) /* from_string */ /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %770 = expand_dims(%768, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %771 = add(%769, %770) /* from_string */ /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %772 = nn.relu(%771) /* from_string */ /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %773 = reshape(%layers_1_conv2_weight, newshape=[96, 1, 3, 3]) /* from_string */ /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %774 = add(%layers_1_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(96), float32] */;
  %775 = sqrt(%774) /* from_string */ /* ty=Tensor[(96), float32] */;
  %776 = divide(%573, %775) /* from_string */ /* ty=Tensor[(96), float32] */;
  %777 = multiply(%776, %layers_1_bn2_weight) /* from_string */ /* ty=Tensor[(96), float32] */;
  %778 = expand_dims(%777, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %779 = nn.conv2d(%772, %773, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %780 = expand_dims(%778, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %781 = negative(%layers_1_bn2_running_mean) /* from_string */ /* ty=Tensor[(96), float32] */;
  %782 = multiply(%781, %777) /* from_string */ /* ty=Tensor[(96), float32] */;
  %783 = add(%782, %layers_1_bn2_bias) /* from_string */ /* ty=Tensor[(96), float32] */;
  %784 = expand_dims(%783, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %785 = multiply(%779, %780) /* from_string */ /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %786 = expand_dims(%784, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %787 = add(%785, %786) /* from_string */ /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %788 = nn.relu(%787) /* from_string */ /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %789 = nn.pad(%788, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %790 = nn.pad(%789, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 96, 32, 32), float32] */;
  %791 = windows(%790, axis=1, window_shape=[96, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 32, 32, 96, 1, 1), float32] */;
  %792 = squeeze(%791, axis=[1]) /* from_string */ /* ty=Tensor[(1, 32, 32, 96, 1, 1), float32] */;
  %793 = reshape(%792, newshape=[1024, 96]) /* from_string */ /* ty=Tensor[(1024, 96), float32] */;
  %794 = max(%793) /* ty=float32 */;
  %795 = min(%793) /* ty=float32 */;
  %796 = divide(%794, 127f /* ty=float32 */) /* ty=float32 */;
  %797 = divide(%795, -127f /* ty=float32 */) /* ty=float32 */;
  %798 = maximum(%796, %797) /* ty=float32 */;
  %799 = divide(%793, %798) /* ty=Tensor[(1024, 96), float32] */;
  %800 = round(%799) /* ty=Tensor[(1024, 96), float32] */;
  %801 = nn.dense(%479, %793, units=None) /* ty=Tensor[(24, 1024), float32] */;
  %802 = max(%801) /* ty=float32 */;
  %803 = min(%801) /* ty=float32 */;
  %804 = divide(%802, 127f /* ty=float32 */) /* ty=float32 */;
  %805 = divide(%803, -127f /* ty=float32 */) /* ty=float32 */;
  %806 = cast(%486, dtype="int8") /* ty=Tensor[(24, 96), int8] */;
  %807 = cast(%800, dtype="int8") /* ty=Tensor[(1024, 96), int8] */;
  %808 = maximum(%804, %805) /* ty=float32 */;
  %809 = fn (%outer_arg_032: Tensor[(24, 96), int8], %outer_arg_132: Tensor[(1024, 96), int8], %outer_arg_232: float32, %outer_arg_332: float32, %outer_arg_432: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_5") -> Tensor[(24, 1024), int8] {
    %478 = fn (%data32: Tensor[(24, 96), int8], %weights32: Tensor[(1024, 96), int8], %s_data32: float32, %s_w32: float32, %s_act32: float32, Composite="ilavta.dense") -> Tensor[(24, 1024), int8] {
      %472 = nn.dense(%data32, %weights32, units=None, out_dtype="int32") /* ty=Tensor[(24, 1024), int32] */;
      %473 = multiply(%s_data32, %s_w32) /* ty=float32 */;
      %474 = cast(%472, dtype="float32") /* ty=Tensor[(24, 1024), float32] */;
      %475 = divide(%473, %s_act32) /* ty=float32 */;
      %476 = multiply(%474, %475) /* ty=Tensor[(24, 1024), float32] */;
      %477 = clip(%476, a_min=-127f, a_max=127f) /* ty=Tensor[(24, 1024), float32] */;
      cast(%477, dtype="int8") /* ty=Tensor[(24, 1024), int8] */
    };
    %478(%outer_arg_032, %outer_arg_132, %outer_arg_232, %outer_arg_332, %outer_arg_432) /* ty=Tensor[(24, 1024), int8] */
  };
  %810 = %809(%806, %807, %484, %798, %808) /* ty=Tensor[(24, 1024), int8] */;
  %811 = cast(%810, dtype="float32") /* ty=Tensor[(24, 1024), float32] */;
  %812 = multiply(%811, %808) /* ty=Tensor[(24, 1024), float32] */;
  %813 = reshape(%812, newshape=[24, 1, 32, 32]) /* from_string */ /* ty=Tensor[(24, 1, 32, 32), float32] */;
  %814 = add(%layers_1_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(24), float32] */;
  %815 = sqrt(%814) /* from_string */ /* ty=Tensor[(24), float32] */;
  %816 = divide(%573, %815) /* from_string */ /* ty=Tensor[(24), float32] */;
  %817 = multiply(%816, %layers_1_bn3_weight) /* from_string */ /* ty=Tensor[(24), float32] */;
  %818 = expand_dims(%817, axis=1) /* from_string */ /* ty=Tensor[(24, 1), float32] */;
  %819 = transpose(%813, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %820 = expand_dims(%818, axis=1) /* from_string */ /* ty=Tensor[(24, 1, 1), float32] */;
  %821 = negative(%layers_1_bn3_running_mean) /* from_string */ /* ty=Tensor[(24), float32] */;
  %822 = multiply(%821, %817) /* from_string */ /* ty=Tensor[(24), float32] */;
  %823 = add(%822, %layers_1_bn3_bias) /* from_string */ /* ty=Tensor[(24), float32] */;
  %824 = expand_dims(%823, axis=1) /* from_string */ /* ty=Tensor[(24, 1), float32] */;
  %825 = multiply(%819, %820) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %826 = expand_dims(%824, axis=1) /* from_string */ /* ty=Tensor[(24, 1, 1), float32] */;
  %834 = reshape(%layers_1_shortcut_0_weight, newshape=[24, 16]) /* from_string */ /* ty=Tensor[(24, 16), float32] */;
  %835 = max(%834) /* ty=float32 */;
  %836 = min(%834) /* ty=float32 */;
  %837 = divide(%835, 127f /* ty=float32 */) /* ty=float32 */;
  %838 = divide(%836, -127f /* ty=float32 */) /* ty=float32 */;
  %839 = maximum(%837, %838) /* ty=float32 */;
  %840 = divide(%834, %839) /* ty=Tensor[(24, 16), float32] */;
  %841 = round(%840) /* ty=Tensor[(24, 16), float32] */;
  %842 = max(%737) /* ty=float32 */;
  %843 = min(%737) /* ty=float32 */;
  %844 = divide(%842, 127f /* ty=float32 */) /* ty=float32 */;
  %845 = divide(%843, -127f /* ty=float32 */) /* ty=float32 */;
  %846 = maximum(%844, %845) /* ty=float32 */;
  %847 = divide(%737, %846) /* ty=Tensor[(1024, 16), float32] */;
  %848 = round(%847) /* ty=Tensor[(1024, 16), float32] */;
  %849 = nn.dense(%834, %737, units=None) /* ty=Tensor[(24, 1024), float32] */;
  %850 = max(%849) /* ty=float32 */;
  %851 = min(%849) /* ty=float32 */;
  %852 = divide(%850, 127f /* ty=float32 */) /* ty=float32 */;
  %853 = divide(%851, -127f /* ty=float32 */) /* ty=float32 */;
  %854 = cast(%841, dtype="int8") /* ty=Tensor[(24, 16), int8] */;
  %855 = cast(%848, dtype="int8") /* ty=Tensor[(1024, 16), int8] */;
  %856 = maximum(%852, %853) /* ty=float32 */;
  %857 = fn (%outer_arg_038: Tensor[(24, 16), int8], %outer_arg_138: Tensor[(1024, 16), int8], %outer_arg_238: float32, %outer_arg_338: float32, %outer_arg_438: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_6") -> Tensor[(24, 1024), int8] {
    %833 = fn (%data38: Tensor[(24, 16), int8], %weights38: Tensor[(1024, 16), int8], %s_data38: float32, %s_w38: float32, %s_act38: float32, Composite="ilavta.dense") -> Tensor[(24, 1024), int8] {
      %827 = nn.dense(%data38, %weights38, units=None, out_dtype="int32") /* ty=Tensor[(24, 1024), int32] */;
      %828 = multiply(%s_data38, %s_w38) /* ty=float32 */;
      %829 = cast(%827, dtype="float32") /* ty=Tensor[(24, 1024), float32] */;
      %830 = divide(%828, %s_act38) /* ty=float32 */;
      %831 = multiply(%829, %830) /* ty=Tensor[(24, 1024), float32] */;
      %832 = clip(%831, a_min=-127f, a_max=127f) /* ty=Tensor[(24, 1024), float32] */;
      cast(%832, dtype="int8") /* ty=Tensor[(24, 1024), int8] */
    };
    %833(%outer_arg_038, %outer_arg_138, %outer_arg_238, %outer_arg_338, %outer_arg_438) /* ty=Tensor[(24, 1024), int8] */
  };
  %858 = %857(%854, %855, %839, %846, %856) /* ty=Tensor[(24, 1024), int8] */;
  %859 = cast(%858, dtype="float32") /* ty=Tensor[(24, 1024), float32] */;
  %860 = multiply(%859, %856) /* ty=Tensor[(24, 1024), float32] */;
  %861 = reshape(%860, newshape=[24, 1, 32, 32]) /* from_string */ /* ty=Tensor[(24, 1, 32, 32), float32] */;
  %862 = add(%layers_1_shortcut_1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(24), float32] */;
  %863 = sqrt(%862) /* from_string */ /* ty=Tensor[(24), float32] */;
  %864 = divide(%573, %863) /* from_string */ /* ty=Tensor[(24), float32] */;
  %865 = multiply(%864, %layers_1_shortcut_1_weight) /* from_string */ /* ty=Tensor[(24), float32] */;
  %866 = expand_dims(%865, axis=1) /* from_string */ /* ty=Tensor[(24, 1), float32] */;
  %867 = transpose(%861, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %868 = expand_dims(%866, axis=1) /* from_string */ /* ty=Tensor[(24, 1, 1), float32] */;
  %869 = negative(%layers_1_shortcut_1_running_mean) /* from_string */ /* ty=Tensor[(24), float32] */;
  %870 = multiply(%869, %865) /* from_string */ /* ty=Tensor[(24), float32] */;
  %871 = add(%870, %layers_1_shortcut_1_bias) /* from_string */ /* ty=Tensor[(24), float32] */;
  %872 = expand_dims(%871, axis=1) /* from_string */ /* ty=Tensor[(24, 1), float32] */;
  %873 = multiply(%867, %868) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %874 = expand_dims(%872, axis=1) /* from_string */ /* ty=Tensor[(24, 1, 1), float32] */;
  %875 = add(%825, %826) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %876 = add(%873, %874) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %877 = add(%875, %876) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %878 = nn.pad(%877, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %879 = nn.pad(%878, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %880 = windows(%879, axis=1, window_shape=[24, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 32, 32, 24, 1, 1), float32] */;
  %881 = squeeze(%880, axis=[1]) /* from_string */ /* ty=Tensor[(1, 32, 32, 24, 1, 1), float32] */;
  %882 = reshape(%881, newshape=[1024, 24]) /* from_string */ /* ty=Tensor[(1024, 24), float32] */;
  %883 = max(%882) /* ty=float32 */;
  %884 = min(%882) /* ty=float32 */;
  %885 = divide(%883, 127f /* ty=float32 */) /* ty=float32 */;
  %886 = divide(%884, -127f /* ty=float32 */) /* ty=float32 */;
  %887 = maximum(%885, %886) /* ty=float32 */;
  %888 = divide(%882, %887) /* ty=Tensor[(1024, 24), float32] */;
  %889 = round(%888) /* ty=Tensor[(1024, 24), float32] */;
  %890 = nn.dense(%464, %882, units=None) /* ty=Tensor[(144, 1024), float32] */;
  %891 = max(%890) /* ty=float32 */;
  %892 = min(%890) /* ty=float32 */;
  %893 = divide(%891, 127f /* ty=float32 */) /* ty=float32 */;
  %894 = divide(%892, -127f /* ty=float32 */) /* ty=float32 */;
  %895 = cast(%471, dtype="int8") /* ty=Tensor[(144, 24), int8] */;
  %896 = cast(%889, dtype="int8") /* ty=Tensor[(1024, 24), int8] */;
  %897 = maximum(%893, %894) /* ty=float32 */;
  %898 = fn (%outer_arg_031: Tensor[(144, 24), int8], %outer_arg_131: Tensor[(1024, 24), int8], %outer_arg_231: float32, %outer_arg_331: float32, %outer_arg_431: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_7") -> Tensor[(144, 1024), int8] {
    %463 = fn (%data31: Tensor[(144, 24), int8], %weights31: Tensor[(1024, 24), int8], %s_data31: float32, %s_w31: float32, %s_act31: float32, Composite="ilavta.dense") -> Tensor[(144, 1024), int8] {
      %457 = nn.dense(%data31, %weights31, units=None, out_dtype="int32") /* ty=Tensor[(144, 1024), int32] */;
      %458 = multiply(%s_data31, %s_w31) /* ty=float32 */;
      %459 = cast(%457, dtype="float32") /* ty=Tensor[(144, 1024), float32] */;
      %460 = divide(%458, %s_act31) /* ty=float32 */;
      %461 = multiply(%459, %460) /* ty=Tensor[(144, 1024), float32] */;
      %462 = clip(%461, a_min=-127f, a_max=127f) /* ty=Tensor[(144, 1024), float32] */;
      cast(%462, dtype="int8") /* ty=Tensor[(144, 1024), int8] */
    };
    %463(%outer_arg_031, %outer_arg_131, %outer_arg_231, %outer_arg_331, %outer_arg_431) /* ty=Tensor[(144, 1024), int8] */
  };
  %899 = %898(%895, %896, %469, %887, %897) /* ty=Tensor[(144, 1024), int8] */;
  %900 = cast(%899, dtype="float32") /* ty=Tensor[(144, 1024), float32] */;
  %901 = multiply(%900, %897) /* ty=Tensor[(144, 1024), float32] */;
  %902 = reshape(%901, newshape=[144, 1, 32, 32]) /* from_string */ /* ty=Tensor[(144, 1, 32, 32), float32] */;
  %903 = add(%layers_2_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(144), float32] */;
  %904 = sqrt(%903) /* from_string */ /* ty=Tensor[(144), float32] */;
  %905 = divide(%573, %904) /* from_string */ /* ty=Tensor[(144), float32] */;
  %906 = multiply(%905, %layers_2_bn1_weight) /* from_string */ /* ty=Tensor[(144), float32] */;
  %907 = expand_dims(%906, axis=1) /* from_string */ /* ty=Tensor[(144, 1), float32] */;
  %908 = transpose(%902, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %909 = expand_dims(%907, axis=1) /* from_string */ /* ty=Tensor[(144, 1, 1), float32] */;
  %910 = negative(%layers_2_bn1_running_mean) /* from_string */ /* ty=Tensor[(144), float32] */;
  %911 = multiply(%910, %906) /* from_string */ /* ty=Tensor[(144), float32] */;
  %912 = add(%911, %layers_2_bn1_bias) /* from_string */ /* ty=Tensor[(144), float32] */;
  %913 = expand_dims(%912, axis=1) /* from_string */ /* ty=Tensor[(144, 1), float32] */;
  %914 = multiply(%908, %909) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %915 = expand_dims(%913, axis=1) /* from_string */ /* ty=Tensor[(144, 1, 1), float32] */;
  %916 = add(%914, %915) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %917 = nn.relu(%916) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %918 = reshape(%layers_2_conv2_weight, newshape=[144, 1, 3, 3]) /* from_string */ /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %919 = add(%layers_2_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(144), float32] */;
  %920 = sqrt(%919) /* from_string */ /* ty=Tensor[(144), float32] */;
  %921 = divide(%573, %920) /* from_string */ /* ty=Tensor[(144), float32] */;
  %922 = multiply(%921, %layers_2_bn2_weight) /* from_string */ /* ty=Tensor[(144), float32] */;
  %923 = expand_dims(%922, axis=1) /* from_string */ /* ty=Tensor[(144, 1), float32] */;
  %924 = nn.conv2d(%917, %918, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %925 = expand_dims(%923, axis=1) /* from_string */ /* ty=Tensor[(144, 1, 1), float32] */;
  %926 = negative(%layers_2_bn2_running_mean) /* from_string */ /* ty=Tensor[(144), float32] */;
  %927 = multiply(%926, %922) /* from_string */ /* ty=Tensor[(144), float32] */;
  %928 = add(%927, %layers_2_bn2_bias) /* from_string */ /* ty=Tensor[(144), float32] */;
  %929 = expand_dims(%928, axis=1) /* from_string */ /* ty=Tensor[(144, 1), float32] */;
  %930 = multiply(%924, %925) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %931 = expand_dims(%929, axis=1) /* from_string */ /* ty=Tensor[(144, 1, 1), float32] */;
  %932 = add(%930, %931) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %933 = nn.relu(%932) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %934 = nn.pad(%933, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %935 = nn.pad(%934, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %936 = windows(%935, axis=1, window_shape=[144, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 32, 32, 144, 1, 1), float32] */;
  %937 = squeeze(%936, axis=[1]) /* from_string */ /* ty=Tensor[(1, 32, 32, 144, 1, 1), float32] */;
  %938 = reshape(%937, newshape=[1024, 144]) /* from_string */ /* ty=Tensor[(1024, 144), float32] */;
  %939 = max(%938) /* ty=float32 */;
  %940 = min(%938) /* ty=float32 */;
  %941 = divide(%939, 127f /* ty=float32 */) /* ty=float32 */;
  %942 = divide(%940, -127f /* ty=float32 */) /* ty=float32 */;
  %943 = maximum(%941, %942) /* ty=float32 */;
  %944 = divide(%938, %943) /* ty=Tensor[(1024, 144), float32] */;
  %945 = round(%944) /* ty=Tensor[(1024, 144), float32] */;
  %946 = nn.dense(%449, %938, units=None) /* ty=Tensor[(24, 1024), float32] */;
  %947 = max(%946) /* ty=float32 */;
  %948 = min(%946) /* ty=float32 */;
  %949 = divide(%947, 127f /* ty=float32 */) /* ty=float32 */;
  %950 = divide(%948, -127f /* ty=float32 */) /* ty=float32 */;
  %951 = cast(%456, dtype="int8") /* ty=Tensor[(24, 144), int8] */;
  %952 = cast(%945, dtype="int8") /* ty=Tensor[(1024, 144), int8] */;
  %953 = maximum(%949, %950) /* ty=float32 */;
  %954 = fn (%outer_arg_030: Tensor[(24, 144), int8], %outer_arg_130: Tensor[(1024, 144), int8], %outer_arg_230: float32, %outer_arg_330: float32, %outer_arg_430: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_8") -> Tensor[(24, 1024), int8] {
    %448 = fn (%data30: Tensor[(24, 144), int8], %weights30: Tensor[(1024, 144), int8], %s_data30: float32, %s_w30: float32, %s_act30: float32, Composite="ilavta.dense") -> Tensor[(24, 1024), int8] {
      %442 = nn.dense(%data30, %weights30, units=None, out_dtype="int32") /* ty=Tensor[(24, 1024), int32] */;
      %443 = multiply(%s_data30, %s_w30) /* ty=float32 */;
      %444 = cast(%442, dtype="float32") /* ty=Tensor[(24, 1024), float32] */;
      %445 = divide(%443, %s_act30) /* ty=float32 */;
      %446 = multiply(%444, %445) /* ty=Tensor[(24, 1024), float32] */;
      %447 = clip(%446, a_min=-127f, a_max=127f) /* ty=Tensor[(24, 1024), float32] */;
      cast(%447, dtype="int8") /* ty=Tensor[(24, 1024), int8] */
    };
    %448(%outer_arg_030, %outer_arg_130, %outer_arg_230, %outer_arg_330, %outer_arg_430) /* ty=Tensor[(24, 1024), int8] */
  };
  %955 = %954(%951, %952, %454, %943, %953) /* ty=Tensor[(24, 1024), int8] */;
  %956 = cast(%955, dtype="float32") /* ty=Tensor[(24, 1024), float32] */;
  %957 = multiply(%956, %953) /* ty=Tensor[(24, 1024), float32] */;
  %958 = reshape(%957, newshape=[24, 1, 32, 32]) /* from_string */ /* ty=Tensor[(24, 1, 32, 32), float32] */;
  %959 = add(%layers_2_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(24), float32] */;
  %960 = sqrt(%959) /* from_string */ /* ty=Tensor[(24), float32] */;
  %961 = divide(%573, %960) /* from_string */ /* ty=Tensor[(24), float32] */;
  %962 = multiply(%961, %layers_2_bn3_weight) /* from_string */ /* ty=Tensor[(24), float32] */;
  %963 = expand_dims(%962, axis=1) /* from_string */ /* ty=Tensor[(24, 1), float32] */;
  %964 = transpose(%958, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %965 = expand_dims(%963, axis=1) /* from_string */ /* ty=Tensor[(24, 1, 1), float32] */;
  %966 = negative(%layers_2_bn3_running_mean) /* from_string */ /* ty=Tensor[(24), float32] */;
  %967 = multiply(%966, %962) /* from_string */ /* ty=Tensor[(24), float32] */;
  %968 = add(%967, %layers_2_bn3_bias) /* from_string */ /* ty=Tensor[(24), float32] */;
  %969 = expand_dims(%968, axis=1) /* from_string */ /* ty=Tensor[(24, 1), float32] */;
  %970 = multiply(%964, %965) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %971 = expand_dims(%969, axis=1) /* from_string */ /* ty=Tensor[(24, 1, 1), float32] */;
  %972 = add(%970, %971) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %973 = add(%972, %877) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %974 = nn.pad(%973, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %975 = nn.pad(%974, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %976 = windows(%975, axis=1, window_shape=[24, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 32, 32, 24, 1, 1), float32] */;
  %977 = squeeze(%976, axis=[1]) /* from_string */ /* ty=Tensor[(1, 32, 32, 24, 1, 1), float32] */;
  %978 = reshape(%977, newshape=[1024, 24]) /* from_string */ /* ty=Tensor[(1024, 24), float32] */;
  %979 = max(%978) /* ty=float32 */;
  %980 = min(%978) /* ty=float32 */;
  %981 = divide(%979, 127f /* ty=float32 */) /* ty=float32 */;
  %982 = divide(%980, -127f /* ty=float32 */) /* ty=float32 */;
  %983 = maximum(%981, %982) /* ty=float32 */;
  %984 = divide(%978, %983) /* ty=Tensor[(1024, 24), float32] */;
  %985 = round(%984) /* ty=Tensor[(1024, 24), float32] */;
  %986 = nn.dense(%434, %978, units=None) /* ty=Tensor[(144, 1024), float32] */;
  %987 = max(%986) /* ty=float32 */;
  %988 = min(%986) /* ty=float32 */;
  %989 = divide(%987, 127f /* ty=float32 */) /* ty=float32 */;
  %990 = divide(%988, -127f /* ty=float32 */) /* ty=float32 */;
  %991 = cast(%441, dtype="int8") /* ty=Tensor[(144, 24), int8] */;
  %992 = cast(%985, dtype="int8") /* ty=Tensor[(1024, 24), int8] */;
  %993 = maximum(%989, %990) /* ty=float32 */;
  %994 = fn (%outer_arg_029: Tensor[(144, 24), int8], %outer_arg_129: Tensor[(1024, 24), int8], %outer_arg_229: float32, %outer_arg_329: float32, %outer_arg_429: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_9") -> Tensor[(144, 1024), int8] {
    %433 = fn (%data29: Tensor[(144, 24), int8], %weights29: Tensor[(1024, 24), int8], %s_data29: float32, %s_w29: float32, %s_act29: float32, Composite="ilavta.dense") -> Tensor[(144, 1024), int8] {
      %427 = nn.dense(%data29, %weights29, units=None, out_dtype="int32") /* ty=Tensor[(144, 1024), int32] */;
      %428 = multiply(%s_data29, %s_w29) /* ty=float32 */;
      %429 = cast(%427, dtype="float32") /* ty=Tensor[(144, 1024), float32] */;
      %430 = divide(%428, %s_act29) /* ty=float32 */;
      %431 = multiply(%429, %430) /* ty=Tensor[(144, 1024), float32] */;
      %432 = clip(%431, a_min=-127f, a_max=127f) /* ty=Tensor[(144, 1024), float32] */;
      cast(%432, dtype="int8") /* ty=Tensor[(144, 1024), int8] */
    };
    %433(%outer_arg_029, %outer_arg_129, %outer_arg_229, %outer_arg_329, %outer_arg_429) /* ty=Tensor[(144, 1024), int8] */
  };
  %995 = %994(%991, %992, %439, %983, %993) /* ty=Tensor[(144, 1024), int8] */;
  %996 = cast(%995, dtype="float32") /* ty=Tensor[(144, 1024), float32] */;
  %997 = multiply(%996, %993) /* ty=Tensor[(144, 1024), float32] */;
  %998 = reshape(%997, newshape=[144, 1, 32, 32]) /* from_string */ /* ty=Tensor[(144, 1, 32, 32), float32] */;
  %999 = add(%layers_3_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1000 = sqrt(%999) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1001 = divide(%573, %1000) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1002 = multiply(%1001, %layers_3_bn1_weight) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1003 = expand_dims(%1002, axis=1) /* from_string */ /* ty=Tensor[(144, 1), float32] */;
  %1004 = transpose(%998, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %1005 = expand_dims(%1003, axis=1) /* from_string */ /* ty=Tensor[(144, 1, 1), float32] */;
  %1006 = negative(%layers_3_bn1_running_mean) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1007 = multiply(%1006, %1002) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1008 = add(%1007, %layers_3_bn1_bias) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1009 = expand_dims(%1008, axis=1) /* from_string */ /* ty=Tensor[(144, 1), float32] */;
  %1010 = multiply(%1004, %1005) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %1011 = expand_dims(%1009, axis=1) /* from_string */ /* ty=Tensor[(144, 1, 1), float32] */;
  %1012 = add(%1010, %1011) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %1013 = nn.relu(%1012) /* from_string */ /* ty=Tensor[(1, 144, 32, 32), float32] */;
  %1014 = reshape(%layers_3_conv2_weight, newshape=[144, 1, 3, 3]) /* from_string */ /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %1015 = add(%layers_3_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1016 = sqrt(%1015) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1017 = divide(%573, %1016) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1018 = multiply(%1017, %layers_3_bn2_weight) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1019 = expand_dims(%1018, axis=1) /* from_string */ /* ty=Tensor[(144, 1), float32] */;
  %1020 = nn.conv2d(%1013, %1014, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %1021 = expand_dims(%1019, axis=1) /* from_string */ /* ty=Tensor[(144, 1, 1), float32] */;
  %1022 = negative(%layers_3_bn2_running_mean) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1023 = multiply(%1022, %1018) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1024 = add(%1023, %layers_3_bn2_bias) /* from_string */ /* ty=Tensor[(144), float32] */;
  %1025 = expand_dims(%1024, axis=1) /* from_string */ /* ty=Tensor[(144, 1), float32] */;
  %1026 = multiply(%1020, %1021) /* from_string */ /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %1027 = expand_dims(%1025, axis=1) /* from_string */ /* ty=Tensor[(144, 1, 1), float32] */;
  %1028 = add(%1026, %1027) /* from_string */ /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %1029 = nn.relu(%1028) /* from_string */ /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %1030 = nn.pad(%1029, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %1031 = nn.pad(%1030, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 144, 16, 16), float32] */;
  %1032 = windows(%1031, axis=1, window_shape=[144, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 16, 16, 144, 1, 1), float32] */;
  %1033 = squeeze(%1032, axis=[1]) /* from_string */ /* ty=Tensor[(1, 16, 16, 144, 1, 1), float32] */;
  %1034 = reshape(%1033, newshape=[256, 144]) /* from_string */ /* ty=Tensor[(256, 144), float32] */;
  %1035 = max(%1034) /* ty=float32 */;
  %1036 = min(%1034) /* ty=float32 */;
  %1037 = divide(%1035, 127f /* ty=float32 */) /* ty=float32 */;
  %1038 = divide(%1036, -127f /* ty=float32 */) /* ty=float32 */;
  %1039 = maximum(%1037, %1038) /* ty=float32 */;
  %1040 = divide(%1034, %1039) /* ty=Tensor[(256, 144), float32] */;
  %1041 = round(%1040) /* ty=Tensor[(256, 144), float32] */;
  %1042 = nn.dense(%419, %1034, units=None) /* ty=Tensor[(32, 256), float32] */;
  %1043 = max(%1042) /* ty=float32 */;
  %1044 = min(%1042) /* ty=float32 */;
  %1045 = divide(%1043, 127f /* ty=float32 */) /* ty=float32 */;
  %1046 = divide(%1044, -127f /* ty=float32 */) /* ty=float32 */;
  %1047 = cast(%426, dtype="int8") /* ty=Tensor[(32, 144), int8] */;
  %1048 = cast(%1041, dtype="int8") /* ty=Tensor[(256, 144), int8] */;
  %1049 = maximum(%1045, %1046) /* ty=float32 */;
  %1050 = fn (%outer_arg_028: Tensor[(32, 144), int8], %outer_arg_128: Tensor[(256, 144), int8], %outer_arg_228: float32, %outer_arg_328: float32, %outer_arg_428: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_10") -> Tensor[(32, 256), int8] {
    %418 = fn (%data28: Tensor[(32, 144), int8], %weights28: Tensor[(256, 144), int8], %s_data28: float32, %s_w28: float32, %s_act28: float32, Composite="ilavta.dense") -> Tensor[(32, 256), int8] {
      %412 = nn.dense(%data28, %weights28, units=None, out_dtype="int32") /* ty=Tensor[(32, 256), int32] */;
      %413 = multiply(%s_data28, %s_w28) /* ty=float32 */;
      %414 = cast(%412, dtype="float32") /* ty=Tensor[(32, 256), float32] */;
      %415 = divide(%413, %s_act28) /* ty=float32 */;
      %416 = multiply(%414, %415) /* ty=Tensor[(32, 256), float32] */;
      %417 = clip(%416, a_min=-127f, a_max=127f) /* ty=Tensor[(32, 256), float32] */;
      cast(%417, dtype="int8") /* ty=Tensor[(32, 256), int8] */
    };
    %418(%outer_arg_028, %outer_arg_128, %outer_arg_228, %outer_arg_328, %outer_arg_428) /* ty=Tensor[(32, 256), int8] */
  };
  %1051 = %1050(%1047, %1048, %424, %1039, %1049) /* ty=Tensor[(32, 256), int8] */;
  %1052 = cast(%1051, dtype="float32") /* ty=Tensor[(32, 256), float32] */;
  %1053 = multiply(%1052, %1049) /* ty=Tensor[(32, 256), float32] */;
  %1054 = reshape(%1053, newshape=[32, 1, 16, 16]) /* from_string */ /* ty=Tensor[(32, 1, 16, 16), float32] */;
  %1055 = add(%layers_3_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1056 = sqrt(%1055) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1057 = divide(%573, %1056) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1058 = multiply(%1057, %layers_3_bn3_weight) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1059 = expand_dims(%1058, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %1060 = transpose(%1054, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1061 = expand_dims(%1059, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %1062 = negative(%layers_3_bn3_running_mean) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1063 = multiply(%1062, %1058) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1064 = add(%1063, %layers_3_bn3_bias) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1065 = expand_dims(%1064, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %1066 = multiply(%1060, %1061) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1067 = expand_dims(%1065, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %1068 = add(%1066, %1067) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1069 = nn.pad(%1068, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1070 = nn.pad(%1069, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1071 = windows(%1070, axis=1, window_shape=[32, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 16, 16, 32, 1, 1), float32] */;
  %1072 = squeeze(%1071, axis=[1]) /* from_string */ /* ty=Tensor[(1, 16, 16, 32, 1, 1), float32] */;
  %1073 = reshape(%1072, newshape=[256, 32]) /* from_string */ /* ty=Tensor[(256, 32), float32] */;
  %1074 = max(%1073) /* ty=float32 */;
  %1075 = min(%1073) /* ty=float32 */;
  %1076 = divide(%1074, 127f /* ty=float32 */) /* ty=float32 */;
  %1077 = divide(%1075, -127f /* ty=float32 */) /* ty=float32 */;
  %1078 = maximum(%1076, %1077) /* ty=float32 */;
  %1079 = divide(%1073, %1078) /* ty=Tensor[(256, 32), float32] */;
  %1080 = round(%1079) /* ty=Tensor[(256, 32), float32] */;
  %1081 = nn.dense(%404, %1073, units=None) /* ty=Tensor[(192, 256), float32] */;
  %1082 = max(%1081) /* ty=float32 */;
  %1083 = min(%1081) /* ty=float32 */;
  %1084 = divide(%1082, 127f /* ty=float32 */) /* ty=float32 */;
  %1085 = divide(%1083, -127f /* ty=float32 */) /* ty=float32 */;
  %1086 = cast(%411, dtype="int8") /* ty=Tensor[(192, 32), int8] */;
  %1087 = cast(%1080, dtype="int8") /* ty=Tensor[(256, 32), int8] */;
  %1088 = maximum(%1084, %1085) /* ty=float32 */;
  %1089 = fn (%outer_arg_027: Tensor[(192, 32), int8], %outer_arg_127: Tensor[(256, 32), int8], %outer_arg_227: float32, %outer_arg_327: float32, %outer_arg_427: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_11") -> Tensor[(192, 256), int8] {
    %403 = fn (%data27: Tensor[(192, 32), int8], %weights27: Tensor[(256, 32), int8], %s_data27: float32, %s_w27: float32, %s_act27: float32, Composite="ilavta.dense") -> Tensor[(192, 256), int8] {
      %397 = nn.dense(%data27, %weights27, units=None, out_dtype="int32") /* ty=Tensor[(192, 256), int32] */;
      %398 = multiply(%s_data27, %s_w27) /* ty=float32 */;
      %399 = cast(%397, dtype="float32") /* ty=Tensor[(192, 256), float32] */;
      %400 = divide(%398, %s_act27) /* ty=float32 */;
      %401 = multiply(%399, %400) /* ty=Tensor[(192, 256), float32] */;
      %402 = clip(%401, a_min=-127f, a_max=127f) /* ty=Tensor[(192, 256), float32] */;
      cast(%402, dtype="int8") /* ty=Tensor[(192, 256), int8] */
    };
    %403(%outer_arg_027, %outer_arg_127, %outer_arg_227, %outer_arg_327, %outer_arg_427) /* ty=Tensor[(192, 256), int8] */
  };
  %1090 = %1089(%1086, %1087, %409, %1078, %1088) /* ty=Tensor[(192, 256), int8] */;
  %1091 = cast(%1090, dtype="float32") /* ty=Tensor[(192, 256), float32] */;
  %1092 = multiply(%1091, %1088) /* ty=Tensor[(192, 256), float32] */;
  %1093 = reshape(%1092, newshape=[192, 1, 16, 16]) /* from_string */ /* ty=Tensor[(192, 1, 16, 16), float32] */;
  %1094 = add(%layers_4_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1095 = sqrt(%1094) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1096 = divide(%573, %1095) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1097 = multiply(%1096, %layers_4_bn1_weight) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1098 = expand_dims(%1097, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1099 = transpose(%1093, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1100 = expand_dims(%1098, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1101 = negative(%layers_4_bn1_running_mean) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1102 = multiply(%1101, %1097) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1103 = add(%1102, %layers_4_bn1_bias) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1104 = expand_dims(%1103, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1105 = multiply(%1099, %1100) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1106 = expand_dims(%1104, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1107 = add(%1105, %1106) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1108 = nn.relu(%1107) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1109 = reshape(%layers_4_conv2_weight, newshape=[192, 1, 3, 3]) /* from_string */ /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %1110 = add(%layers_4_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1111 = sqrt(%1110) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1112 = divide(%573, %1111) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1113 = multiply(%1112, %layers_4_bn2_weight) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1114 = expand_dims(%1113, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1115 = nn.conv2d(%1108, %1109, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1116 = expand_dims(%1114, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1117 = negative(%layers_4_bn2_running_mean) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1118 = multiply(%1117, %1113) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1119 = add(%1118, %layers_4_bn2_bias) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1120 = expand_dims(%1119, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1121 = multiply(%1115, %1116) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1122 = expand_dims(%1120, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1123 = add(%1121, %1122) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1124 = nn.relu(%1123) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1125 = nn.pad(%1124, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1126 = nn.pad(%1125, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1127 = windows(%1126, axis=1, window_shape=[192, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 16, 16, 192, 1, 1), float32] */;
  %1128 = squeeze(%1127, axis=[1]) /* from_string */ /* ty=Tensor[(1, 16, 16, 192, 1, 1), float32] */;
  %1129 = reshape(%1128, newshape=[256, 192]) /* from_string */ /* ty=Tensor[(256, 192), float32] */;
  %1130 = max(%1129) /* ty=float32 */;
  %1131 = min(%1129) /* ty=float32 */;
  %1132 = divide(%1130, 127f /* ty=float32 */) /* ty=float32 */;
  %1133 = divide(%1131, -127f /* ty=float32 */) /* ty=float32 */;
  %1134 = maximum(%1132, %1133) /* ty=float32 */;
  %1135 = divide(%1129, %1134) /* ty=Tensor[(256, 192), float32] */;
  %1136 = round(%1135) /* ty=Tensor[(256, 192), float32] */;
  %1137 = nn.dense(%389, %1129, units=None) /* ty=Tensor[(32, 256), float32] */;
  %1138 = max(%1137) /* ty=float32 */;
  %1139 = min(%1137) /* ty=float32 */;
  %1140 = divide(%1138, 127f /* ty=float32 */) /* ty=float32 */;
  %1141 = divide(%1139, -127f /* ty=float32 */) /* ty=float32 */;
  %1142 = cast(%396, dtype="int8") /* ty=Tensor[(32, 192), int8] */;
  %1143 = cast(%1136, dtype="int8") /* ty=Tensor[(256, 192), int8] */;
  %1144 = maximum(%1140, %1141) /* ty=float32 */;
  %1145 = fn (%outer_arg_026: Tensor[(32, 192), int8], %outer_arg_126: Tensor[(256, 192), int8], %outer_arg_226: float32, %outer_arg_326: float32, %outer_arg_426: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_12") -> Tensor[(32, 256), int8] {
    %388 = fn (%data26: Tensor[(32, 192), int8], %weights26: Tensor[(256, 192), int8], %s_data26: float32, %s_w26: float32, %s_act26: float32, Composite="ilavta.dense") -> Tensor[(32, 256), int8] {
      %382 = nn.dense(%data26, %weights26, units=None, out_dtype="int32") /* ty=Tensor[(32, 256), int32] */;
      %383 = multiply(%s_data26, %s_w26) /* ty=float32 */;
      %384 = cast(%382, dtype="float32") /* ty=Tensor[(32, 256), float32] */;
      %385 = divide(%383, %s_act26) /* ty=float32 */;
      %386 = multiply(%384, %385) /* ty=Tensor[(32, 256), float32] */;
      %387 = clip(%386, a_min=-127f, a_max=127f) /* ty=Tensor[(32, 256), float32] */;
      cast(%387, dtype="int8") /* ty=Tensor[(32, 256), int8] */
    };
    %388(%outer_arg_026, %outer_arg_126, %outer_arg_226, %outer_arg_326, %outer_arg_426) /* ty=Tensor[(32, 256), int8] */
  };
  %1146 = %1145(%1142, %1143, %394, %1134, %1144) /* ty=Tensor[(32, 256), int8] */;
  %1147 = cast(%1146, dtype="float32") /* ty=Tensor[(32, 256), float32] */;
  %1148 = multiply(%1147, %1144) /* ty=Tensor[(32, 256), float32] */;
  %1149 = reshape(%1148, newshape=[32, 1, 16, 16]) /* from_string */ /* ty=Tensor[(32, 1, 16, 16), float32] */;
  %1150 = add(%layers_4_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1151 = sqrt(%1150) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1152 = divide(%573, %1151) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1153 = multiply(%1152, %layers_4_bn3_weight) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1154 = expand_dims(%1153, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %1155 = transpose(%1149, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1156 = expand_dims(%1154, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %1157 = negative(%layers_4_bn3_running_mean) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1158 = multiply(%1157, %1153) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1159 = add(%1158, %layers_4_bn3_bias) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1160 = expand_dims(%1159, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %1161 = multiply(%1155, %1156) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1162 = expand_dims(%1160, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %1163 = add(%1161, %1162) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1164 = add(%1163, %1068) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1165 = nn.pad(%1164, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1166 = nn.pad(%1165, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1167 = windows(%1166, axis=1, window_shape=[32, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 16, 16, 32, 1, 1), float32] */;
  %1168 = squeeze(%1167, axis=[1]) /* from_string */ /* ty=Tensor[(1, 16, 16, 32, 1, 1), float32] */;
  %1169 = reshape(%1168, newshape=[256, 32]) /* from_string */ /* ty=Tensor[(256, 32), float32] */;
  %1170 = max(%1169) /* ty=float32 */;
  %1171 = min(%1169) /* ty=float32 */;
  %1172 = divide(%1170, 127f /* ty=float32 */) /* ty=float32 */;
  %1173 = divide(%1171, -127f /* ty=float32 */) /* ty=float32 */;
  %1174 = maximum(%1172, %1173) /* ty=float32 */;
  %1175 = divide(%1169, %1174) /* ty=Tensor[(256, 32), float32] */;
  %1176 = round(%1175) /* ty=Tensor[(256, 32), float32] */;
  %1177 = nn.dense(%374, %1169, units=None) /* ty=Tensor[(192, 256), float32] */;
  %1178 = max(%1177) /* ty=float32 */;
  %1179 = min(%1177) /* ty=float32 */;
  %1180 = divide(%1178, 127f /* ty=float32 */) /* ty=float32 */;
  %1181 = divide(%1179, -127f /* ty=float32 */) /* ty=float32 */;
  %1182 = cast(%381, dtype="int8") /* ty=Tensor[(192, 32), int8] */;
  %1183 = cast(%1176, dtype="int8") /* ty=Tensor[(256, 32), int8] */;
  %1184 = maximum(%1180, %1181) /* ty=float32 */;
  %1185 = fn (%outer_arg_025: Tensor[(192, 32), int8], %outer_arg_125: Tensor[(256, 32), int8], %outer_arg_225: float32, %outer_arg_325: float32, %outer_arg_425: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_13") -> Tensor[(192, 256), int8] {
    %373 = fn (%data25: Tensor[(192, 32), int8], %weights25: Tensor[(256, 32), int8], %s_data25: float32, %s_w25: float32, %s_act25: float32, Composite="ilavta.dense") -> Tensor[(192, 256), int8] {
      %367 = nn.dense(%data25, %weights25, units=None, out_dtype="int32") /* ty=Tensor[(192, 256), int32] */;
      %368 = multiply(%s_data25, %s_w25) /* ty=float32 */;
      %369 = cast(%367, dtype="float32") /* ty=Tensor[(192, 256), float32] */;
      %370 = divide(%368, %s_act25) /* ty=float32 */;
      %371 = multiply(%369, %370) /* ty=Tensor[(192, 256), float32] */;
      %372 = clip(%371, a_min=-127f, a_max=127f) /* ty=Tensor[(192, 256), float32] */;
      cast(%372, dtype="int8") /* ty=Tensor[(192, 256), int8] */
    };
    %373(%outer_arg_025, %outer_arg_125, %outer_arg_225, %outer_arg_325, %outer_arg_425) /* ty=Tensor[(192, 256), int8] */
  };
  %1186 = %1185(%1182, %1183, %379, %1174, %1184) /* ty=Tensor[(192, 256), int8] */;
  %1187 = cast(%1186, dtype="float32") /* ty=Tensor[(192, 256), float32] */;
  %1188 = multiply(%1187, %1184) /* ty=Tensor[(192, 256), float32] */;
  %1189 = reshape(%1188, newshape=[192, 1, 16, 16]) /* from_string */ /* ty=Tensor[(192, 1, 16, 16), float32] */;
  %1190 = add(%layers_5_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1191 = sqrt(%1190) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1192 = divide(%573, %1191) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1193 = multiply(%1192, %layers_5_bn1_weight) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1194 = expand_dims(%1193, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1195 = transpose(%1189, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1196 = expand_dims(%1194, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1197 = negative(%layers_5_bn1_running_mean) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1198 = multiply(%1197, %1193) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1199 = add(%1198, %layers_5_bn1_bias) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1200 = expand_dims(%1199, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1201 = multiply(%1195, %1196) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1202 = expand_dims(%1200, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1203 = add(%1201, %1202) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1204 = nn.relu(%1203) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1205 = reshape(%layers_5_conv2_weight, newshape=[192, 1, 3, 3]) /* from_string */ /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %1206 = add(%layers_5_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1207 = sqrt(%1206) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1208 = divide(%573, %1207) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1209 = multiply(%1208, %layers_5_bn2_weight) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1210 = expand_dims(%1209, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1211 = nn.conv2d(%1204, %1205, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1212 = expand_dims(%1210, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1213 = negative(%layers_5_bn2_running_mean) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1214 = multiply(%1213, %1209) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1215 = add(%1214, %layers_5_bn2_bias) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1216 = expand_dims(%1215, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1217 = multiply(%1211, %1212) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1218 = expand_dims(%1216, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1219 = add(%1217, %1218) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1220 = nn.relu(%1219) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1221 = nn.pad(%1220, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1222 = nn.pad(%1221, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1223 = windows(%1222, axis=1, window_shape=[192, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 16, 16, 192, 1, 1), float32] */;
  %1224 = squeeze(%1223, axis=[1]) /* from_string */ /* ty=Tensor[(1, 16, 16, 192, 1, 1), float32] */;
  %1225 = reshape(%1224, newshape=[256, 192]) /* from_string */ /* ty=Tensor[(256, 192), float32] */;
  %1226 = max(%1225) /* ty=float32 */;
  %1227 = min(%1225) /* ty=float32 */;
  %1228 = divide(%1226, 127f /* ty=float32 */) /* ty=float32 */;
  %1229 = divide(%1227, -127f /* ty=float32 */) /* ty=float32 */;
  %1230 = maximum(%1228, %1229) /* ty=float32 */;
  %1231 = divide(%1225, %1230) /* ty=Tensor[(256, 192), float32] */;
  %1232 = round(%1231) /* ty=Tensor[(256, 192), float32] */;
  %1233 = nn.dense(%359, %1225, units=None) /* ty=Tensor[(32, 256), float32] */;
  %1234 = max(%1233) /* ty=float32 */;
  %1235 = min(%1233) /* ty=float32 */;
  %1236 = divide(%1234, 127f /* ty=float32 */) /* ty=float32 */;
  %1237 = divide(%1235, -127f /* ty=float32 */) /* ty=float32 */;
  %1238 = cast(%366, dtype="int8") /* ty=Tensor[(32, 192), int8] */;
  %1239 = cast(%1232, dtype="int8") /* ty=Tensor[(256, 192), int8] */;
  %1240 = maximum(%1236, %1237) /* ty=float32 */;
  %1241 = fn (%outer_arg_024: Tensor[(32, 192), int8], %outer_arg_124: Tensor[(256, 192), int8], %outer_arg_224: float32, %outer_arg_324: float32, %outer_arg_424: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_14") -> Tensor[(32, 256), int8] {
    %358 = fn (%data24: Tensor[(32, 192), int8], %weights24: Tensor[(256, 192), int8], %s_data24: float32, %s_w24: float32, %s_act24: float32, Composite="ilavta.dense") -> Tensor[(32, 256), int8] {
      %352 = nn.dense(%data24, %weights24, units=None, out_dtype="int32") /* ty=Tensor[(32, 256), int32] */;
      %353 = multiply(%s_data24, %s_w24) /* ty=float32 */;
      %354 = cast(%352, dtype="float32") /* ty=Tensor[(32, 256), float32] */;
      %355 = divide(%353, %s_act24) /* ty=float32 */;
      %356 = multiply(%354, %355) /* ty=Tensor[(32, 256), float32] */;
      %357 = clip(%356, a_min=-127f, a_max=127f) /* ty=Tensor[(32, 256), float32] */;
      cast(%357, dtype="int8") /* ty=Tensor[(32, 256), int8] */
    };
    %358(%outer_arg_024, %outer_arg_124, %outer_arg_224, %outer_arg_324, %outer_arg_424) /* ty=Tensor[(32, 256), int8] */
  };
  %1242 = %1241(%1238, %1239, %364, %1230, %1240) /* ty=Tensor[(32, 256), int8] */;
  %1243 = cast(%1242, dtype="float32") /* ty=Tensor[(32, 256), float32] */;
  %1244 = multiply(%1243, %1240) /* ty=Tensor[(32, 256), float32] */;
  %1245 = reshape(%1244, newshape=[32, 1, 16, 16]) /* from_string */ /* ty=Tensor[(32, 1, 16, 16), float32] */;
  %1246 = add(%layers_5_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1247 = sqrt(%1246) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1248 = divide(%573, %1247) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1249 = multiply(%1248, %layers_5_bn3_weight) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1250 = expand_dims(%1249, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %1251 = transpose(%1245, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1252 = expand_dims(%1250, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %1253 = negative(%layers_5_bn3_running_mean) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1254 = multiply(%1253, %1249) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1255 = add(%1254, %layers_5_bn3_bias) /* from_string */ /* ty=Tensor[(32), float32] */;
  %1256 = expand_dims(%1255, axis=1) /* from_string */ /* ty=Tensor[(32, 1), float32] */;
  %1257 = multiply(%1251, %1252) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1258 = expand_dims(%1256, axis=1) /* from_string */ /* ty=Tensor[(32, 1, 1), float32] */;
  %1259 = add(%1257, %1258) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1260 = add(%1259, %1164) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1261 = nn.pad(%1260, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1262 = nn.pad(%1261, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %1263 = windows(%1262, axis=1, window_shape=[32, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 16, 16, 32, 1, 1), float32] */;
  %1264 = squeeze(%1263, axis=[1]) /* from_string */ /* ty=Tensor[(1, 16, 16, 32, 1, 1), float32] */;
  %1265 = reshape(%1264, newshape=[256, 32]) /* from_string */ /* ty=Tensor[(256, 32), float32] */;
  %1266 = max(%1265) /* ty=float32 */;
  %1267 = min(%1265) /* ty=float32 */;
  %1268 = divide(%1266, 127f /* ty=float32 */) /* ty=float32 */;
  %1269 = divide(%1267, -127f /* ty=float32 */) /* ty=float32 */;
  %1270 = maximum(%1268, %1269) /* ty=float32 */;
  %1271 = divide(%1265, %1270) /* ty=Tensor[(256, 32), float32] */;
  %1272 = round(%1271) /* ty=Tensor[(256, 32), float32] */;
  %1273 = nn.dense(%344, %1265, units=None) /* ty=Tensor[(192, 256), float32] */;
  %1274 = max(%1273) /* ty=float32 */;
  %1275 = min(%1273) /* ty=float32 */;
  %1276 = divide(%1274, 127f /* ty=float32 */) /* ty=float32 */;
  %1277 = divide(%1275, -127f /* ty=float32 */) /* ty=float32 */;
  %1278 = cast(%351, dtype="int8") /* ty=Tensor[(192, 32), int8] */;
  %1279 = cast(%1272, dtype="int8") /* ty=Tensor[(256, 32), int8] */;
  %1280 = maximum(%1276, %1277) /* ty=float32 */;
  %1281 = fn (%outer_arg_023: Tensor[(192, 32), int8], %outer_arg_123: Tensor[(256, 32), int8], %outer_arg_223: float32, %outer_arg_323: float32, %outer_arg_423: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_15") -> Tensor[(192, 256), int8] {
    %343 = fn (%data23: Tensor[(192, 32), int8], %weights23: Tensor[(256, 32), int8], %s_data23: float32, %s_w23: float32, %s_act23: float32, Composite="ilavta.dense") -> Tensor[(192, 256), int8] {
      %337 = nn.dense(%data23, %weights23, units=None, out_dtype="int32") /* ty=Tensor[(192, 256), int32] */;
      %338 = multiply(%s_data23, %s_w23) /* ty=float32 */;
      %339 = cast(%337, dtype="float32") /* ty=Tensor[(192, 256), float32] */;
      %340 = divide(%338, %s_act23) /* ty=float32 */;
      %341 = multiply(%339, %340) /* ty=Tensor[(192, 256), float32] */;
      %342 = clip(%341, a_min=-127f, a_max=127f) /* ty=Tensor[(192, 256), float32] */;
      cast(%342, dtype="int8") /* ty=Tensor[(192, 256), int8] */
    };
    %343(%outer_arg_023, %outer_arg_123, %outer_arg_223, %outer_arg_323, %outer_arg_423) /* ty=Tensor[(192, 256), int8] */
  };
  %1282 = %1281(%1278, %1279, %349, %1270, %1280) /* ty=Tensor[(192, 256), int8] */;
  %1283 = cast(%1282, dtype="float32") /* ty=Tensor[(192, 256), float32] */;
  %1284 = multiply(%1283, %1280) /* ty=Tensor[(192, 256), float32] */;
  %1285 = reshape(%1284, newshape=[192, 1, 16, 16]) /* from_string */ /* ty=Tensor[(192, 1, 16, 16), float32] */;
  %1286 = add(%layers_6_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1287 = sqrt(%1286) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1288 = divide(%573, %1287) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1289 = multiply(%1288, %layers_6_bn1_weight) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1290 = expand_dims(%1289, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1291 = transpose(%1285, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1292 = expand_dims(%1290, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1293 = negative(%layers_6_bn1_running_mean) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1294 = multiply(%1293, %1289) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1295 = add(%1294, %layers_6_bn1_bias) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1296 = expand_dims(%1295, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1297 = multiply(%1291, %1292) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1298 = expand_dims(%1296, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1299 = add(%1297, %1298) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1300 = nn.relu(%1299) /* from_string */ /* ty=Tensor[(1, 192, 16, 16), float32] */;
  %1301 = reshape(%layers_6_conv2_weight, newshape=[192, 1, 3, 3]) /* from_string */ /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %1302 = add(%layers_6_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1303 = sqrt(%1302) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1304 = divide(%573, %1303) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1305 = multiply(%1304, %layers_6_bn2_weight) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1306 = expand_dims(%1305, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1307 = nn.conv2d(%1300, %1301, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %1308 = expand_dims(%1306, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1309 = negative(%layers_6_bn2_running_mean) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1310 = multiply(%1309, %1305) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1311 = add(%1310, %layers_6_bn2_bias) /* from_string */ /* ty=Tensor[(192), float32] */;
  %1312 = expand_dims(%1311, axis=1) /* from_string */ /* ty=Tensor[(192, 1), float32] */;
  %1313 = multiply(%1307, %1308) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %1314 = expand_dims(%1312, axis=1) /* from_string */ /* ty=Tensor[(192, 1, 1), float32] */;
  %1315 = add(%1313, %1314) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %1316 = nn.relu(%1315) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %1317 = nn.pad(%1316, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %1318 = nn.pad(%1317, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %1319 = windows(%1318, axis=1, window_shape=[192, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 192, 1, 1), float32] */;
  %1320 = squeeze(%1319, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 192, 1, 1), float32] */;
  %1321 = reshape(%1320, newshape=[64, 192]) /* from_string */ /* ty=Tensor[(64, 192), float32] */;
  %1322 = max(%1321) /* ty=float32 */;
  %1323 = min(%1321) /* ty=float32 */;
  %1324 = divide(%1322, 127f /* ty=float32 */) /* ty=float32 */;
  %1325 = divide(%1323, -127f /* ty=float32 */) /* ty=float32 */;
  %1326 = maximum(%1324, %1325) /* ty=float32 */;
  %1327 = divide(%1321, %1326) /* ty=Tensor[(64, 192), float32] */;
  %1328 = round(%1327) /* ty=Tensor[(64, 192), float32] */;
  %1329 = nn.dense(%329, %1321, units=None) /* ty=Tensor[(64, 64), float32] */;
  %1330 = max(%1329) /* ty=float32 */;
  %1331 = min(%1329) /* ty=float32 */;
  %1332 = divide(%1330, 127f /* ty=float32 */) /* ty=float32 */;
  %1333 = divide(%1331, -127f /* ty=float32 */) /* ty=float32 */;
  %1334 = cast(%336, dtype="int8") /* ty=Tensor[(64, 192), int8] */;
  %1335 = cast(%1328, dtype="int8") /* ty=Tensor[(64, 192), int8] */;
  %1336 = maximum(%1332, %1333) /* ty=float32 */;
  %1337 = fn (%outer_arg_022: Tensor[(64, 192), int8], %outer_arg_122: Tensor[(64, 192), int8], %outer_arg_222: float32, %outer_arg_322: float32, %outer_arg_422: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_16") -> Tensor[(64, 64), int8] {
    %328 = fn (%data22: Tensor[(64, 192), int8], %weights22: Tensor[(64, 192), int8], %s_data22: float32, %s_w22: float32, %s_act22: float32, Composite="ilavta.dense") -> Tensor[(64, 64), int8] {
      %322 = nn.dense(%data22, %weights22, units=None, out_dtype="int32") /* ty=Tensor[(64, 64), int32] */;
      %323 = multiply(%s_data22, %s_w22) /* ty=float32 */;
      %324 = cast(%322, dtype="float32") /* ty=Tensor[(64, 64), float32] */;
      %325 = divide(%323, %s_act22) /* ty=float32 */;
      %326 = multiply(%324, %325) /* ty=Tensor[(64, 64), float32] */;
      %327 = clip(%326, a_min=-127f, a_max=127f) /* ty=Tensor[(64, 64), float32] */;
      cast(%327, dtype="int8") /* ty=Tensor[(64, 64), int8] */
    };
    %328(%outer_arg_022, %outer_arg_122, %outer_arg_222, %outer_arg_322, %outer_arg_422) /* ty=Tensor[(64, 64), int8] */
  };
  %1338 = %1337(%1334, %1335, %334, %1326, %1336) /* ty=Tensor[(64, 64), int8] */;
  %1339 = cast(%1338, dtype="float32") /* ty=Tensor[(64, 64), float32] */;
  %1340 = multiply(%1339, %1336) /* ty=Tensor[(64, 64), float32] */;
  %1341 = reshape(%1340, newshape=[64, 1, 8, 8]) /* from_string */ /* ty=Tensor[(64, 1, 8, 8), float32] */;
  %1342 = add(%layers_6_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1343 = sqrt(%1342) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1344 = divide(%573, %1343) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1345 = multiply(%1344, %layers_6_bn3_weight) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1346 = expand_dims(%1345, axis=1) /* from_string */ /* ty=Tensor[(64, 1), float32] */;
  %1347 = transpose(%1341, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1348 = expand_dims(%1346, axis=1) /* from_string */ /* ty=Tensor[(64, 1, 1), float32] */;
  %1349 = negative(%layers_6_bn3_running_mean) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1350 = multiply(%1349, %1345) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1351 = add(%1350, %layers_6_bn3_bias) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1352 = expand_dims(%1351, axis=1) /* from_string */ /* ty=Tensor[(64, 1), float32] */;
  %1353 = multiply(%1347, %1348) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1354 = expand_dims(%1352, axis=1) /* from_string */ /* ty=Tensor[(64, 1, 1), float32] */;
  %1355 = add(%1353, %1354) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1356 = nn.pad(%1355, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1357 = nn.pad(%1356, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1358 = windows(%1357, axis=1, window_shape=[64, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 64, 1, 1), float32] */;
  %1359 = squeeze(%1358, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 64, 1, 1), float32] */;
  %1360 = reshape(%1359, newshape=[64, 64]) /* from_string */ /* ty=Tensor[(64, 64), float32] */;
  %1361 = max(%1360) /* ty=float32 */;
  %1362 = min(%1360) /* ty=float32 */;
  %1363 = divide(%1361, 127f /* ty=float32 */) /* ty=float32 */;
  %1364 = divide(%1362, -127f /* ty=float32 */) /* ty=float32 */;
  %1365 = maximum(%1363, %1364) /* ty=float32 */;
  %1366 = divide(%1360, %1365) /* ty=Tensor[(64, 64), float32] */;
  %1367 = round(%1366) /* ty=Tensor[(64, 64), float32] */;
  %1368 = nn.dense(%314, %1360, units=None) /* ty=Tensor[(384, 64), float32] */;
  %1369 = max(%1368) /* ty=float32 */;
  %1370 = min(%1368) /* ty=float32 */;
  %1371 = divide(%1369, 127f /* ty=float32 */) /* ty=float32 */;
  %1372 = divide(%1370, -127f /* ty=float32 */) /* ty=float32 */;
  %1373 = cast(%321, dtype="int8") /* ty=Tensor[(384, 64), int8] */;
  %1374 = cast(%1367, dtype="int8") /* ty=Tensor[(64, 64), int8] */;
  %1375 = maximum(%1371, %1372) /* ty=float32 */;
  %1376 = fn (%outer_arg_021: Tensor[(384, 64), int8], %outer_arg_121: Tensor[(64, 64), int8], %outer_arg_221: float32, %outer_arg_321: float32, %outer_arg_421: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_17") -> Tensor[(384, 64), int8] {
    %313 = fn (%data21: Tensor[(384, 64), int8], %weights21: Tensor[(64, 64), int8], %s_data21: float32, %s_w21: float32, %s_act21: float32, Composite="ilavta.dense") -> Tensor[(384, 64), int8] {
      %307 = nn.dense(%data21, %weights21, units=None, out_dtype="int32") /* ty=Tensor[(384, 64), int32] */;
      %308 = multiply(%s_data21, %s_w21) /* ty=float32 */;
      %309 = cast(%307, dtype="float32") /* ty=Tensor[(384, 64), float32] */;
      %310 = divide(%308, %s_act21) /* ty=float32 */;
      %311 = multiply(%309, %310) /* ty=Tensor[(384, 64), float32] */;
      %312 = clip(%311, a_min=-127f, a_max=127f) /* ty=Tensor[(384, 64), float32] */;
      cast(%312, dtype="int8") /* ty=Tensor[(384, 64), int8] */
    };
    %313(%outer_arg_021, %outer_arg_121, %outer_arg_221, %outer_arg_321, %outer_arg_421) /* ty=Tensor[(384, 64), int8] */
  };
  %1377 = %1376(%1373, %1374, %319, %1365, %1375) /* ty=Tensor[(384, 64), int8] */;
  %1378 = cast(%1377, dtype="float32") /* ty=Tensor[(384, 64), float32] */;
  %1379 = multiply(%1378, %1375) /* ty=Tensor[(384, 64), float32] */;
  %1380 = reshape(%1379, newshape=[384, 1, 8, 8]) /* from_string */ /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %1381 = add(%layers_7_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1382 = sqrt(%1381) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1383 = divide(%573, %1382) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1384 = multiply(%1383, %layers_7_bn1_weight) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1385 = expand_dims(%1384, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1386 = transpose(%1380, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1387 = expand_dims(%1385, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1388 = negative(%layers_7_bn1_running_mean) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1389 = multiply(%1388, %1384) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1390 = add(%1389, %layers_7_bn1_bias) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1391 = expand_dims(%1390, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1392 = multiply(%1386, %1387) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1393 = expand_dims(%1391, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1394 = add(%1392, %1393) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1395 = nn.relu(%1394) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1396 = reshape(%layers_7_conv2_weight, newshape=[384, 1, 3, 3]) /* from_string */ /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %1397 = add(%layers_7_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1398 = sqrt(%1397) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1399 = divide(%573, %1398) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1400 = multiply(%1399, %layers_7_bn2_weight) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1401 = expand_dims(%1400, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1402 = nn.conv2d(%1395, %1396, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1403 = expand_dims(%1401, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1404 = negative(%layers_7_bn2_running_mean) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1405 = multiply(%1404, %1400) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1406 = add(%1405, %layers_7_bn2_bias) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1407 = expand_dims(%1406, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1408 = multiply(%1402, %1403) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1409 = expand_dims(%1407, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1410 = add(%1408, %1409) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1411 = nn.relu(%1410) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1412 = nn.pad(%1411, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1413 = nn.pad(%1412, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1414 = windows(%1413, axis=1, window_shape=[384, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 384, 1, 1), float32] */;
  %1415 = squeeze(%1414, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 384, 1, 1), float32] */;
  %1416 = reshape(%1415, newshape=[64, 384]) /* from_string */ /* ty=Tensor[(64, 384), float32] */;
  %1417 = max(%1416) /* ty=float32 */;
  %1418 = min(%1416) /* ty=float32 */;
  %1419 = divide(%1417, 127f /* ty=float32 */) /* ty=float32 */;
  %1420 = divide(%1418, -127f /* ty=float32 */) /* ty=float32 */;
  %1421 = maximum(%1419, %1420) /* ty=float32 */;
  %1422 = divide(%1416, %1421) /* ty=Tensor[(64, 384), float32] */;
  %1423 = round(%1422) /* ty=Tensor[(64, 384), float32] */;
  %1424 = nn.dense(%299, %1416, units=None) /* ty=Tensor[(64, 64), float32] */;
  %1425 = max(%1424) /* ty=float32 */;
  %1426 = min(%1424) /* ty=float32 */;
  %1427 = divide(%1425, 127f /* ty=float32 */) /* ty=float32 */;
  %1428 = divide(%1426, -127f /* ty=float32 */) /* ty=float32 */;
  %1429 = cast(%306, dtype="int8") /* ty=Tensor[(64, 384), int8] */;
  %1430 = cast(%1423, dtype="int8") /* ty=Tensor[(64, 384), int8] */;
  %1431 = maximum(%1427, %1428) /* ty=float32 */;
  %1432 = fn (%outer_arg_020: Tensor[(64, 384), int8], %outer_arg_120: Tensor[(64, 384), int8], %outer_arg_220: float32, %outer_arg_320: float32, %outer_arg_420: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_18") -> Tensor[(64, 64), int8] {
    %298 = fn (%data20: Tensor[(64, 384), int8], %weights20: Tensor[(64, 384), int8], %s_data20: float32, %s_w20: float32, %s_act20: float32, Composite="ilavta.dense") -> Tensor[(64, 64), int8] {
      %292 = nn.dense(%data20, %weights20, units=None, out_dtype="int32") /* ty=Tensor[(64, 64), int32] */;
      %293 = multiply(%s_data20, %s_w20) /* ty=float32 */;
      %294 = cast(%292, dtype="float32") /* ty=Tensor[(64, 64), float32] */;
      %295 = divide(%293, %s_act20) /* ty=float32 */;
      %296 = multiply(%294, %295) /* ty=Tensor[(64, 64), float32] */;
      %297 = clip(%296, a_min=-127f, a_max=127f) /* ty=Tensor[(64, 64), float32] */;
      cast(%297, dtype="int8") /* ty=Tensor[(64, 64), int8] */
    };
    %298(%outer_arg_020, %outer_arg_120, %outer_arg_220, %outer_arg_320, %outer_arg_420) /* ty=Tensor[(64, 64), int8] */
  };
  %1433 = %1432(%1429, %1430, %304, %1421, %1431) /* ty=Tensor[(64, 64), int8] */;
  %1434 = cast(%1433, dtype="float32") /* ty=Tensor[(64, 64), float32] */;
  %1435 = multiply(%1434, %1431) /* ty=Tensor[(64, 64), float32] */;
  %1436 = reshape(%1435, newshape=[64, 1, 8, 8]) /* from_string */ /* ty=Tensor[(64, 1, 8, 8), float32] */;
  %1437 = add(%layers_7_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1438 = sqrt(%1437) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1439 = divide(%573, %1438) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1440 = multiply(%1439, %layers_7_bn3_weight) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1441 = expand_dims(%1440, axis=1) /* from_string */ /* ty=Tensor[(64, 1), float32] */;
  %1442 = transpose(%1436, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1443 = expand_dims(%1441, axis=1) /* from_string */ /* ty=Tensor[(64, 1, 1), float32] */;
  %1444 = negative(%layers_7_bn3_running_mean) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1445 = multiply(%1444, %1440) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1446 = add(%1445, %layers_7_bn3_bias) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1447 = expand_dims(%1446, axis=1) /* from_string */ /* ty=Tensor[(64, 1), float32] */;
  %1448 = multiply(%1442, %1443) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1449 = expand_dims(%1447, axis=1) /* from_string */ /* ty=Tensor[(64, 1, 1), float32] */;
  %1450 = add(%1448, %1449) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1451 = add(%1450, %1355) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1452 = nn.pad(%1451, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1453 = nn.pad(%1452, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1454 = windows(%1453, axis=1, window_shape=[64, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 64, 1, 1), float32] */;
  %1455 = squeeze(%1454, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 64, 1, 1), float32] */;
  %1456 = reshape(%1455, newshape=[64, 64]) /* from_string */ /* ty=Tensor[(64, 64), float32] */;
  %1457 = max(%1456) /* ty=float32 */;
  %1458 = min(%1456) /* ty=float32 */;
  %1459 = divide(%1457, 127f /* ty=float32 */) /* ty=float32 */;
  %1460 = divide(%1458, -127f /* ty=float32 */) /* ty=float32 */;
  %1461 = maximum(%1459, %1460) /* ty=float32 */;
  %1462 = divide(%1456, %1461) /* ty=Tensor[(64, 64), float32] */;
  %1463 = round(%1462) /* ty=Tensor[(64, 64), float32] */;
  %1464 = nn.dense(%284, %1456, units=None) /* ty=Tensor[(384, 64), float32] */;
  %1465 = max(%1464) /* ty=float32 */;
  %1466 = min(%1464) /* ty=float32 */;
  %1467 = divide(%1465, 127f /* ty=float32 */) /* ty=float32 */;
  %1468 = divide(%1466, -127f /* ty=float32 */) /* ty=float32 */;
  %1469 = cast(%291, dtype="int8") /* ty=Tensor[(384, 64), int8] */;
  %1470 = cast(%1463, dtype="int8") /* ty=Tensor[(64, 64), int8] */;
  %1471 = maximum(%1467, %1468) /* ty=float32 */;
  %1472 = fn (%outer_arg_019: Tensor[(384, 64), int8], %outer_arg_119: Tensor[(64, 64), int8], %outer_arg_219: float32, %outer_arg_319: float32, %outer_arg_419: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_19") -> Tensor[(384, 64), int8] {
    %283 = fn (%data19: Tensor[(384, 64), int8], %weights19: Tensor[(64, 64), int8], %s_data19: float32, %s_w19: float32, %s_act19: float32, Composite="ilavta.dense") -> Tensor[(384, 64), int8] {
      %277 = nn.dense(%data19, %weights19, units=None, out_dtype="int32") /* ty=Tensor[(384, 64), int32] */;
      %278 = multiply(%s_data19, %s_w19) /* ty=float32 */;
      %279 = cast(%277, dtype="float32") /* ty=Tensor[(384, 64), float32] */;
      %280 = divide(%278, %s_act19) /* ty=float32 */;
      %281 = multiply(%279, %280) /* ty=Tensor[(384, 64), float32] */;
      %282 = clip(%281, a_min=-127f, a_max=127f) /* ty=Tensor[(384, 64), float32] */;
      cast(%282, dtype="int8") /* ty=Tensor[(384, 64), int8] */
    };
    %283(%outer_arg_019, %outer_arg_119, %outer_arg_219, %outer_arg_319, %outer_arg_419) /* ty=Tensor[(384, 64), int8] */
  };
  %1473 = %1472(%1469, %1470, %289, %1461, %1471) /* ty=Tensor[(384, 64), int8] */;
  %1474 = cast(%1473, dtype="float32") /* ty=Tensor[(384, 64), float32] */;
  %1475 = multiply(%1474, %1471) /* ty=Tensor[(384, 64), float32] */;
  %1476 = reshape(%1475, newshape=[384, 1, 8, 8]) /* from_string */ /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %1477 = add(%layers_8_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1478 = sqrt(%1477) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1479 = divide(%573, %1478) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1480 = multiply(%1479, %layers_8_bn1_weight) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1481 = expand_dims(%1480, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1482 = transpose(%1476, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1483 = expand_dims(%1481, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1484 = negative(%layers_8_bn1_running_mean) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1485 = multiply(%1484, %1480) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1486 = add(%1485, %layers_8_bn1_bias) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1487 = expand_dims(%1486, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1488 = multiply(%1482, %1483) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1489 = expand_dims(%1487, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1490 = add(%1488, %1489) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1491 = nn.relu(%1490) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1492 = reshape(%layers_8_conv2_weight, newshape=[384, 1, 3, 3]) /* from_string */ /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %1493 = add(%layers_8_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1494 = sqrt(%1493) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1495 = divide(%573, %1494) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1496 = multiply(%1495, %layers_8_bn2_weight) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1497 = expand_dims(%1496, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1498 = nn.conv2d(%1491, %1492, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1499 = expand_dims(%1497, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1500 = negative(%layers_8_bn2_running_mean) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1501 = multiply(%1500, %1496) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1502 = add(%1501, %layers_8_bn2_bias) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1503 = expand_dims(%1502, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1504 = multiply(%1498, %1499) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1505 = expand_dims(%1503, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1506 = add(%1504, %1505) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1507 = nn.relu(%1506) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1508 = nn.pad(%1507, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1509 = nn.pad(%1508, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1510 = windows(%1509, axis=1, window_shape=[384, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 384, 1, 1), float32] */;
  %1511 = squeeze(%1510, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 384, 1, 1), float32] */;
  %1512 = reshape(%1511, newshape=[64, 384]) /* from_string */ /* ty=Tensor[(64, 384), float32] */;
  %1513 = max(%1512) /* ty=float32 */;
  %1514 = min(%1512) /* ty=float32 */;
  %1515 = divide(%1513, 127f /* ty=float32 */) /* ty=float32 */;
  %1516 = divide(%1514, -127f /* ty=float32 */) /* ty=float32 */;
  %1517 = maximum(%1515, %1516) /* ty=float32 */;
  %1518 = divide(%1512, %1517) /* ty=Tensor[(64, 384), float32] */;
  %1519 = round(%1518) /* ty=Tensor[(64, 384), float32] */;
  %1520 = nn.dense(%269, %1512, units=None) /* ty=Tensor[(64, 64), float32] */;
  %1521 = max(%1520) /* ty=float32 */;
  %1522 = min(%1520) /* ty=float32 */;
  %1523 = divide(%1521, 127f /* ty=float32 */) /* ty=float32 */;
  %1524 = divide(%1522, -127f /* ty=float32 */) /* ty=float32 */;
  %1525 = cast(%276, dtype="int8") /* ty=Tensor[(64, 384), int8] */;
  %1526 = cast(%1519, dtype="int8") /* ty=Tensor[(64, 384), int8] */;
  %1527 = maximum(%1523, %1524) /* ty=float32 */;
  %1528 = fn (%outer_arg_018: Tensor[(64, 384), int8], %outer_arg_118: Tensor[(64, 384), int8], %outer_arg_218: float32, %outer_arg_318: float32, %outer_arg_418: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_20") -> Tensor[(64, 64), int8] {
    %268 = fn (%data18: Tensor[(64, 384), int8], %weights18: Tensor[(64, 384), int8], %s_data18: float32, %s_w18: float32, %s_act18: float32, Composite="ilavta.dense") -> Tensor[(64, 64), int8] {
      %262 = nn.dense(%data18, %weights18, units=None, out_dtype="int32") /* ty=Tensor[(64, 64), int32] */;
      %263 = multiply(%s_data18, %s_w18) /* ty=float32 */;
      %264 = cast(%262, dtype="float32") /* ty=Tensor[(64, 64), float32] */;
      %265 = divide(%263, %s_act18) /* ty=float32 */;
      %266 = multiply(%264, %265) /* ty=Tensor[(64, 64), float32] */;
      %267 = clip(%266, a_min=-127f, a_max=127f) /* ty=Tensor[(64, 64), float32] */;
      cast(%267, dtype="int8") /* ty=Tensor[(64, 64), int8] */
    };
    %268(%outer_arg_018, %outer_arg_118, %outer_arg_218, %outer_arg_318, %outer_arg_418) /* ty=Tensor[(64, 64), int8] */
  };
  %1529 = %1528(%1525, %1526, %274, %1517, %1527) /* ty=Tensor[(64, 64), int8] */;
  %1530 = cast(%1529, dtype="float32") /* ty=Tensor[(64, 64), float32] */;
  %1531 = multiply(%1530, %1527) /* ty=Tensor[(64, 64), float32] */;
  %1532 = reshape(%1531, newshape=[64, 1, 8, 8]) /* from_string */ /* ty=Tensor[(64, 1, 8, 8), float32] */;
  %1533 = add(%layers_8_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1534 = sqrt(%1533) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1535 = divide(%573, %1534) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1536 = multiply(%1535, %layers_8_bn3_weight) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1537 = expand_dims(%1536, axis=1) /* from_string */ /* ty=Tensor[(64, 1), float32] */;
  %1538 = transpose(%1532, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1539 = expand_dims(%1537, axis=1) /* from_string */ /* ty=Tensor[(64, 1, 1), float32] */;
  %1540 = negative(%layers_8_bn3_running_mean) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1541 = multiply(%1540, %1536) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1542 = add(%1541, %layers_8_bn3_bias) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1543 = expand_dims(%1542, axis=1) /* from_string */ /* ty=Tensor[(64, 1), float32] */;
  %1544 = multiply(%1538, %1539) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1545 = expand_dims(%1543, axis=1) /* from_string */ /* ty=Tensor[(64, 1, 1), float32] */;
  %1546 = add(%1544, %1545) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1547 = add(%1546, %1451) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1548 = nn.pad(%1547, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1549 = nn.pad(%1548, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1550 = windows(%1549, axis=1, window_shape=[64, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 64, 1, 1), float32] */;
  %1551 = squeeze(%1550, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 64, 1, 1), float32] */;
  %1552 = reshape(%1551, newshape=[64, 64]) /* from_string */ /* ty=Tensor[(64, 64), float32] */;
  %1553 = max(%1552) /* ty=float32 */;
  %1554 = min(%1552) /* ty=float32 */;
  %1555 = divide(%1553, 127f /* ty=float32 */) /* ty=float32 */;
  %1556 = divide(%1554, -127f /* ty=float32 */) /* ty=float32 */;
  %1557 = maximum(%1555, %1556) /* ty=float32 */;
  %1558 = divide(%1552, %1557) /* ty=Tensor[(64, 64), float32] */;
  %1559 = round(%1558) /* ty=Tensor[(64, 64), float32] */;
  %1560 = nn.dense(%254, %1552, units=None) /* ty=Tensor[(384, 64), float32] */;
  %1561 = max(%1560) /* ty=float32 */;
  %1562 = min(%1560) /* ty=float32 */;
  %1563 = divide(%1561, 127f /* ty=float32 */) /* ty=float32 */;
  %1564 = divide(%1562, -127f /* ty=float32 */) /* ty=float32 */;
  %1565 = cast(%261, dtype="int8") /* ty=Tensor[(384, 64), int8] */;
  %1566 = cast(%1559, dtype="int8") /* ty=Tensor[(64, 64), int8] */;
  %1567 = maximum(%1563, %1564) /* ty=float32 */;
  %1568 = fn (%outer_arg_017: Tensor[(384, 64), int8], %outer_arg_117: Tensor[(64, 64), int8], %outer_arg_217: float32, %outer_arg_317: float32, %outer_arg_417: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_21") -> Tensor[(384, 64), int8] {
    %253 = fn (%data17: Tensor[(384, 64), int8], %weights17: Tensor[(64, 64), int8], %s_data17: float32, %s_w17: float32, %s_act17: float32, Composite="ilavta.dense") -> Tensor[(384, 64), int8] {
      %247 = nn.dense(%data17, %weights17, units=None, out_dtype="int32") /* ty=Tensor[(384, 64), int32] */;
      %248 = multiply(%s_data17, %s_w17) /* ty=float32 */;
      %249 = cast(%247, dtype="float32") /* ty=Tensor[(384, 64), float32] */;
      %250 = divide(%248, %s_act17) /* ty=float32 */;
      %251 = multiply(%249, %250) /* ty=Tensor[(384, 64), float32] */;
      %252 = clip(%251, a_min=-127f, a_max=127f) /* ty=Tensor[(384, 64), float32] */;
      cast(%252, dtype="int8") /* ty=Tensor[(384, 64), int8] */
    };
    %253(%outer_arg_017, %outer_arg_117, %outer_arg_217, %outer_arg_317, %outer_arg_417) /* ty=Tensor[(384, 64), int8] */
  };
  %1569 = %1568(%1565, %1566, %259, %1557, %1567) /* ty=Tensor[(384, 64), int8] */;
  %1570 = cast(%1569, dtype="float32") /* ty=Tensor[(384, 64), float32] */;
  %1571 = multiply(%1570, %1567) /* ty=Tensor[(384, 64), float32] */;
  %1572 = reshape(%1571, newshape=[384, 1, 8, 8]) /* from_string */ /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %1573 = add(%layers_9_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1574 = sqrt(%1573) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1575 = divide(%573, %1574) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1576 = multiply(%1575, %layers_9_bn1_weight) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1577 = expand_dims(%1576, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1578 = transpose(%1572, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1579 = expand_dims(%1577, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1580 = negative(%layers_9_bn1_running_mean) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1581 = multiply(%1580, %1576) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1582 = add(%1581, %layers_9_bn1_bias) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1583 = expand_dims(%1582, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1584 = multiply(%1578, %1579) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1585 = expand_dims(%1583, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1586 = add(%1584, %1585) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1587 = nn.relu(%1586) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1588 = reshape(%layers_9_conv2_weight, newshape=[384, 1, 3, 3]) /* from_string */ /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %1589 = add(%layers_9_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1590 = sqrt(%1589) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1591 = divide(%573, %1590) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1592 = multiply(%1591, %layers_9_bn2_weight) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1593 = expand_dims(%1592, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1594 = nn.conv2d(%1587, %1588, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1595 = expand_dims(%1593, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1596 = negative(%layers_9_bn2_running_mean) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1597 = multiply(%1596, %1592) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1598 = add(%1597, %layers_9_bn2_bias) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1599 = expand_dims(%1598, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1600 = multiply(%1594, %1595) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1601 = expand_dims(%1599, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1602 = add(%1600, %1601) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1603 = nn.relu(%1602) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1604 = nn.pad(%1603, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1605 = nn.pad(%1604, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1606 = windows(%1605, axis=1, window_shape=[384, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 384, 1, 1), float32] */;
  %1607 = squeeze(%1606, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 384, 1, 1), float32] */;
  %1608 = reshape(%1607, newshape=[64, 384]) /* from_string */ /* ty=Tensor[(64, 384), float32] */;
  %1609 = max(%1608) /* ty=float32 */;
  %1610 = min(%1608) /* ty=float32 */;
  %1611 = divide(%1609, 127f /* ty=float32 */) /* ty=float32 */;
  %1612 = divide(%1610, -127f /* ty=float32 */) /* ty=float32 */;
  %1613 = maximum(%1611, %1612) /* ty=float32 */;
  %1614 = divide(%1608, %1613) /* ty=Tensor[(64, 384), float32] */;
  %1615 = round(%1614) /* ty=Tensor[(64, 384), float32] */;
  %1616 = nn.dense(%239, %1608, units=None) /* ty=Tensor[(64, 64), float32] */;
  %1617 = max(%1616) /* ty=float32 */;
  %1618 = min(%1616) /* ty=float32 */;
  %1619 = divide(%1617, 127f /* ty=float32 */) /* ty=float32 */;
  %1620 = divide(%1618, -127f /* ty=float32 */) /* ty=float32 */;
  %1621 = cast(%246, dtype="int8") /* ty=Tensor[(64, 384), int8] */;
  %1622 = cast(%1615, dtype="int8") /* ty=Tensor[(64, 384), int8] */;
  %1623 = maximum(%1619, %1620) /* ty=float32 */;
  %1624 = fn (%outer_arg_016: Tensor[(64, 384), int8], %outer_arg_116: Tensor[(64, 384), int8], %outer_arg_216: float32, %outer_arg_316: float32, %outer_arg_416: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_22") -> Tensor[(64, 64), int8] {
    %238 = fn (%data16: Tensor[(64, 384), int8], %weights16: Tensor[(64, 384), int8], %s_data16: float32, %s_w16: float32, %s_act16: float32, Composite="ilavta.dense") -> Tensor[(64, 64), int8] {
      %232 = nn.dense(%data16, %weights16, units=None, out_dtype="int32") /* ty=Tensor[(64, 64), int32] */;
      %233 = multiply(%s_data16, %s_w16) /* ty=float32 */;
      %234 = cast(%232, dtype="float32") /* ty=Tensor[(64, 64), float32] */;
      %235 = divide(%233, %s_act16) /* ty=float32 */;
      %236 = multiply(%234, %235) /* ty=Tensor[(64, 64), float32] */;
      %237 = clip(%236, a_min=-127f, a_max=127f) /* ty=Tensor[(64, 64), float32] */;
      cast(%237, dtype="int8") /* ty=Tensor[(64, 64), int8] */
    };
    %238(%outer_arg_016, %outer_arg_116, %outer_arg_216, %outer_arg_316, %outer_arg_416) /* ty=Tensor[(64, 64), int8] */
  };
  %1625 = %1624(%1621, %1622, %244, %1613, %1623) /* ty=Tensor[(64, 64), int8] */;
  %1626 = cast(%1625, dtype="float32") /* ty=Tensor[(64, 64), float32] */;
  %1627 = multiply(%1626, %1623) /* ty=Tensor[(64, 64), float32] */;
  %1628 = reshape(%1627, newshape=[64, 1, 8, 8]) /* from_string */ /* ty=Tensor[(64, 1, 8, 8), float32] */;
  %1629 = add(%layers_9_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1630 = sqrt(%1629) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1631 = divide(%573, %1630) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1632 = multiply(%1631, %layers_9_bn3_weight) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1633 = expand_dims(%1632, axis=1) /* from_string */ /* ty=Tensor[(64, 1), float32] */;
  %1634 = transpose(%1628, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1635 = expand_dims(%1633, axis=1) /* from_string */ /* ty=Tensor[(64, 1, 1), float32] */;
  %1636 = negative(%layers_9_bn3_running_mean) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1637 = multiply(%1636, %1632) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1638 = add(%1637, %layers_9_bn3_bias) /* from_string */ /* ty=Tensor[(64), float32] */;
  %1639 = expand_dims(%1638, axis=1) /* from_string */ /* ty=Tensor[(64, 1), float32] */;
  %1640 = multiply(%1634, %1635) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1641 = expand_dims(%1639, axis=1) /* from_string */ /* ty=Tensor[(64, 1, 1), float32] */;
  %1642 = add(%1640, %1641) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1643 = add(%1642, %1547) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1644 = nn.pad(%1643, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1645 = nn.pad(%1644, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %1646 = windows(%1645, axis=1, window_shape=[64, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 64, 1, 1), float32] */;
  %1647 = squeeze(%1646, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 64, 1, 1), float32] */;
  %1648 = reshape(%1647, newshape=[64, 64]) /* from_string */ /* ty=Tensor[(64, 64), float32] */;
  %1649 = max(%1648) /* ty=float32 */;
  %1650 = min(%1648) /* ty=float32 */;
  %1651 = divide(%1649, 127f /* ty=float32 */) /* ty=float32 */;
  %1652 = divide(%1650, -127f /* ty=float32 */) /* ty=float32 */;
  %1653 = maximum(%1651, %1652) /* ty=float32 */;
  %1654 = divide(%1648, %1653) /* ty=Tensor[(64, 64), float32] */;
  %1655 = round(%1654) /* ty=Tensor[(64, 64), float32] */;
  %1656 = nn.dense(%224, %1648, units=None) /* ty=Tensor[(384, 64), float32] */;
  %1657 = max(%1656) /* ty=float32 */;
  %1658 = min(%1656) /* ty=float32 */;
  %1659 = divide(%1657, 127f /* ty=float32 */) /* ty=float32 */;
  %1660 = divide(%1658, -127f /* ty=float32 */) /* ty=float32 */;
  %1661 = cast(%231, dtype="int8") /* ty=Tensor[(384, 64), int8] */;
  %1662 = cast(%1655, dtype="int8") /* ty=Tensor[(64, 64), int8] */;
  %1663 = maximum(%1659, %1660) /* ty=float32 */;
  %1664 = fn (%outer_arg_015: Tensor[(384, 64), int8], %outer_arg_115: Tensor[(64, 64), int8], %outer_arg_215: float32, %outer_arg_315: float32, %outer_arg_415: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_23") -> Tensor[(384, 64), int8] {
    %223 = fn (%data15: Tensor[(384, 64), int8], %weights15: Tensor[(64, 64), int8], %s_data15: float32, %s_w15: float32, %s_act15: float32, Composite="ilavta.dense") -> Tensor[(384, 64), int8] {
      %217 = nn.dense(%data15, %weights15, units=None, out_dtype="int32") /* ty=Tensor[(384, 64), int32] */;
      %218 = multiply(%s_data15, %s_w15) /* ty=float32 */;
      %219 = cast(%217, dtype="float32") /* ty=Tensor[(384, 64), float32] */;
      %220 = divide(%218, %s_act15) /* ty=float32 */;
      %221 = multiply(%219, %220) /* ty=Tensor[(384, 64), float32] */;
      %222 = clip(%221, a_min=-127f, a_max=127f) /* ty=Tensor[(384, 64), float32] */;
      cast(%222, dtype="int8") /* ty=Tensor[(384, 64), int8] */
    };
    %223(%outer_arg_015, %outer_arg_115, %outer_arg_215, %outer_arg_315, %outer_arg_415) /* ty=Tensor[(384, 64), int8] */
  };
  %1665 = %1664(%1661, %1662, %229, %1653, %1663) /* ty=Tensor[(384, 64), int8] */;
  %1666 = cast(%1665, dtype="float32") /* ty=Tensor[(384, 64), float32] */;
  %1667 = multiply(%1666, %1663) /* ty=Tensor[(384, 64), float32] */;
  %1668 = reshape(%1667, newshape=[384, 1, 8, 8]) /* from_string */ /* ty=Tensor[(384, 1, 8, 8), float32] */;
  %1669 = add(%layers_10_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1670 = sqrt(%1669) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1671 = divide(%573, %1670) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1672 = multiply(%1671, %layers_10_bn1_weight) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1673 = expand_dims(%1672, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1674 = transpose(%1668, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1675 = expand_dims(%1673, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1676 = negative(%layers_10_bn1_running_mean) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1677 = multiply(%1676, %1672) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1678 = add(%1677, %layers_10_bn1_bias) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1679 = expand_dims(%1678, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1680 = multiply(%1674, %1675) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1681 = expand_dims(%1679, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1682 = add(%1680, %1681) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1683 = nn.relu(%1682) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1684 = reshape(%layers_10_conv2_weight, newshape=[384, 1, 3, 3]) /* from_string */ /* ty=Tensor[(384, 1, 3, 3), float32] */;
  %1685 = add(%layers_10_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1686 = sqrt(%1685) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1687 = divide(%573, %1686) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1688 = multiply(%1687, %layers_10_bn2_weight) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1689 = expand_dims(%1688, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1690 = nn.conv2d(%1683, %1684, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1691 = expand_dims(%1689, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1692 = negative(%layers_10_bn2_running_mean) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1693 = multiply(%1692, %1688) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1694 = add(%1693, %layers_10_bn2_bias) /* from_string */ /* ty=Tensor[(384), float32] */;
  %1695 = expand_dims(%1694, axis=1) /* from_string */ /* ty=Tensor[(384, 1), float32] */;
  %1696 = multiply(%1690, %1691) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1697 = expand_dims(%1695, axis=1) /* from_string */ /* ty=Tensor[(384, 1, 1), float32] */;
  %1698 = add(%1696, %1697) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1699 = nn.relu(%1698) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1700 = nn.pad(%1699, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1701 = nn.pad(%1700, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 384, 8, 8), float32] */;
  %1702 = windows(%1701, axis=1, window_shape=[384, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 384, 1, 1), float32] */;
  %1703 = squeeze(%1702, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 384, 1, 1), float32] */;
  %1704 = reshape(%1703, newshape=[64, 384]) /* from_string */ /* ty=Tensor[(64, 384), float32] */;
  %1705 = max(%1704) /* ty=float32 */;
  %1706 = min(%1704) /* ty=float32 */;
  %1707 = divide(%1705, 127f /* ty=float32 */) /* ty=float32 */;
  %1708 = divide(%1706, -127f /* ty=float32 */) /* ty=float32 */;
  %1709 = maximum(%1707, %1708) /* ty=float32 */;
  %1710 = divide(%1704, %1709) /* ty=Tensor[(64, 384), float32] */;
  %1711 = round(%1710) /* ty=Tensor[(64, 384), float32] */;
  %1712 = nn.dense(%209, %1704, units=None) /* ty=Tensor[(96, 64), float32] */;
  %1713 = max(%1712) /* ty=float32 */;
  %1714 = min(%1712) /* ty=float32 */;
  %1715 = divide(%1713, 127f /* ty=float32 */) /* ty=float32 */;
  %1716 = divide(%1714, -127f /* ty=float32 */) /* ty=float32 */;
  %1717 = cast(%216, dtype="int8") /* ty=Tensor[(96, 384), int8] */;
  %1718 = cast(%1711, dtype="int8") /* ty=Tensor[(64, 384), int8] */;
  %1719 = maximum(%1715, %1716) /* ty=float32 */;
  %1720 = fn (%outer_arg_014: Tensor[(96, 384), int8], %outer_arg_114: Tensor[(64, 384), int8], %outer_arg_214: float32, %outer_arg_314: float32, %outer_arg_414: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_24") -> Tensor[(96, 64), int8] {
    %208 = fn (%data14: Tensor[(96, 384), int8], %weights14: Tensor[(64, 384), int8], %s_data14: float32, %s_w14: float32, %s_act14: float32, Composite="ilavta.dense") -> Tensor[(96, 64), int8] {
      %202 = nn.dense(%data14, %weights14, units=None, out_dtype="int32") /* ty=Tensor[(96, 64), int32] */;
      %203 = multiply(%s_data14, %s_w14) /* ty=float32 */;
      %204 = cast(%202, dtype="float32") /* ty=Tensor[(96, 64), float32] */;
      %205 = divide(%203, %s_act14) /* ty=float32 */;
      %206 = multiply(%204, %205) /* ty=Tensor[(96, 64), float32] */;
      %207 = clip(%206, a_min=-127f, a_max=127f) /* ty=Tensor[(96, 64), float32] */;
      cast(%207, dtype="int8") /* ty=Tensor[(96, 64), int8] */
    };
    %208(%outer_arg_014, %outer_arg_114, %outer_arg_214, %outer_arg_314, %outer_arg_414) /* ty=Tensor[(96, 64), int8] */
  };
  %1721 = %1720(%1717, %1718, %214, %1709, %1719) /* ty=Tensor[(96, 64), int8] */;
  %1722 = cast(%1721, dtype="float32") /* ty=Tensor[(96, 64), float32] */;
  %1723 = multiply(%1722, %1719) /* ty=Tensor[(96, 64), float32] */;
  %1724 = reshape(%1723, newshape=[96, 1, 8, 8]) /* from_string */ /* ty=Tensor[(96, 1, 8, 8), float32] */;
  %1725 = add(%layers_10_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1726 = sqrt(%1725) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1727 = divide(%573, %1726) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1728 = multiply(%1727, %layers_10_bn3_weight) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1729 = expand_dims(%1728, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %1730 = transpose(%1724, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1731 = expand_dims(%1729, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %1732 = negative(%layers_10_bn3_running_mean) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1733 = multiply(%1732, %1728) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1734 = add(%1733, %layers_10_bn3_bias) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1735 = expand_dims(%1734, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %1736 = multiply(%1730, %1731) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1737 = expand_dims(%1735, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %1745 = reshape(%layers_10_shortcut_0_weight, newshape=[96, 64]) /* from_string */ /* ty=Tensor[(96, 64), float32] */;
  %1746 = max(%1745) /* ty=float32 */;
  %1747 = min(%1745) /* ty=float32 */;
  %1748 = divide(%1746, 127f /* ty=float32 */) /* ty=float32 */;
  %1749 = divide(%1747, -127f /* ty=float32 */) /* ty=float32 */;
  %1750 = maximum(%1748, %1749) /* ty=float32 */;
  %1751 = divide(%1745, %1750) /* ty=Tensor[(96, 64), float32] */;
  %1752 = round(%1751) /* ty=Tensor[(96, 64), float32] */;
  %1753 = max(%1648) /* ty=float32 */;
  %1754 = min(%1648) /* ty=float32 */;
  %1755 = divide(%1753, 127f /* ty=float32 */) /* ty=float32 */;
  %1756 = divide(%1754, -127f /* ty=float32 */) /* ty=float32 */;
  %1757 = maximum(%1755, %1756) /* ty=float32 */;
  %1758 = divide(%1648, %1757) /* ty=Tensor[(64, 64), float32] */;
  %1759 = round(%1758) /* ty=Tensor[(64, 64), float32] */;
  %1760 = nn.dense(%1745, %1648, units=None) /* ty=Tensor[(96, 64), float32] */;
  %1761 = max(%1760) /* ty=float32 */;
  %1762 = min(%1760) /* ty=float32 */;
  %1763 = divide(%1761, 127f /* ty=float32 */) /* ty=float32 */;
  %1764 = divide(%1762, -127f /* ty=float32 */) /* ty=float32 */;
  %1765 = cast(%1752, dtype="int8") /* ty=Tensor[(96, 64), int8] */;
  %1766 = cast(%1759, dtype="int8") /* ty=Tensor[(64, 64), int8] */;
  %1767 = maximum(%1763, %1764) /* ty=float32 */;
  %1768 = fn (%outer_arg_039: Tensor[(96, 64), int8], %outer_arg_139: Tensor[(64, 64), int8], %outer_arg_239: float32, %outer_arg_339: float32, %outer_arg_439: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_25") -> Tensor[(96, 64), int8] {
    %1744 = fn (%data39: Tensor[(96, 64), int8], %weights39: Tensor[(64, 64), int8], %s_data39: float32, %s_w39: float32, %s_act39: float32, Composite="ilavta.dense") -> Tensor[(96, 64), int8] {
      %1738 = nn.dense(%data39, %weights39, units=None, out_dtype="int32") /* ty=Tensor[(96, 64), int32] */;
      %1739 = multiply(%s_data39, %s_w39) /* ty=float32 */;
      %1740 = cast(%1738, dtype="float32") /* ty=Tensor[(96, 64), float32] */;
      %1741 = divide(%1739, %s_act39) /* ty=float32 */;
      %1742 = multiply(%1740, %1741) /* ty=Tensor[(96, 64), float32] */;
      %1743 = clip(%1742, a_min=-127f, a_max=127f) /* ty=Tensor[(96, 64), float32] */;
      cast(%1743, dtype="int8") /* ty=Tensor[(96, 64), int8] */
    };
    %1744(%outer_arg_039, %outer_arg_139, %outer_arg_239, %outer_arg_339, %outer_arg_439) /* ty=Tensor[(96, 64), int8] */
  };
  %1769 = %1768(%1765, %1766, %1750, %1757, %1767) /* ty=Tensor[(96, 64), int8] */;
  %1770 = cast(%1769, dtype="float32") /* ty=Tensor[(96, 64), float32] */;
  %1771 = multiply(%1770, %1767) /* ty=Tensor[(96, 64), float32] */;
  %1772 = reshape(%1771, newshape=[96, 1, 8, 8]) /* from_string */ /* ty=Tensor[(96, 1, 8, 8), float32] */;
  %1773 = add(%layers_10_shortcut_1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1774 = sqrt(%1773) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1775 = divide(%573, %1774) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1776 = multiply(%1775, %layers_10_shortcut_1_weight) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1777 = expand_dims(%1776, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %1778 = transpose(%1772, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1779 = expand_dims(%1777, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %1780 = negative(%layers_10_shortcut_1_running_mean) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1781 = multiply(%1780, %1776) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1782 = add(%1781, %layers_10_shortcut_1_bias) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1783 = expand_dims(%1782, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %1784 = multiply(%1778, %1779) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1785 = expand_dims(%1783, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %1786 = add(%1736, %1737) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1787 = add(%1784, %1785) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1788 = add(%1786, %1787) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1789 = nn.pad(%1788, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1790 = nn.pad(%1789, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1791 = windows(%1790, axis=1, window_shape=[96, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 96, 1, 1), float32] */;
  %1792 = squeeze(%1791, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 96, 1, 1), float32] */;
  %1793 = reshape(%1792, newshape=[64, 96]) /* from_string */ /* ty=Tensor[(64, 96), float32] */;
  %1794 = max(%1793) /* ty=float32 */;
  %1795 = min(%1793) /* ty=float32 */;
  %1796 = divide(%1794, 127f /* ty=float32 */) /* ty=float32 */;
  %1797 = divide(%1795, -127f /* ty=float32 */) /* ty=float32 */;
  %1798 = maximum(%1796, %1797) /* ty=float32 */;
  %1799 = divide(%1793, %1798) /* ty=Tensor[(64, 96), float32] */;
  %1800 = round(%1799) /* ty=Tensor[(64, 96), float32] */;
  %1801 = nn.dense(%194, %1793, units=None) /* ty=Tensor[(576, 64), float32] */;
  %1802 = max(%1801) /* ty=float32 */;
  %1803 = min(%1801) /* ty=float32 */;
  %1804 = divide(%1802, 127f /* ty=float32 */) /* ty=float32 */;
  %1805 = divide(%1803, -127f /* ty=float32 */) /* ty=float32 */;
  %1806 = cast(%201, dtype="int8") /* ty=Tensor[(576, 96), int8] */;
  %1807 = cast(%1800, dtype="int8") /* ty=Tensor[(64, 96), int8] */;
  %1808 = maximum(%1804, %1805) /* ty=float32 */;
  %1809 = fn (%outer_arg_013: Tensor[(576, 96), int8], %outer_arg_113: Tensor[(64, 96), int8], %outer_arg_213: float32, %outer_arg_313: float32, %outer_arg_413: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_26") -> Tensor[(576, 64), int8] {
    %193 = fn (%data13: Tensor[(576, 96), int8], %weights13: Tensor[(64, 96), int8], %s_data13: float32, %s_w13: float32, %s_act13: float32, Composite="ilavta.dense") -> Tensor[(576, 64), int8] {
      %187 = nn.dense(%data13, %weights13, units=None, out_dtype="int32") /* ty=Tensor[(576, 64), int32] */;
      %188 = multiply(%s_data13, %s_w13) /* ty=float32 */;
      %189 = cast(%187, dtype="float32") /* ty=Tensor[(576, 64), float32] */;
      %190 = divide(%188, %s_act13) /* ty=float32 */;
      %191 = multiply(%189, %190) /* ty=Tensor[(576, 64), float32] */;
      %192 = clip(%191, a_min=-127f, a_max=127f) /* ty=Tensor[(576, 64), float32] */;
      cast(%192, dtype="int8") /* ty=Tensor[(576, 64), int8] */
    };
    %193(%outer_arg_013, %outer_arg_113, %outer_arg_213, %outer_arg_313, %outer_arg_413) /* ty=Tensor[(576, 64), int8] */
  };
  %1810 = %1809(%1806, %1807, %199, %1798, %1808) /* ty=Tensor[(576, 64), int8] */;
  %1811 = cast(%1810, dtype="float32") /* ty=Tensor[(576, 64), float32] */;
  %1812 = multiply(%1811, %1808) /* ty=Tensor[(576, 64), float32] */;
  %1813 = reshape(%1812, newshape=[576, 1, 8, 8]) /* from_string */ /* ty=Tensor[(576, 1, 8, 8), float32] */;
  %1814 = add(%layers_11_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1815 = sqrt(%1814) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1816 = divide(%573, %1815) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1817 = multiply(%1816, %layers_11_bn1_weight) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1818 = expand_dims(%1817, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %1819 = transpose(%1813, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1820 = expand_dims(%1818, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %1821 = negative(%layers_11_bn1_running_mean) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1822 = multiply(%1821, %1817) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1823 = add(%1822, %layers_11_bn1_bias) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1824 = expand_dims(%1823, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %1825 = multiply(%1819, %1820) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1826 = expand_dims(%1824, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %1827 = add(%1825, %1826) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1828 = nn.relu(%1827) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1829 = reshape(%layers_11_conv2_weight, newshape=[576, 1, 3, 3]) /* from_string */ /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %1830 = add(%layers_11_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1831 = sqrt(%1830) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1832 = divide(%573, %1831) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1833 = multiply(%1832, %layers_11_bn2_weight) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1834 = expand_dims(%1833, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %1835 = nn.conv2d(%1828, %1829, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1836 = expand_dims(%1834, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %1837 = negative(%layers_11_bn2_running_mean) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1838 = multiply(%1837, %1833) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1839 = add(%1838, %layers_11_bn2_bias) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1840 = expand_dims(%1839, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %1841 = multiply(%1835, %1836) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1842 = expand_dims(%1840, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %1843 = add(%1841, %1842) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1844 = nn.relu(%1843) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1845 = nn.pad(%1844, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1846 = nn.pad(%1845, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1847 = windows(%1846, axis=1, window_shape=[576, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 576, 1, 1), float32] */;
  %1848 = squeeze(%1847, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 576, 1, 1), float32] */;
  %1849 = reshape(%1848, newshape=[64, 576]) /* from_string */ /* ty=Tensor[(64, 576), float32] */;
  %1850 = max(%1849) /* ty=float32 */;
  %1851 = min(%1849) /* ty=float32 */;
  %1852 = divide(%1850, 127f /* ty=float32 */) /* ty=float32 */;
  %1853 = divide(%1851, -127f /* ty=float32 */) /* ty=float32 */;
  %1854 = maximum(%1852, %1853) /* ty=float32 */;
  %1855 = divide(%1849, %1854) /* ty=Tensor[(64, 576), float32] */;
  %1856 = round(%1855) /* ty=Tensor[(64, 576), float32] */;
  %1857 = nn.dense(%179, %1849, units=None) /* ty=Tensor[(96, 64), float32] */;
  %1858 = max(%1857) /* ty=float32 */;
  %1859 = min(%1857) /* ty=float32 */;
  %1860 = divide(%1858, 127f /* ty=float32 */) /* ty=float32 */;
  %1861 = divide(%1859, -127f /* ty=float32 */) /* ty=float32 */;
  %1862 = cast(%186, dtype="int8") /* ty=Tensor[(96, 576), int8] */;
  %1863 = cast(%1856, dtype="int8") /* ty=Tensor[(64, 576), int8] */;
  %1864 = maximum(%1860, %1861) /* ty=float32 */;
  %1865 = fn (%outer_arg_012: Tensor[(96, 576), int8], %outer_arg_112: Tensor[(64, 576), int8], %outer_arg_212: float32, %outer_arg_312: float32, %outer_arg_412: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_27") -> Tensor[(96, 64), int8] {
    %178 = fn (%data12: Tensor[(96, 576), int8], %weights12: Tensor[(64, 576), int8], %s_data12: float32, %s_w12: float32, %s_act12: float32, Composite="ilavta.dense") -> Tensor[(96, 64), int8] {
      %172 = nn.dense(%data12, %weights12, units=None, out_dtype="int32") /* ty=Tensor[(96, 64), int32] */;
      %173 = multiply(%s_data12, %s_w12) /* ty=float32 */;
      %174 = cast(%172, dtype="float32") /* ty=Tensor[(96, 64), float32] */;
      %175 = divide(%173, %s_act12) /* ty=float32 */;
      %176 = multiply(%174, %175) /* ty=Tensor[(96, 64), float32] */;
      %177 = clip(%176, a_min=-127f, a_max=127f) /* ty=Tensor[(96, 64), float32] */;
      cast(%177, dtype="int8") /* ty=Tensor[(96, 64), int8] */
    };
    %178(%outer_arg_012, %outer_arg_112, %outer_arg_212, %outer_arg_312, %outer_arg_412) /* ty=Tensor[(96, 64), int8] */
  };
  %1866 = %1865(%1862, %1863, %184, %1854, %1864) /* ty=Tensor[(96, 64), int8] */;
  %1867 = cast(%1866, dtype="float32") /* ty=Tensor[(96, 64), float32] */;
  %1868 = multiply(%1867, %1864) /* ty=Tensor[(96, 64), float32] */;
  %1869 = reshape(%1868, newshape=[96, 1, 8, 8]) /* from_string */ /* ty=Tensor[(96, 1, 8, 8), float32] */;
  %1870 = add(%layers_11_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1871 = sqrt(%1870) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1872 = divide(%573, %1871) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1873 = multiply(%1872, %layers_11_bn3_weight) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1874 = expand_dims(%1873, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %1875 = transpose(%1869, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1876 = expand_dims(%1874, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %1877 = negative(%layers_11_bn3_running_mean) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1878 = multiply(%1877, %1873) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1879 = add(%1878, %layers_11_bn3_bias) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1880 = expand_dims(%1879, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %1881 = multiply(%1875, %1876) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1882 = expand_dims(%1880, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %1883 = add(%1881, %1882) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1884 = add(%1883, %1788) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1885 = nn.pad(%1884, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1886 = nn.pad(%1885, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1887 = windows(%1886, axis=1, window_shape=[96, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 96, 1, 1), float32] */;
  %1888 = squeeze(%1887, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 96, 1, 1), float32] */;
  %1889 = reshape(%1888, newshape=[64, 96]) /* from_string */ /* ty=Tensor[(64, 96), float32] */;
  %1890 = max(%1889) /* ty=float32 */;
  %1891 = min(%1889) /* ty=float32 */;
  %1892 = divide(%1890, 127f /* ty=float32 */) /* ty=float32 */;
  %1893 = divide(%1891, -127f /* ty=float32 */) /* ty=float32 */;
  %1894 = maximum(%1892, %1893) /* ty=float32 */;
  %1895 = divide(%1889, %1894) /* ty=Tensor[(64, 96), float32] */;
  %1896 = round(%1895) /* ty=Tensor[(64, 96), float32] */;
  %1897 = nn.dense(%164, %1889, units=None) /* ty=Tensor[(576, 64), float32] */;
  %1898 = max(%1897) /* ty=float32 */;
  %1899 = min(%1897) /* ty=float32 */;
  %1900 = divide(%1898, 127f /* ty=float32 */) /* ty=float32 */;
  %1901 = divide(%1899, -127f /* ty=float32 */) /* ty=float32 */;
  %1902 = cast(%171, dtype="int8") /* ty=Tensor[(576, 96), int8] */;
  %1903 = cast(%1896, dtype="int8") /* ty=Tensor[(64, 96), int8] */;
  %1904 = maximum(%1900, %1901) /* ty=float32 */;
  %1905 = fn (%outer_arg_011: Tensor[(576, 96), int8], %outer_arg_111: Tensor[(64, 96), int8], %outer_arg_211: float32, %outer_arg_311: float32, %outer_arg_411: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_28") -> Tensor[(576, 64), int8] {
    %163 = fn (%data11: Tensor[(576, 96), int8], %weights11: Tensor[(64, 96), int8], %s_data11: float32, %s_w11: float32, %s_act11: float32, Composite="ilavta.dense") -> Tensor[(576, 64), int8] {
      %157 = nn.dense(%data11, %weights11, units=None, out_dtype="int32") /* ty=Tensor[(576, 64), int32] */;
      %158 = multiply(%s_data11, %s_w11) /* ty=float32 */;
      %159 = cast(%157, dtype="float32") /* ty=Tensor[(576, 64), float32] */;
      %160 = divide(%158, %s_act11) /* ty=float32 */;
      %161 = multiply(%159, %160) /* ty=Tensor[(576, 64), float32] */;
      %162 = clip(%161, a_min=-127f, a_max=127f) /* ty=Tensor[(576, 64), float32] */;
      cast(%162, dtype="int8") /* ty=Tensor[(576, 64), int8] */
    };
    %163(%outer_arg_011, %outer_arg_111, %outer_arg_211, %outer_arg_311, %outer_arg_411) /* ty=Tensor[(576, 64), int8] */
  };
  %1906 = %1905(%1902, %1903, %169, %1894, %1904) /* ty=Tensor[(576, 64), int8] */;
  %1907 = cast(%1906, dtype="float32") /* ty=Tensor[(576, 64), float32] */;
  %1908 = multiply(%1907, %1904) /* ty=Tensor[(576, 64), float32] */;
  %1909 = reshape(%1908, newshape=[576, 1, 8, 8]) /* from_string */ /* ty=Tensor[(576, 1, 8, 8), float32] */;
  %1910 = add(%layers_12_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1911 = sqrt(%1910) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1912 = divide(%573, %1911) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1913 = multiply(%1912, %layers_12_bn1_weight) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1914 = expand_dims(%1913, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %1915 = transpose(%1909, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1916 = expand_dims(%1914, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %1917 = negative(%layers_12_bn1_running_mean) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1918 = multiply(%1917, %1913) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1919 = add(%1918, %layers_12_bn1_bias) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1920 = expand_dims(%1919, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %1921 = multiply(%1915, %1916) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1922 = expand_dims(%1920, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %1923 = add(%1921, %1922) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1924 = nn.relu(%1923) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1925 = reshape(%layers_12_conv2_weight, newshape=[576, 1, 3, 3]) /* from_string */ /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %1926 = add(%layers_12_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1927 = sqrt(%1926) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1928 = divide(%573, %1927) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1929 = multiply(%1928, %layers_12_bn2_weight) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1930 = expand_dims(%1929, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %1931 = nn.conv2d(%1924, %1925, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1932 = expand_dims(%1930, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %1933 = negative(%layers_12_bn2_running_mean) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1934 = multiply(%1933, %1929) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1935 = add(%1934, %layers_12_bn2_bias) /* from_string */ /* ty=Tensor[(576), float32] */;
  %1936 = expand_dims(%1935, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %1937 = multiply(%1931, %1932) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1938 = expand_dims(%1936, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %1939 = add(%1937, %1938) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1940 = nn.relu(%1939) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1941 = nn.pad(%1940, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1942 = nn.pad(%1941, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %1943 = windows(%1942, axis=1, window_shape=[576, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 576, 1, 1), float32] */;
  %1944 = squeeze(%1943, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 576, 1, 1), float32] */;
  %1945 = reshape(%1944, newshape=[64, 576]) /* from_string */ /* ty=Tensor[(64, 576), float32] */;
  %1946 = max(%1945) /* ty=float32 */;
  %1947 = min(%1945) /* ty=float32 */;
  %1948 = divide(%1946, 127f /* ty=float32 */) /* ty=float32 */;
  %1949 = divide(%1947, -127f /* ty=float32 */) /* ty=float32 */;
  %1950 = maximum(%1948, %1949) /* ty=float32 */;
  %1951 = divide(%1945, %1950) /* ty=Tensor[(64, 576), float32] */;
  %1952 = round(%1951) /* ty=Tensor[(64, 576), float32] */;
  %1953 = nn.dense(%149, %1945, units=None) /* ty=Tensor[(96, 64), float32] */;
  %1954 = max(%1953) /* ty=float32 */;
  %1955 = min(%1953) /* ty=float32 */;
  %1956 = divide(%1954, 127f /* ty=float32 */) /* ty=float32 */;
  %1957 = divide(%1955, -127f /* ty=float32 */) /* ty=float32 */;
  %1958 = cast(%156, dtype="int8") /* ty=Tensor[(96, 576), int8] */;
  %1959 = cast(%1952, dtype="int8") /* ty=Tensor[(64, 576), int8] */;
  %1960 = maximum(%1956, %1957) /* ty=float32 */;
  %1961 = fn (%outer_arg_010: Tensor[(96, 576), int8], %outer_arg_110: Tensor[(64, 576), int8], %outer_arg_210: float32, %outer_arg_310: float32, %outer_arg_410: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_29") -> Tensor[(96, 64), int8] {
    %148 = fn (%data10: Tensor[(96, 576), int8], %weights10: Tensor[(64, 576), int8], %s_data10: float32, %s_w10: float32, %s_act10: float32, Composite="ilavta.dense") -> Tensor[(96, 64), int8] {
      %142 = nn.dense(%data10, %weights10, units=None, out_dtype="int32") /* ty=Tensor[(96, 64), int32] */;
      %143 = multiply(%s_data10, %s_w10) /* ty=float32 */;
      %144 = cast(%142, dtype="float32") /* ty=Tensor[(96, 64), float32] */;
      %145 = divide(%143, %s_act10) /* ty=float32 */;
      %146 = multiply(%144, %145) /* ty=Tensor[(96, 64), float32] */;
      %147 = clip(%146, a_min=-127f, a_max=127f) /* ty=Tensor[(96, 64), float32] */;
      cast(%147, dtype="int8") /* ty=Tensor[(96, 64), int8] */
    };
    %148(%outer_arg_010, %outer_arg_110, %outer_arg_210, %outer_arg_310, %outer_arg_410) /* ty=Tensor[(96, 64), int8] */
  };
  %1962 = %1961(%1958, %1959, %154, %1950, %1960) /* ty=Tensor[(96, 64), int8] */;
  %1963 = cast(%1962, dtype="float32") /* ty=Tensor[(96, 64), float32] */;
  %1964 = multiply(%1963, %1960) /* ty=Tensor[(96, 64), float32] */;
  %1965 = reshape(%1964, newshape=[96, 1, 8, 8]) /* from_string */ /* ty=Tensor[(96, 1, 8, 8), float32] */;
  %1966 = add(%layers_12_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1967 = sqrt(%1966) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1968 = divide(%573, %1967) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1969 = multiply(%1968, %layers_12_bn3_weight) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1970 = expand_dims(%1969, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %1971 = transpose(%1965, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1972 = expand_dims(%1970, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %1973 = negative(%layers_12_bn3_running_mean) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1974 = multiply(%1973, %1969) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1975 = add(%1974, %layers_12_bn3_bias) /* from_string */ /* ty=Tensor[(96), float32] */;
  %1976 = expand_dims(%1975, axis=1) /* from_string */ /* ty=Tensor[(96, 1), float32] */;
  %1977 = multiply(%1971, %1972) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1978 = expand_dims(%1976, axis=1) /* from_string */ /* ty=Tensor[(96, 1, 1), float32] */;
  %1979 = add(%1977, %1978) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1980 = add(%1979, %1884) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1981 = nn.pad(%1980, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1982 = nn.pad(%1981, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %1983 = windows(%1982, axis=1, window_shape=[96, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 8, 8, 96, 1, 1), float32] */;
  %1984 = squeeze(%1983, axis=[1]) /* from_string */ /* ty=Tensor[(1, 8, 8, 96, 1, 1), float32] */;
  %1985 = reshape(%1984, newshape=[64, 96]) /* from_string */ /* ty=Tensor[(64, 96), float32] */;
  %1986 = max(%1985) /* ty=float32 */;
  %1987 = min(%1985) /* ty=float32 */;
  %1988 = divide(%1986, 127f /* ty=float32 */) /* ty=float32 */;
  %1989 = divide(%1987, -127f /* ty=float32 */) /* ty=float32 */;
  %1990 = maximum(%1988, %1989) /* ty=float32 */;
  %1991 = divide(%1985, %1990) /* ty=Tensor[(64, 96), float32] */;
  %1992 = round(%1991) /* ty=Tensor[(64, 96), float32] */;
  %1993 = nn.dense(%134, %1985, units=None) /* ty=Tensor[(576, 64), float32] */;
  %1994 = max(%1993) /* ty=float32 */;
  %1995 = min(%1993) /* ty=float32 */;
  %1996 = divide(%1994, 127f /* ty=float32 */) /* ty=float32 */;
  %1997 = divide(%1995, -127f /* ty=float32 */) /* ty=float32 */;
  %1998 = cast(%141, dtype="int8") /* ty=Tensor[(576, 96), int8] */;
  %1999 = cast(%1992, dtype="int8") /* ty=Tensor[(64, 96), int8] */;
  %2000 = maximum(%1996, %1997) /* ty=float32 */;
  %2001 = fn (%outer_arg_09: Tensor[(576, 96), int8], %outer_arg_19: Tensor[(64, 96), int8], %outer_arg_29: float32, %outer_arg_39: float32, %outer_arg_49: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_30") -> Tensor[(576, 64), int8] {
    %133 = fn (%data9: Tensor[(576, 96), int8], %weights9: Tensor[(64, 96), int8], %s_data9: float32, %s_w9: float32, %s_act9: float32, Composite="ilavta.dense") -> Tensor[(576, 64), int8] {
      %127 = nn.dense(%data9, %weights9, units=None, out_dtype="int32") /* ty=Tensor[(576, 64), int32] */;
      %128 = multiply(%s_data9, %s_w9) /* ty=float32 */;
      %129 = cast(%127, dtype="float32") /* ty=Tensor[(576, 64), float32] */;
      %130 = divide(%128, %s_act9) /* ty=float32 */;
      %131 = multiply(%129, %130) /* ty=Tensor[(576, 64), float32] */;
      %132 = clip(%131, a_min=-127f, a_max=127f) /* ty=Tensor[(576, 64), float32] */;
      cast(%132, dtype="int8") /* ty=Tensor[(576, 64), int8] */
    };
    %133(%outer_arg_09, %outer_arg_19, %outer_arg_29, %outer_arg_39, %outer_arg_49) /* ty=Tensor[(576, 64), int8] */
  };
  %2002 = %2001(%1998, %1999, %139, %1990, %2000) /* ty=Tensor[(576, 64), int8] */;
  %2003 = cast(%2002, dtype="float32") /* ty=Tensor[(576, 64), float32] */;
  %2004 = multiply(%2003, %2000) /* ty=Tensor[(576, 64), float32] */;
  %2005 = reshape(%2004, newshape=[576, 1, 8, 8]) /* from_string */ /* ty=Tensor[(576, 1, 8, 8), float32] */;
  %2006 = add(%layers_13_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2007 = sqrt(%2006) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2008 = divide(%573, %2007) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2009 = multiply(%2008, %layers_13_bn1_weight) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2010 = expand_dims(%2009, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %2011 = transpose(%2005, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %2012 = expand_dims(%2010, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %2013 = negative(%layers_13_bn1_running_mean) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2014 = multiply(%2013, %2009) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2015 = add(%2014, %layers_13_bn1_bias) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2016 = expand_dims(%2015, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %2017 = multiply(%2011, %2012) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %2018 = expand_dims(%2016, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %2019 = add(%2017, %2018) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %2020 = nn.relu(%2019) /* from_string */ /* ty=Tensor[(1, 576, 8, 8), float32] */;
  %2021 = reshape(%layers_13_conv2_weight, newshape=[576, 1, 3, 3]) /* from_string */ /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %2022 = add(%layers_13_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2023 = sqrt(%2022) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2024 = divide(%573, %2023) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2025 = multiply(%2024, %layers_13_bn2_weight) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2026 = expand_dims(%2025, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %2027 = nn.conv2d(%2020, %2021, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %2028 = expand_dims(%2026, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %2029 = negative(%layers_13_bn2_running_mean) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2030 = multiply(%2029, %2025) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2031 = add(%2030, %layers_13_bn2_bias) /* from_string */ /* ty=Tensor[(576), float32] */;
  %2032 = expand_dims(%2031, axis=1) /* from_string */ /* ty=Tensor[(576, 1), float32] */;
  %2033 = multiply(%2027, %2028) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %2034 = expand_dims(%2032, axis=1) /* from_string */ /* ty=Tensor[(576, 1, 1), float32] */;
  %2035 = add(%2033, %2034) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %2036 = nn.relu(%2035) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %2037 = nn.pad(%2036, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %2038 = nn.pad(%2037, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %2039 = windows(%2038, axis=1, window_shape=[576, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 4, 4, 576, 1, 1), float32] */;
  %2040 = squeeze(%2039, axis=[1]) /* from_string */ /* ty=Tensor[(1, 4, 4, 576, 1, 1), float32] */;
  %2041 = reshape(%2040, newshape=[16, 576]) /* from_string */ /* ty=Tensor[(16, 576), float32] */;
  %2042 = max(%2041) /* ty=float32 */;
  %2043 = min(%2041) /* ty=float32 */;
  %2044 = divide(%2042, 127f /* ty=float32 */) /* ty=float32 */;
  %2045 = divide(%2043, -127f /* ty=float32 */) /* ty=float32 */;
  %2046 = maximum(%2044, %2045) /* ty=float32 */;
  %2047 = divide(%2041, %2046) /* ty=Tensor[(16, 576), float32] */;
  %2048 = round(%2047) /* ty=Tensor[(16, 576), float32] */;
  %2049 = nn.dense(%119, %2041, units=None) /* ty=Tensor[(160, 16), float32] */;
  %2050 = max(%2049) /* ty=float32 */;
  %2051 = min(%2049) /* ty=float32 */;
  %2052 = divide(%2050, 127f /* ty=float32 */) /* ty=float32 */;
  %2053 = divide(%2051, -127f /* ty=float32 */) /* ty=float32 */;
  %2054 = cast(%126, dtype="int8") /* ty=Tensor[(160, 576), int8] */;
  %2055 = cast(%2048, dtype="int8") /* ty=Tensor[(16, 576), int8] */;
  %2056 = maximum(%2052, %2053) /* ty=float32 */;
  %2057 = fn (%outer_arg_08: Tensor[(160, 576), int8], %outer_arg_18: Tensor[(16, 576), int8], %outer_arg_28: float32, %outer_arg_38: float32, %outer_arg_48: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_31") -> Tensor[(160, 16), int8] {
    %118 = fn (%data8: Tensor[(160, 576), int8], %weights8: Tensor[(16, 576), int8], %s_data8: float32, %s_w8: float32, %s_act8: float32, Composite="ilavta.dense") -> Tensor[(160, 16), int8] {
      %112 = nn.dense(%data8, %weights8, units=None, out_dtype="int32") /* ty=Tensor[(160, 16), int32] */;
      %113 = multiply(%s_data8, %s_w8) /* ty=float32 */;
      %114 = cast(%112, dtype="float32") /* ty=Tensor[(160, 16), float32] */;
      %115 = divide(%113, %s_act8) /* ty=float32 */;
      %116 = multiply(%114, %115) /* ty=Tensor[(160, 16), float32] */;
      %117 = clip(%116, a_min=-127f, a_max=127f) /* ty=Tensor[(160, 16), float32] */;
      cast(%117, dtype="int8") /* ty=Tensor[(160, 16), int8] */
    };
    %118(%outer_arg_08, %outer_arg_18, %outer_arg_28, %outer_arg_38, %outer_arg_48) /* ty=Tensor[(160, 16), int8] */
  };
  %2058 = %2057(%2054, %2055, %124, %2046, %2056) /* ty=Tensor[(160, 16), int8] */;
  %2059 = cast(%2058, dtype="float32") /* ty=Tensor[(160, 16), float32] */;
  %2060 = multiply(%2059, %2056) /* ty=Tensor[(160, 16), float32] */;
  %2061 = reshape(%2060, newshape=[160, 1, 4, 4]) /* from_string */ /* ty=Tensor[(160, 1, 4, 4), float32] */;
  %2062 = add(%layers_13_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2063 = sqrt(%2062) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2064 = divide(%573, %2063) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2065 = multiply(%2064, %layers_13_bn3_weight) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2066 = expand_dims(%2065, axis=1) /* from_string */ /* ty=Tensor[(160, 1), float32] */;
  %2067 = transpose(%2061, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2068 = expand_dims(%2066, axis=1) /* from_string */ /* ty=Tensor[(160, 1, 1), float32] */;
  %2069 = negative(%layers_13_bn3_running_mean) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2070 = multiply(%2069, %2065) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2071 = add(%2070, %layers_13_bn3_bias) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2072 = expand_dims(%2071, axis=1) /* from_string */ /* ty=Tensor[(160, 1), float32] */;
  %2073 = multiply(%2067, %2068) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2074 = expand_dims(%2072, axis=1) /* from_string */ /* ty=Tensor[(160, 1, 1), float32] */;
  %2075 = add(%2073, %2074) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2076 = nn.pad(%2075, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2077 = nn.pad(%2076, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2078 = windows(%2077, axis=1, window_shape=[160, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 4, 4, 160, 1, 1), float32] */;
  %2079 = squeeze(%2078, axis=[1]) /* from_string */ /* ty=Tensor[(1, 4, 4, 160, 1, 1), float32] */;
  %2080 = reshape(%2079, newshape=[16, 160]) /* from_string */ /* ty=Tensor[(16, 160), float32] */;
  %2081 = max(%2080) /* ty=float32 */;
  %2082 = min(%2080) /* ty=float32 */;
  %2083 = divide(%2081, 127f /* ty=float32 */) /* ty=float32 */;
  %2084 = divide(%2082, -127f /* ty=float32 */) /* ty=float32 */;
  %2085 = maximum(%2083, %2084) /* ty=float32 */;
  %2086 = divide(%2080, %2085) /* ty=Tensor[(16, 160), float32] */;
  %2087 = round(%2086) /* ty=Tensor[(16, 160), float32] */;
  %2088 = nn.dense(%104, %2080, units=None) /* ty=Tensor[(960, 16), float32] */;
  %2089 = max(%2088) /* ty=float32 */;
  %2090 = min(%2088) /* ty=float32 */;
  %2091 = divide(%2089, 127f /* ty=float32 */) /* ty=float32 */;
  %2092 = divide(%2090, -127f /* ty=float32 */) /* ty=float32 */;
  %2093 = cast(%111, dtype="int8") /* ty=Tensor[(960, 160), int8] */;
  %2094 = cast(%2087, dtype="int8") /* ty=Tensor[(16, 160), int8] */;
  %2095 = maximum(%2091, %2092) /* ty=float32 */;
  %2096 = fn (%outer_arg_07: Tensor[(960, 160), int8], %outer_arg_17: Tensor[(16, 160), int8], %outer_arg_27: float32, %outer_arg_37: float32, %outer_arg_47: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_32") -> Tensor[(960, 16), int8] {
    %103 = fn (%data7: Tensor[(960, 160), int8], %weights7: Tensor[(16, 160), int8], %s_data7: float32, %s_w7: float32, %s_act7: float32, Composite="ilavta.dense") -> Tensor[(960, 16), int8] {
      %97 = nn.dense(%data7, %weights7, units=None, out_dtype="int32") /* ty=Tensor[(960, 16), int32] */;
      %98 = multiply(%s_data7, %s_w7) /* ty=float32 */;
      %99 = cast(%97, dtype="float32") /* ty=Tensor[(960, 16), float32] */;
      %100 = divide(%98, %s_act7) /* ty=float32 */;
      %101 = multiply(%99, %100) /* ty=Tensor[(960, 16), float32] */;
      %102 = clip(%101, a_min=-127f, a_max=127f) /* ty=Tensor[(960, 16), float32] */;
      cast(%102, dtype="int8") /* ty=Tensor[(960, 16), int8] */
    };
    %103(%outer_arg_07, %outer_arg_17, %outer_arg_27, %outer_arg_37, %outer_arg_47) /* ty=Tensor[(960, 16), int8] */
  };
  %2097 = %2096(%2093, %2094, %109, %2085, %2095) /* ty=Tensor[(960, 16), int8] */;
  %2098 = cast(%2097, dtype="float32") /* ty=Tensor[(960, 16), float32] */;
  %2099 = multiply(%2098, %2095) /* ty=Tensor[(960, 16), float32] */;
  %2100 = reshape(%2099, newshape=[960, 1, 4, 4]) /* from_string */ /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %2101 = add(%layers_14_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2102 = sqrt(%2101) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2103 = divide(%573, %2102) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2104 = multiply(%2103, %layers_14_bn1_weight) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2105 = expand_dims(%2104, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2106 = transpose(%2100, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2107 = expand_dims(%2105, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2108 = negative(%layers_14_bn1_running_mean) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2109 = multiply(%2108, %2104) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2110 = add(%2109, %layers_14_bn1_bias) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2111 = expand_dims(%2110, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2112 = multiply(%2106, %2107) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2113 = expand_dims(%2111, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2114 = add(%2112, %2113) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2115 = nn.relu(%2114) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2116 = reshape(%layers_14_conv2_weight, newshape=[960, 1, 3, 3]) /* from_string */ /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %2117 = add(%layers_14_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2118 = sqrt(%2117) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2119 = divide(%573, %2118) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2120 = multiply(%2119, %layers_14_bn2_weight) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2121 = expand_dims(%2120, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2122 = nn.conv2d(%2115, %2116, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2123 = expand_dims(%2121, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2124 = negative(%layers_14_bn2_running_mean) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2125 = multiply(%2124, %2120) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2126 = add(%2125, %layers_14_bn2_bias) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2127 = expand_dims(%2126, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2128 = multiply(%2122, %2123) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2129 = expand_dims(%2127, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2130 = add(%2128, %2129) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2131 = nn.relu(%2130) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2132 = nn.pad(%2131, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2133 = nn.pad(%2132, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2134 = windows(%2133, axis=1, window_shape=[960, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 4, 4, 960, 1, 1), float32] */;
  %2135 = squeeze(%2134, axis=[1]) /* from_string */ /* ty=Tensor[(1, 4, 4, 960, 1, 1), float32] */;
  %2136 = reshape(%2135, newshape=[16, 960]) /* from_string */ /* ty=Tensor[(16, 960), float32] */;
  %2137 = max(%2136) /* ty=float32 */;
  %2138 = min(%2136) /* ty=float32 */;
  %2139 = divide(%2137, 127f /* ty=float32 */) /* ty=float32 */;
  %2140 = divide(%2138, -127f /* ty=float32 */) /* ty=float32 */;
  %2141 = maximum(%2139, %2140) /* ty=float32 */;
  %2142 = divide(%2136, %2141) /* ty=Tensor[(16, 960), float32] */;
  %2143 = round(%2142) /* ty=Tensor[(16, 960), float32] */;
  %2144 = nn.dense(%89, %2136, units=None) /* ty=Tensor[(160, 16), float32] */;
  %2145 = max(%2144) /* ty=float32 */;
  %2146 = min(%2144) /* ty=float32 */;
  %2147 = divide(%2145, 127f /* ty=float32 */) /* ty=float32 */;
  %2148 = divide(%2146, -127f /* ty=float32 */) /* ty=float32 */;
  %2149 = cast(%96, dtype="int8") /* ty=Tensor[(160, 960), int8] */;
  %2150 = cast(%2143, dtype="int8") /* ty=Tensor[(16, 960), int8] */;
  %2151 = maximum(%2147, %2148) /* ty=float32 */;
  %2152 = fn (%outer_arg_06: Tensor[(160, 960), int8], %outer_arg_16: Tensor[(16, 960), int8], %outer_arg_26: float32, %outer_arg_36: float32, %outer_arg_46: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_33") -> Tensor[(160, 16), int8] {
    %88 = fn (%data6: Tensor[(160, 960), int8], %weights6: Tensor[(16, 960), int8], %s_data6: float32, %s_w6: float32, %s_act6: float32, Composite="ilavta.dense") -> Tensor[(160, 16), int8] {
      %82 = nn.dense(%data6, %weights6, units=None, out_dtype="int32") /* ty=Tensor[(160, 16), int32] */;
      %83 = multiply(%s_data6, %s_w6) /* ty=float32 */;
      %84 = cast(%82, dtype="float32") /* ty=Tensor[(160, 16), float32] */;
      %85 = divide(%83, %s_act6) /* ty=float32 */;
      %86 = multiply(%84, %85) /* ty=Tensor[(160, 16), float32] */;
      %87 = clip(%86, a_min=-127f, a_max=127f) /* ty=Tensor[(160, 16), float32] */;
      cast(%87, dtype="int8") /* ty=Tensor[(160, 16), int8] */
    };
    %88(%outer_arg_06, %outer_arg_16, %outer_arg_26, %outer_arg_36, %outer_arg_46) /* ty=Tensor[(160, 16), int8] */
  };
  %2153 = %2152(%2149, %2150, %94, %2141, %2151) /* ty=Tensor[(160, 16), int8] */;
  %2154 = cast(%2153, dtype="float32") /* ty=Tensor[(160, 16), float32] */;
  %2155 = multiply(%2154, %2151) /* ty=Tensor[(160, 16), float32] */;
  %2156 = reshape(%2155, newshape=[160, 1, 4, 4]) /* from_string */ /* ty=Tensor[(160, 1, 4, 4), float32] */;
  %2157 = add(%layers_14_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2158 = sqrt(%2157) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2159 = divide(%573, %2158) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2160 = multiply(%2159, %layers_14_bn3_weight) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2161 = expand_dims(%2160, axis=1) /* from_string */ /* ty=Tensor[(160, 1), float32] */;
  %2162 = transpose(%2156, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2163 = expand_dims(%2161, axis=1) /* from_string */ /* ty=Tensor[(160, 1, 1), float32] */;
  %2164 = negative(%layers_14_bn3_running_mean) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2165 = multiply(%2164, %2160) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2166 = add(%2165, %layers_14_bn3_bias) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2167 = expand_dims(%2166, axis=1) /* from_string */ /* ty=Tensor[(160, 1), float32] */;
  %2168 = multiply(%2162, %2163) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2169 = expand_dims(%2167, axis=1) /* from_string */ /* ty=Tensor[(160, 1, 1), float32] */;
  %2170 = add(%2168, %2169) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2171 = add(%2170, %2075) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2172 = nn.pad(%2171, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2173 = nn.pad(%2172, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2174 = windows(%2173, axis=1, window_shape=[160, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 4, 4, 160, 1, 1), float32] */;
  %2175 = squeeze(%2174, axis=[1]) /* from_string */ /* ty=Tensor[(1, 4, 4, 160, 1, 1), float32] */;
  %2176 = reshape(%2175, newshape=[16, 160]) /* from_string */ /* ty=Tensor[(16, 160), float32] */;
  %2177 = max(%2176) /* ty=float32 */;
  %2178 = min(%2176) /* ty=float32 */;
  %2179 = divide(%2177, 127f /* ty=float32 */) /* ty=float32 */;
  %2180 = divide(%2178, -127f /* ty=float32 */) /* ty=float32 */;
  %2181 = maximum(%2179, %2180) /* ty=float32 */;
  %2182 = divide(%2176, %2181) /* ty=Tensor[(16, 160), float32] */;
  %2183 = round(%2182) /* ty=Tensor[(16, 160), float32] */;
  %2184 = nn.dense(%74, %2176, units=None) /* ty=Tensor[(960, 16), float32] */;
  %2185 = max(%2184) /* ty=float32 */;
  %2186 = min(%2184) /* ty=float32 */;
  %2187 = divide(%2185, 127f /* ty=float32 */) /* ty=float32 */;
  %2188 = divide(%2186, -127f /* ty=float32 */) /* ty=float32 */;
  %2189 = cast(%81, dtype="int8") /* ty=Tensor[(960, 160), int8] */;
  %2190 = cast(%2183, dtype="int8") /* ty=Tensor[(16, 160), int8] */;
  %2191 = maximum(%2187, %2188) /* ty=float32 */;
  %2192 = fn (%outer_arg_05: Tensor[(960, 160), int8], %outer_arg_15: Tensor[(16, 160), int8], %outer_arg_25: float32, %outer_arg_35: float32, %outer_arg_45: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_34") -> Tensor[(960, 16), int8] {
    %73 = fn (%data5: Tensor[(960, 160), int8], %weights5: Tensor[(16, 160), int8], %s_data5: float32, %s_w5: float32, %s_act5: float32, Composite="ilavta.dense") -> Tensor[(960, 16), int8] {
      %67 = nn.dense(%data5, %weights5, units=None, out_dtype="int32") /* ty=Tensor[(960, 16), int32] */;
      %68 = multiply(%s_data5, %s_w5) /* ty=float32 */;
      %69 = cast(%67, dtype="float32") /* ty=Tensor[(960, 16), float32] */;
      %70 = divide(%68, %s_act5) /* ty=float32 */;
      %71 = multiply(%69, %70) /* ty=Tensor[(960, 16), float32] */;
      %72 = clip(%71, a_min=-127f, a_max=127f) /* ty=Tensor[(960, 16), float32] */;
      cast(%72, dtype="int8") /* ty=Tensor[(960, 16), int8] */
    };
    %73(%outer_arg_05, %outer_arg_15, %outer_arg_25, %outer_arg_35, %outer_arg_45) /* ty=Tensor[(960, 16), int8] */
  };
  %2193 = %2192(%2189, %2190, %79, %2181, %2191) /* ty=Tensor[(960, 16), int8] */;
  %2194 = cast(%2193, dtype="float32") /* ty=Tensor[(960, 16), float32] */;
  %2195 = multiply(%2194, %2191) /* ty=Tensor[(960, 16), float32] */;
  %2196 = reshape(%2195, newshape=[960, 1, 4, 4]) /* from_string */ /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %2197 = add(%layers_15_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2198 = sqrt(%2197) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2199 = divide(%573, %2198) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2200 = multiply(%2199, %layers_15_bn1_weight) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2201 = expand_dims(%2200, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2202 = transpose(%2196, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2203 = expand_dims(%2201, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2204 = negative(%layers_15_bn1_running_mean) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2205 = multiply(%2204, %2200) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2206 = add(%2205, %layers_15_bn1_bias) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2207 = expand_dims(%2206, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2208 = multiply(%2202, %2203) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2209 = expand_dims(%2207, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2210 = add(%2208, %2209) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2211 = nn.relu(%2210) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2212 = reshape(%layers_15_conv2_weight, newshape=[960, 1, 3, 3]) /* from_string */ /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %2213 = add(%layers_15_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2214 = sqrt(%2213) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2215 = divide(%573, %2214) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2216 = multiply(%2215, %layers_15_bn2_weight) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2217 = expand_dims(%2216, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2218 = nn.conv2d(%2211, %2212, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2219 = expand_dims(%2217, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2220 = negative(%layers_15_bn2_running_mean) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2221 = multiply(%2220, %2216) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2222 = add(%2221, %layers_15_bn2_bias) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2223 = expand_dims(%2222, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2224 = multiply(%2218, %2219) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2225 = expand_dims(%2223, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2226 = add(%2224, %2225) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2227 = nn.relu(%2226) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2228 = nn.pad(%2227, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2229 = nn.pad(%2228, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2230 = windows(%2229, axis=1, window_shape=[960, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 4, 4, 960, 1, 1), float32] */;
  %2231 = squeeze(%2230, axis=[1]) /* from_string */ /* ty=Tensor[(1, 4, 4, 960, 1, 1), float32] */;
  %2232 = reshape(%2231, newshape=[16, 960]) /* from_string */ /* ty=Tensor[(16, 960), float32] */;
  %2233 = max(%2232) /* ty=float32 */;
  %2234 = min(%2232) /* ty=float32 */;
  %2235 = divide(%2233, 127f /* ty=float32 */) /* ty=float32 */;
  %2236 = divide(%2234, -127f /* ty=float32 */) /* ty=float32 */;
  %2237 = maximum(%2235, %2236) /* ty=float32 */;
  %2238 = divide(%2232, %2237) /* ty=Tensor[(16, 960), float32] */;
  %2239 = round(%2238) /* ty=Tensor[(16, 960), float32] */;
  %2240 = nn.dense(%59, %2232, units=None) /* ty=Tensor[(160, 16), float32] */;
  %2241 = max(%2240) /* ty=float32 */;
  %2242 = min(%2240) /* ty=float32 */;
  %2243 = divide(%2241, 127f /* ty=float32 */) /* ty=float32 */;
  %2244 = divide(%2242, -127f /* ty=float32 */) /* ty=float32 */;
  %2245 = cast(%66, dtype="int8") /* ty=Tensor[(160, 960), int8] */;
  %2246 = cast(%2239, dtype="int8") /* ty=Tensor[(16, 960), int8] */;
  %2247 = maximum(%2243, %2244) /* ty=float32 */;
  %2248 = fn (%outer_arg_04: Tensor[(160, 960), int8], %outer_arg_14: Tensor[(16, 960), int8], %outer_arg_24: float32, %outer_arg_34: float32, %outer_arg_44: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_35") -> Tensor[(160, 16), int8] {
    %58 = fn (%data4: Tensor[(160, 960), int8], %weights4: Tensor[(16, 960), int8], %s_data4: float32, %s_w4: float32, %s_act4: float32, Composite="ilavta.dense") -> Tensor[(160, 16), int8] {
      %52 = nn.dense(%data4, %weights4, units=None, out_dtype="int32") /* ty=Tensor[(160, 16), int32] */;
      %53 = multiply(%s_data4, %s_w4) /* ty=float32 */;
      %54 = cast(%52, dtype="float32") /* ty=Tensor[(160, 16), float32] */;
      %55 = divide(%53, %s_act4) /* ty=float32 */;
      %56 = multiply(%54, %55) /* ty=Tensor[(160, 16), float32] */;
      %57 = clip(%56, a_min=-127f, a_max=127f) /* ty=Tensor[(160, 16), float32] */;
      cast(%57, dtype="int8") /* ty=Tensor[(160, 16), int8] */
    };
    %58(%outer_arg_04, %outer_arg_14, %outer_arg_24, %outer_arg_34, %outer_arg_44) /* ty=Tensor[(160, 16), int8] */
  };
  %2249 = %2248(%2245, %2246, %64, %2237, %2247) /* ty=Tensor[(160, 16), int8] */;
  %2250 = cast(%2249, dtype="float32") /* ty=Tensor[(160, 16), float32] */;
  %2251 = multiply(%2250, %2247) /* ty=Tensor[(160, 16), float32] */;
  %2252 = reshape(%2251, newshape=[160, 1, 4, 4]) /* from_string */ /* ty=Tensor[(160, 1, 4, 4), float32] */;
  %2253 = add(%layers_15_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2254 = sqrt(%2253) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2255 = divide(%573, %2254) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2256 = multiply(%2255, %layers_15_bn3_weight) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2257 = expand_dims(%2256, axis=1) /* from_string */ /* ty=Tensor[(160, 1), float32] */;
  %2258 = transpose(%2252, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2259 = expand_dims(%2257, axis=1) /* from_string */ /* ty=Tensor[(160, 1, 1), float32] */;
  %2260 = negative(%layers_15_bn3_running_mean) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2261 = multiply(%2260, %2256) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2262 = add(%2261, %layers_15_bn3_bias) /* from_string */ /* ty=Tensor[(160), float32] */;
  %2263 = expand_dims(%2262, axis=1) /* from_string */ /* ty=Tensor[(160, 1), float32] */;
  %2264 = multiply(%2258, %2259) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2265 = expand_dims(%2263, axis=1) /* from_string */ /* ty=Tensor[(160, 1, 1), float32] */;
  %2266 = add(%2264, %2265) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2267 = add(%2266, %2171) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2268 = nn.pad(%2267, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2269 = nn.pad(%2268, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %2270 = windows(%2269, axis=1, window_shape=[160, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 4, 4, 160, 1, 1), float32] */;
  %2271 = squeeze(%2270, axis=[1]) /* from_string */ /* ty=Tensor[(1, 4, 4, 160, 1, 1), float32] */;
  %2272 = reshape(%2271, newshape=[16, 160]) /* from_string */ /* ty=Tensor[(16, 160), float32] */;
  %2273 = max(%2272) /* ty=float32 */;
  %2274 = min(%2272) /* ty=float32 */;
  %2275 = divide(%2273, 127f /* ty=float32 */) /* ty=float32 */;
  %2276 = divide(%2274, -127f /* ty=float32 */) /* ty=float32 */;
  %2277 = maximum(%2275, %2276) /* ty=float32 */;
  %2278 = divide(%2272, %2277) /* ty=Tensor[(16, 160), float32] */;
  %2279 = round(%2278) /* ty=Tensor[(16, 160), float32] */;
  %2280 = nn.dense(%44, %2272, units=None) /* ty=Tensor[(960, 16), float32] */;
  %2281 = max(%2280) /* ty=float32 */;
  %2282 = min(%2280) /* ty=float32 */;
  %2283 = divide(%2281, 127f /* ty=float32 */) /* ty=float32 */;
  %2284 = divide(%2282, -127f /* ty=float32 */) /* ty=float32 */;
  %2285 = cast(%51, dtype="int8") /* ty=Tensor[(960, 160), int8] */;
  %2286 = cast(%2279, dtype="int8") /* ty=Tensor[(16, 160), int8] */;
  %2287 = maximum(%2283, %2284) /* ty=float32 */;
  %2288 = fn (%outer_arg_03: Tensor[(960, 160), int8], %outer_arg_13: Tensor[(16, 160), int8], %outer_arg_23: float32, %outer_arg_33: float32, %outer_arg_43: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_36") -> Tensor[(960, 16), int8] {
    %43 = fn (%data3: Tensor[(960, 160), int8], %weights3: Tensor[(16, 160), int8], %s_data3: float32, %s_w3: float32, %s_act3: float32, Composite="ilavta.dense") -> Tensor[(960, 16), int8] {
      %37 = nn.dense(%data3, %weights3, units=None, out_dtype="int32") /* ty=Tensor[(960, 16), int32] */;
      %38 = multiply(%s_data3, %s_w3) /* ty=float32 */;
      %39 = cast(%37, dtype="float32") /* ty=Tensor[(960, 16), float32] */;
      %40 = divide(%38, %s_act3) /* ty=float32 */;
      %41 = multiply(%39, %40) /* ty=Tensor[(960, 16), float32] */;
      %42 = clip(%41, a_min=-127f, a_max=127f) /* ty=Tensor[(960, 16), float32] */;
      cast(%42, dtype="int8") /* ty=Tensor[(960, 16), int8] */
    };
    %43(%outer_arg_03, %outer_arg_13, %outer_arg_23, %outer_arg_33, %outer_arg_43) /* ty=Tensor[(960, 16), int8] */
  };
  %2289 = %2288(%2285, %2286, %49, %2277, %2287) /* ty=Tensor[(960, 16), int8] */;
  %2290 = cast(%2289, dtype="float32") /* ty=Tensor[(960, 16), float32] */;
  %2291 = multiply(%2290, %2287) /* ty=Tensor[(960, 16), float32] */;
  %2292 = reshape(%2291, newshape=[960, 1, 4, 4]) /* from_string */ /* ty=Tensor[(960, 1, 4, 4), float32] */;
  %2293 = add(%layers_16_bn1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2294 = sqrt(%2293) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2295 = divide(%573, %2294) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2296 = multiply(%2295, %layers_16_bn1_weight) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2297 = expand_dims(%2296, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2298 = transpose(%2292, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2299 = expand_dims(%2297, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2300 = negative(%layers_16_bn1_running_mean) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2301 = multiply(%2300, %2296) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2302 = add(%2301, %layers_16_bn1_bias) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2303 = expand_dims(%2302, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2304 = multiply(%2298, %2299) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2305 = expand_dims(%2303, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2306 = add(%2304, %2305) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2307 = nn.relu(%2306) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2308 = reshape(%layers_16_conv2_weight, newshape=[960, 1, 3, 3]) /* from_string */ /* ty=Tensor[(960, 1, 3, 3), float32] */;
  %2309 = add(%layers_16_bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2310 = sqrt(%2309) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2311 = divide(%573, %2310) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2312 = multiply(%2311, %layers_16_bn2_weight) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2313 = expand_dims(%2312, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2314 = nn.conv2d(%2307, %2308, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2315 = expand_dims(%2313, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2316 = negative(%layers_16_bn2_running_mean) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2317 = multiply(%2316, %2312) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2318 = add(%2317, %layers_16_bn2_bias) /* from_string */ /* ty=Tensor[(960), float32] */;
  %2319 = expand_dims(%2318, axis=1) /* from_string */ /* ty=Tensor[(960, 1), float32] */;
  %2320 = multiply(%2314, %2315) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2321 = expand_dims(%2319, axis=1) /* from_string */ /* ty=Tensor[(960, 1, 1), float32] */;
  %2322 = add(%2320, %2321) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2323 = nn.relu(%2322) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2324 = nn.pad(%2323, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2325 = nn.pad(%2324, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 960, 4, 4), float32] */;
  %2326 = windows(%2325, axis=1, window_shape=[960, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 4, 4, 960, 1, 1), float32] */;
  %2327 = squeeze(%2326, axis=[1]) /* from_string */ /* ty=Tensor[(1, 4, 4, 960, 1, 1), float32] */;
  %2328 = reshape(%2327, newshape=[16, 960]) /* from_string */ /* ty=Tensor[(16, 960), float32] */;
  %2329 = max(%2328) /* ty=float32 */;
  %2330 = min(%2328) /* ty=float32 */;
  %2331 = divide(%2329, 127f /* ty=float32 */) /* ty=float32 */;
  %2332 = divide(%2330, -127f /* ty=float32 */) /* ty=float32 */;
  %2333 = maximum(%2331, %2332) /* ty=float32 */;
  %2334 = divide(%2328, %2333) /* ty=Tensor[(16, 960), float32] */;
  %2335 = round(%2334) /* ty=Tensor[(16, 960), float32] */;
  %2336 = nn.dense(%29, %2328, units=None) /* ty=Tensor[(320, 16), float32] */;
  %2337 = max(%2336) /* ty=float32 */;
  %2338 = min(%2336) /* ty=float32 */;
  %2339 = divide(%2337, 127f /* ty=float32 */) /* ty=float32 */;
  %2340 = divide(%2338, -127f /* ty=float32 */) /* ty=float32 */;
  %2341 = cast(%36, dtype="int8") /* ty=Tensor[(320, 960), int8] */;
  %2342 = cast(%2335, dtype="int8") /* ty=Tensor[(16, 960), int8] */;
  %2343 = maximum(%2339, %2340) /* ty=float32 */;
  %2344 = fn (%outer_arg_02: Tensor[(320, 960), int8], %outer_arg_12: Tensor[(16, 960), int8], %outer_arg_22: float32, %outer_arg_32: float32, %outer_arg_42: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_37") -> Tensor[(320, 16), int8] {
    %28 = fn (%data2: Tensor[(320, 960), int8], %weights2: Tensor[(16, 960), int8], %s_data2: float32, %s_w2: float32, %s_act2: float32, Composite="ilavta.dense") -> Tensor[(320, 16), int8] {
      %22 = nn.dense(%data2, %weights2, units=None, out_dtype="int32") /* ty=Tensor[(320, 16), int32] */;
      %23 = multiply(%s_data2, %s_w2) /* ty=float32 */;
      %24 = cast(%22, dtype="float32") /* ty=Tensor[(320, 16), float32] */;
      %25 = divide(%23, %s_act2) /* ty=float32 */;
      %26 = multiply(%24, %25) /* ty=Tensor[(320, 16), float32] */;
      %27 = clip(%26, a_min=-127f, a_max=127f) /* ty=Tensor[(320, 16), float32] */;
      cast(%27, dtype="int8") /* ty=Tensor[(320, 16), int8] */
    };
    %28(%outer_arg_02, %outer_arg_12, %outer_arg_22, %outer_arg_32, %outer_arg_42) /* ty=Tensor[(320, 16), int8] */
  };
  %2345 = %2344(%2341, %2342, %34, %2333, %2343) /* ty=Tensor[(320, 16), int8] */;
  %2346 = cast(%2345, dtype="float32") /* ty=Tensor[(320, 16), float32] */;
  %2347 = multiply(%2346, %2343) /* ty=Tensor[(320, 16), float32] */;
  %2348 = reshape(%2347, newshape=[320, 1, 4, 4]) /* from_string */ /* ty=Tensor[(320, 1, 4, 4), float32] */;
  %2349 = add(%layers_16_bn3_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2350 = sqrt(%2349) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2351 = divide(%573, %2350) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2352 = multiply(%2351, %layers_16_bn3_weight) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2353 = expand_dims(%2352, axis=1) /* from_string */ /* ty=Tensor[(320, 1), float32] */;
  %2354 = transpose(%2348, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %2355 = expand_dims(%2353, axis=1) /* from_string */ /* ty=Tensor[(320, 1, 1), float32] */;
  %2356 = negative(%layers_16_bn3_running_mean) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2357 = multiply(%2356, %2352) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2358 = add(%2357, %layers_16_bn3_bias) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2359 = expand_dims(%2358, axis=1) /* from_string */ /* ty=Tensor[(320, 1), float32] */;
  %2360 = multiply(%2354, %2355) /* from_string */ /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %2361 = expand_dims(%2359, axis=1) /* from_string */ /* ty=Tensor[(320, 1, 1), float32] */;
  %2369 = reshape(%layers_16_shortcut_0_weight, newshape=[320, 160]) /* from_string */ /* ty=Tensor[(320, 160), float32] */;
  %2370 = max(%2369) /* ty=float32 */;
  %2371 = min(%2369) /* ty=float32 */;
  %2372 = divide(%2370, 127f /* ty=float32 */) /* ty=float32 */;
  %2373 = divide(%2371, -127f /* ty=float32 */) /* ty=float32 */;
  %2374 = maximum(%2372, %2373) /* ty=float32 */;
  %2375 = divide(%2369, %2374) /* ty=Tensor[(320, 160), float32] */;
  %2376 = round(%2375) /* ty=Tensor[(320, 160), float32] */;
  %2377 = max(%2272) /* ty=float32 */;
  %2378 = min(%2272) /* ty=float32 */;
  %2379 = divide(%2377, 127f /* ty=float32 */) /* ty=float32 */;
  %2380 = divide(%2378, -127f /* ty=float32 */) /* ty=float32 */;
  %2381 = maximum(%2379, %2380) /* ty=float32 */;
  %2382 = divide(%2272, %2381) /* ty=Tensor[(16, 160), float32] */;
  %2383 = round(%2382) /* ty=Tensor[(16, 160), float32] */;
  %2384 = nn.dense(%2369, %2272, units=None) /* ty=Tensor[(320, 16), float32] */;
  %2385 = max(%2384) /* ty=float32 */;
  %2386 = min(%2384) /* ty=float32 */;
  %2387 = divide(%2385, 127f /* ty=float32 */) /* ty=float32 */;
  %2388 = divide(%2386, -127f /* ty=float32 */) /* ty=float32 */;
  %2389 = cast(%2376, dtype="int8") /* ty=Tensor[(320, 160), int8] */;
  %2390 = cast(%2383, dtype="int8") /* ty=Tensor[(16, 160), int8] */;
  %2391 = maximum(%2387, %2388) /* ty=float32 */;
  %2392 = fn (%outer_arg_040: Tensor[(320, 160), int8], %outer_arg_140: Tensor[(16, 160), int8], %outer_arg_240: float32, %outer_arg_340: float32, %outer_arg_440: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_38") -> Tensor[(320, 16), int8] {
    %2368 = fn (%data40: Tensor[(320, 160), int8], %weights40: Tensor[(16, 160), int8], %s_data40: float32, %s_w40: float32, %s_act40: float32, Composite="ilavta.dense") -> Tensor[(320, 16), int8] {
      %2362 = nn.dense(%data40, %weights40, units=None, out_dtype="int32") /* ty=Tensor[(320, 16), int32] */;
      %2363 = multiply(%s_data40, %s_w40) /* ty=float32 */;
      %2364 = cast(%2362, dtype="float32") /* ty=Tensor[(320, 16), float32] */;
      %2365 = divide(%2363, %s_act40) /* ty=float32 */;
      %2366 = multiply(%2364, %2365) /* ty=Tensor[(320, 16), float32] */;
      %2367 = clip(%2366, a_min=-127f, a_max=127f) /* ty=Tensor[(320, 16), float32] */;
      cast(%2367, dtype="int8") /* ty=Tensor[(320, 16), int8] */
    };
    %2368(%outer_arg_040, %outer_arg_140, %outer_arg_240, %outer_arg_340, %outer_arg_440) /* ty=Tensor[(320, 16), int8] */
  };
  %2393 = %2392(%2389, %2390, %2374, %2381, %2391) /* ty=Tensor[(320, 16), int8] */;
  %2394 = cast(%2393, dtype="float32") /* ty=Tensor[(320, 16), float32] */;
  %2395 = multiply(%2394, %2391) /* ty=Tensor[(320, 16), float32] */;
  %2396 = reshape(%2395, newshape=[320, 1, 4, 4]) /* from_string */ /* ty=Tensor[(320, 1, 4, 4), float32] */;
  %2397 = add(%layers_16_shortcut_1_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2398 = sqrt(%2397) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2399 = divide(%573, %2398) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2400 = multiply(%2399, %layers_16_shortcut_1_weight) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2401 = expand_dims(%2400, axis=1) /* from_string */ /* ty=Tensor[(320, 1), float32] */;
  %2402 = transpose(%2396, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %2403 = expand_dims(%2401, axis=1) /* from_string */ /* ty=Tensor[(320, 1, 1), float32] */;
  %2404 = negative(%layers_16_shortcut_1_running_mean) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2405 = multiply(%2404, %2400) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2406 = add(%2405, %layers_16_shortcut_1_bias) /* from_string */ /* ty=Tensor[(320), float32] */;
  %2407 = expand_dims(%2406, axis=1) /* from_string */ /* ty=Tensor[(320, 1), float32] */;
  %2408 = multiply(%2402, %2403) /* from_string */ /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %2409 = expand_dims(%2407, axis=1) /* from_string */ /* ty=Tensor[(320, 1, 1), float32] */;
  %2410 = add(%2360, %2361) /* from_string */ /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %2411 = add(%2408, %2409) /* from_string */ /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %2412 = add(%2410, %2411) /* from_string */ /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %2413 = nn.pad(%2412, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %2414 = nn.pad(%2413, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* from_string */ /* ty=Tensor[(1, 320, 4, 4), float32] */;
  %2415 = windows(%2414, axis=1, window_shape=[320, 1, 1], strides=[1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 4, 4, 320, 1, 1), float32] */;
  %2416 = squeeze(%2415, axis=[1]) /* from_string */ /* ty=Tensor[(1, 4, 4, 320, 1, 1), float32] */;
  %2417 = reshape(%2416, newshape=[16, 320]) /* from_string */ /* ty=Tensor[(16, 320), float32] */;
  %2418 = max(%2417) /* ty=float32 */;
  %2419 = min(%2417) /* ty=float32 */;
  %2420 = divide(%2418, 127f /* ty=float32 */) /* ty=float32 */;
  %2421 = divide(%2419, -127f /* ty=float32 */) /* ty=float32 */;
  %2422 = maximum(%2420, %2421) /* ty=float32 */;
  %2423 = divide(%2417, %2422) /* ty=Tensor[(16, 320), float32] */;
  %2424 = round(%2423) /* ty=Tensor[(16, 320), float32] */;
  %2425 = nn.dense(%14, %2417, units=None) /* ty=Tensor[(1280, 16), float32] */;
  %2426 = max(%2425) /* ty=float32 */;
  %2427 = min(%2425) /* ty=float32 */;
  %2428 = divide(%2426, 127f /* ty=float32 */) /* ty=float32 */;
  %2429 = divide(%2427, -127f /* ty=float32 */) /* ty=float32 */;
  %2430 = cast(%21, dtype="int8") /* ty=Tensor[(1280, 320), int8] */;
  %2431 = cast(%2424, dtype="int8") /* ty=Tensor[(16, 320), int8] */;
  %2432 = maximum(%2428, %2429) /* ty=float32 */;
  %2433 = fn (%outer_arg_01: Tensor[(1280, 320), int8], %outer_arg_11: Tensor[(16, 320), int8], %outer_arg_21: float32, %outer_arg_31: float32, %outer_arg_41: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_39") -> Tensor[(1280, 16), int8] {
    %13 = fn (%data1: Tensor[(1280, 320), int8], %weights1: Tensor[(16, 320), int8], %s_data1: float32, %s_w1: float32, %s_act1: float32, Composite="ilavta.dense") -> Tensor[(1280, 16), int8] {
      %7 = nn.dense(%data1, %weights1, units=None, out_dtype="int32") /* ty=Tensor[(1280, 16), int32] */;
      %8 = multiply(%s_data1, %s_w1) /* ty=float32 */;
      %9 = cast(%7, dtype="float32") /* ty=Tensor[(1280, 16), float32] */;
      %10 = divide(%8, %s_act1) /* ty=float32 */;
      %11 = multiply(%9, %10) /* ty=Tensor[(1280, 16), float32] */;
      %12 = clip(%11, a_min=-127f, a_max=127f) /* ty=Tensor[(1280, 16), float32] */;
      cast(%12, dtype="int8") /* ty=Tensor[(1280, 16), int8] */
    };
    %13(%outer_arg_01, %outer_arg_11, %outer_arg_21, %outer_arg_31, %outer_arg_41) /* ty=Tensor[(1280, 16), int8] */
  };
  %2434 = %2433(%2430, %2431, %19, %2422, %2432) /* ty=Tensor[(1280, 16), int8] */;
  %2435 = cast(%2434, dtype="float32") /* ty=Tensor[(1280, 16), float32] */;
  %2436 = multiply(%2435, %2432) /* ty=Tensor[(1280, 16), float32] */;
  %2437 = reshape(%2436, newshape=[1280, 1, 4, 4]) /* from_string */ /* ty=Tensor[(1280, 1, 4, 4), float32] */;
  %2438 = add(%bn2_running_var, 1e-05f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1280), float32] */;
  %2439 = sqrt(%2438) /* from_string */ /* ty=Tensor[(1280), float32] */;
  %2440 = divide(%573, %2439) /* from_string */ /* ty=Tensor[(1280), float32] */;
  %2441 = multiply(%2440, %bn2_weight) /* from_string */ /* ty=Tensor[(1280), float32] */;
  %2442 = expand_dims(%2441, axis=1) /* from_string */ /* ty=Tensor[(1280, 1), float32] */;
  %2443 = transpose(%2437, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %2444 = expand_dims(%2442, axis=1) /* from_string */ /* ty=Tensor[(1280, 1, 1), float32] */;
  %2445 = negative(%bn2_running_mean) /* from_string */ /* ty=Tensor[(1280), float32] */;
  %2446 = multiply(%2445, %2441) /* from_string */ /* ty=Tensor[(1280), float32] */;
  %2447 = add(%2446, %bn2_bias) /* from_string */ /* ty=Tensor[(1280), float32] */;
  %2448 = expand_dims(%2447, axis=1) /* from_string */ /* ty=Tensor[(1280, 1), float32] */;
  %2449 = multiply(%2443, %2444) /* from_string */ /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %2450 = expand_dims(%2448, axis=1) /* from_string */ /* ty=Tensor[(1280, 1, 1), float32] */;
  %2451 = add(%2449, %2450) /* from_string */ /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %2452 = nn.relu(%2451) /* from_string */ /* ty=Tensor[(1, 1280, 4, 4), float32] */;
  %2453 = nn.avg_pool2d(%2452, pool_size=[4, 4], strides=[4, 4], padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %2454 = reshape(%2453, newshape=[1, 1280]) /* from_string */ /* ty=Tensor[(1, 1280), float32] */;
  %2455 = max(%2454) /* ty=float32 */;
  %2456 = min(%2454) /* ty=float32 */;
  %2457 = divide(%2455, 127f /* ty=float32 */) /* ty=float32 */;
  %2458 = divide(%2456, -127f /* ty=float32 */) /* ty=float32 */;
  %2459 = maximum(%2457, %2458) /* ty=float32 */;
  %2460 = divide(%2454, %2459) /* ty=Tensor[(1, 1280), float32] */;
  %2461 = round(%2460) /* ty=Tensor[(1, 1280), float32] */;
  %2462 = transpose(%linear_weight, axes=[1, 0]) /* from_string */ /* ty=Tensor[(1280, 10), float32] */;
  %2463 = transpose(%2462, axes=[1, 0]) /* from_string */ /* ty=Tensor[(10, 1280), float32] */;
  %2464 = max(%2463) /* ty=float32 */;
  %2465 = min(%2463) /* ty=float32 */;
  %2466 = divide(%2464, 127f /* ty=float32 */) /* ty=float32 */;
  %2467 = divide(%2465, -127f /* ty=float32 */) /* ty=float32 */;
  %2468 = maximum(%2466, %2467) /* ty=float32 */;
  %2469 = divide(%2463, %2468) /* ty=Tensor[(10, 1280), float32] */;
  %2470 = round(%2469) /* ty=Tensor[(10, 1280), float32] */;
  %2471 = nn.dense(%2454, %2463, units=None) /* ty=Tensor[(1, 10), float32] */;
  %2472 = max(%2471) /* ty=float32 */;
  %2473 = min(%2471) /* ty=float32 */;
  %2474 = divide(%2472, 127f /* ty=float32 */) /* ty=float32 */;
  %2475 = divide(%2473, -127f /* ty=float32 */) /* ty=float32 */;
  %2476 = cast(%2461, dtype="int8") /* ty=Tensor[(1, 1280), int8] */;
  %2477 = cast(%2470, dtype="int8") /* ty=Tensor[(10, 1280), int8] */;
  %2478 = maximum(%2474, %2475) /* ty=float32 */;
  %2479 = fn (%outer_arg_0: Tensor[(1, 1280), int8], %outer_arg_1: Tensor[(10, 1280), int8], %outer_arg_2: float32, %outer_arg_3: float32, %outer_arg_4: float32, Compiler="ilavta", Primitive=1, global_symbol="ilavta.dense_40") -> Tensor[(1, 10), int8] {
    %6 = fn (%data: Tensor[(1, 1280), int8], %weights: Tensor[(10, 1280), int8], %s_data: float32, %s_w: float32, %s_act: float32, Composite="ilavta.dense") -> Tensor[(1, 10), int8] {
      %0 = nn.dense(%data, %weights, units=None, out_dtype="int32") /* ty=Tensor[(1, 10), int32] */;
      %1 = multiply(%s_data, %s_w) /* ty=float32 */;
      %2 = cast(%0, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
      %3 = divide(%1, %s_act) /* ty=float32 */;
      %4 = multiply(%2, %3) /* ty=Tensor[(1, 10), float32] */;
      %5 = clip(%4, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 10), float32] */;
      cast(%5, dtype="int8") /* ty=Tensor[(1, 10), int8] */
    };
    %6(%outer_arg_0, %outer_arg_1, %outer_arg_2, %outer_arg_3, %outer_arg_4) /* ty=Tensor[(1, 10), int8] */
  };
  %2480 = %2479(%2476, %2477, %2459, %2468, %2478) /* ty=Tensor[(1, 10), int8] */;
  %2481 = cast(%2480, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %2482 = multiply(%2481, %2478) /* ty=Tensor[(1, 10), float32] */;
  add(%2482, %linear_bias) /* from_string */ /* ty=Tensor[(1, 10), float32] */
}
