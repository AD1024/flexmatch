#[version = "0.0.5"]
def @main(%input0: Tensor[(1, 3, 32, 32), float32], %v1_weight: Tensor[(64, 768), float32], %v1_bias: Tensor[(64), float32], %v2_0_affine_g: Tensor[(1, 1, 64), float32], %v2_0_affine_b: Tensor[(1, 1, 64), float32], %v2_0_fn_weight: Tensor[(4, 4, 1), float32], %v2_0_fn_bias: Tensor[(4), float32], %v2_0_scale: Tensor[(1, 1, 64), float32], %v2_1_affine_g: Tensor[(1, 1, 64), float32], %v2_1_affine_b: Tensor[(1, 1, 64), float32], %v2_1_fn_0_weight: Tensor[(256, 64), float32], %v2_1_fn_0_bias: Tensor[(256), float32], %v2_1_fn_2_weight: Tensor[(64, 256), float32], %v2_1_fn_2_bias: Tensor[(64), float32], %v2_1_scale: Tensor[(1, 1, 64), float32], %v3_0_affine_g: Tensor[(1, 1, 64), float32], %v3_0_affine_b: Tensor[(1, 1, 64), float32], %v3_0_fn_weight: Tensor[(4, 4, 1), float32], %v3_0_fn_bias: Tensor[(4), float32], %v3_0_scale: Tensor[(1, 1, 64), float32], %v3_1_affine_g: Tensor[(1, 1, 64), float32], %v3_1_affine_b: Tensor[(1, 1, 64), float32], %v3_1_fn_0_weight: Tensor[(256, 64), float32], %v3_1_fn_0_bias: Tensor[(256), float32], %v3_1_fn_2_weight: Tensor[(64, 256), float32], %v3_1_fn_2_bias: Tensor[(64), float32], %v3_1_scale: Tensor[(1, 1, 64), float32], %v4_0_affine_g: Tensor[(1, 1, 64), float32], %v4_0_affine_b: Tensor[(1, 1, 64), float32], %v4_0_fn_weight: Tensor[(4, 4, 1), float32], %v4_0_fn_bias: Tensor[(4), float32], %v4_0_scale: Tensor[(1, 1, 64), float32], %v4_1_affine_g: Tensor[(1, 1, 64), float32], %v4_1_affine_b: Tensor[(1, 1, 64), float32], %v4_1_fn_0_weight: Tensor[(256, 64), float32], %v4_1_fn_0_bias: Tensor[(256), float32], %v4_1_fn_2_weight: Tensor[(64, 256), float32], %v4_1_fn_2_bias: Tensor[(64), float32], %v4_1_scale: Tensor[(1, 1, 64), float32], %v5_0_affine_g: Tensor[(1, 1, 64), float32], %v5_0_affine_b: Tensor[(1, 1, 64), float32], %v5_0_fn_weight: Tensor[(4, 4, 1), float32], %v5_0_fn_bias: Tensor[(4), float32], %v5_0_scale: Tensor[(1, 1, 64), float32], %v5_1_affine_g: Tensor[(1, 1, 64), float32], %v5_1_affine_b: Tensor[(1, 1, 64), float32], %v5_1_fn_0_weight: Tensor[(256, 64), float32], %v5_1_fn_0_bias: Tensor[(256), float32], %v5_1_fn_2_weight: Tensor[(64, 256), float32], %v5_1_fn_2_bias: Tensor[(64), float32], %v5_1_scale: Tensor[(1, 1, 64), float32], %v6_g: Tensor[(1, 1, 64), float32], %v6_b: Tensor[(1, 1, 64), float32], %v8_weight: Tensor[(32, 64), float32], %v8_bias: Tensor[(32), float32]) -> Tensor[(1, 32), float32] {
  %0 = reshape(%input0, newshape=[1, 3, 2, 16, 2, 16]) /* ty=Tensor[(1, 3, 2, 16, 2, 16), float32] */;
  %1 = transpose(%0, axes=[0, 2, 4, 3, 5, 1]) /* ty=Tensor[(1, 2, 2, 16, 16, 3), float32] */;
  %2 = reshape(%1, newshape=[1, 4, 768]) /* ty=Tensor[(1, 4, 768), float32] */;
  %3 = transpose(%v1_weight, axes=[1, 0]) /* ty=Tensor[(768, 64), float32] */;
  %4 = reshape(%2, newshape=[-1, 768]) /* ty=Tensor[(4, 768), float32] */;
  %5 = transpose(%3, axes=[1, 0]) /* ty=Tensor[(64, 768), float32] */;
  %6 = nn.dense(%4, %5, units=None) /* ty=Tensor[(4, 64), float32] */;
  %7 = reshape(%6, newshape=[1, 4, 64]) /* ty=Tensor[(1, 4, 64), float32] */;
  %8 = add(%7, %v1_bias) /* ty=Tensor[(1, 4, 64), float32] */;
  %9 = multiply(%8, %v2_0_affine_g) /* ty=Tensor[(1, 4, 64), float32] */;
  %10 = add(%9, %v2_0_affine_b) /* ty=Tensor[(1, 4, 64), float32] */;
  %11 = nn.conv1d(%10, %v2_0_fn_weight, channels=4, kernel_size=[1]) /* ty=Tensor[(1, 4, 64), float32] */;
  %12 = nn.bias_add(%11, %v2_0_fn_bias) /* ty=Tensor[(1, 4, 64), float32] */;
  %13 = multiply(%12, %v2_0_scale) /* ty=Tensor[(1, 4, 64), float32] */;
  %14 = add(%13, %8) /* ty=Tensor[(1, 4, 64), float32] */;
  %15 = multiply(%14, %v2_1_affine_g) /* ty=Tensor[(1, 4, 64), float32] */;
  %16 = add(%15, %v2_1_affine_b) /* ty=Tensor[(1, 4, 64), float32] */;
  %17 = transpose(%v2_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(64, 256), float32] */;
  %18 = reshape(%16, newshape=[-1, 64]) /* ty=Tensor[(4, 64), float32] */;
  %19 = transpose(%17, axes=[1, 0]) /* ty=Tensor[(256, 64), float32] */;
  %20 = nn.dense(%18, %19, units=None) /* ty=Tensor[(4, 256), float32] */;
  %21 = reshape(%20, newshape=[1, 4, 256]) /* ty=Tensor[(1, 4, 256), float32] */;
  %22 = add(%21, %v2_1_fn_0_bias) /* ty=Tensor[(1, 4, 256), float32] */;
  %23 = multiply(%22, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 256), float32] */;
  %24 = erf(%23) /* ty=Tensor[(1, 4, 256), float32] */;
  %25 = multiply(%24, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 256), float32] */;
  %26 = add(0.5f /* ty=float32 */, %25) /* ty=Tensor[(1, 4, 256), float32] */;
  %27 = multiply(%22, %26) /* ty=Tensor[(1, 4, 256), float32] */;
  %28 = transpose(%v2_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(256, 64), float32] */;
  %29 = reshape(%27, newshape=[-1, 256]) /* ty=Tensor[(4, 256), float32] */;
  %30 = transpose(%28, axes=[1, 0]) /* ty=Tensor[(64, 256), float32] */;
  %31 = nn.dense(%29, %30, units=None) /* ty=Tensor[(4, 64), float32] */;
  %32 = reshape(%31, newshape=[1, 4, 64]) /* ty=Tensor[(1, 4, 64), float32] */;
  %33 = add(%32, %v2_1_fn_2_bias) /* ty=Tensor[(1, 4, 64), float32] */;
  %34 = multiply(%33, %v2_1_scale) /* ty=Tensor[(1, 4, 64), float32] */;
  %35 = add(%34, %14) /* ty=Tensor[(1, 4, 64), float32] */;
  %36 = multiply(%35, %v3_0_affine_g) /* ty=Tensor[(1, 4, 64), float32] */;
  %37 = add(%36, %v3_0_affine_b) /* ty=Tensor[(1, 4, 64), float32] */;
  %38 = nn.conv1d(%37, %v3_0_fn_weight, channels=4, kernel_size=[1]) /* ty=Tensor[(1, 4, 64), float32] */;
  %39 = nn.bias_add(%38, %v3_0_fn_bias) /* ty=Tensor[(1, 4, 64), float32] */;
  %40 = multiply(%39, %v3_0_scale) /* ty=Tensor[(1, 4, 64), float32] */;
  %41 = add(%40, %35) /* ty=Tensor[(1, 4, 64), float32] */;
  %42 = multiply(%41, %v3_1_affine_g) /* ty=Tensor[(1, 4, 64), float32] */;
  %43 = add(%42, %v3_1_affine_b) /* ty=Tensor[(1, 4, 64), float32] */;
  %44 = transpose(%v3_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(64, 256), float32] */;
  %45 = reshape(%43, newshape=[-1, 64]) /* ty=Tensor[(4, 64), float32] */;
  %46 = transpose(%44, axes=[1, 0]) /* ty=Tensor[(256, 64), float32] */;
  %47 = nn.dense(%45, %46, units=None) /* ty=Tensor[(4, 256), float32] */;
  %48 = reshape(%47, newshape=[1, 4, 256]) /* ty=Tensor[(1, 4, 256), float32] */;
  %49 = add(%48, %v3_1_fn_0_bias) /* ty=Tensor[(1, 4, 256), float32] */;
  %50 = multiply(%49, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 256), float32] */;
  %51 = erf(%50) /* ty=Tensor[(1, 4, 256), float32] */;
  %52 = multiply(%51, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 256), float32] */;
  %53 = add(0.5f /* ty=float32 */, %52) /* ty=Tensor[(1, 4, 256), float32] */;
  %54 = multiply(%49, %53) /* ty=Tensor[(1, 4, 256), float32] */;
  %55 = transpose(%v3_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(256, 64), float32] */;
  %56 = reshape(%54, newshape=[-1, 256]) /* ty=Tensor[(4, 256), float32] */;
  %57 = transpose(%55, axes=[1, 0]) /* ty=Tensor[(64, 256), float32] */;
  %58 = nn.dense(%56, %57, units=None) /* ty=Tensor[(4, 64), float32] */;
  %59 = reshape(%58, newshape=[1, 4, 64]) /* ty=Tensor[(1, 4, 64), float32] */;
  %60 = add(%59, %v3_1_fn_2_bias) /* ty=Tensor[(1, 4, 64), float32] */;
  %61 = multiply(%60, %v3_1_scale) /* ty=Tensor[(1, 4, 64), float32] */;
  %62 = add(%61, %41) /* ty=Tensor[(1, 4, 64), float32] */;
  %63 = multiply(%62, %v4_0_affine_g) /* ty=Tensor[(1, 4, 64), float32] */;
  %64 = add(%63, %v4_0_affine_b) /* ty=Tensor[(1, 4, 64), float32] */;
  %65 = nn.conv1d(%64, %v4_0_fn_weight, channels=4, kernel_size=[1]) /* ty=Tensor[(1, 4, 64), float32] */;
  %66 = nn.bias_add(%65, %v4_0_fn_bias) /* ty=Tensor[(1, 4, 64), float32] */;
  %67 = multiply(%66, %v4_0_scale) /* ty=Tensor[(1, 4, 64), float32] */;
  %68 = add(%67, %62) /* ty=Tensor[(1, 4, 64), float32] */;
  %69 = multiply(%68, %v4_1_affine_g) /* ty=Tensor[(1, 4, 64), float32] */;
  %70 = add(%69, %v4_1_affine_b) /* ty=Tensor[(1, 4, 64), float32] */;
  %71 = transpose(%v4_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(64, 256), float32] */;
  %72 = reshape(%70, newshape=[-1, 64]) /* ty=Tensor[(4, 64), float32] */;
  %73 = transpose(%71, axes=[1, 0]) /* ty=Tensor[(256, 64), float32] */;
  %74 = nn.dense(%72, %73, units=None) /* ty=Tensor[(4, 256), float32] */;
  %75 = reshape(%74, newshape=[1, 4, 256]) /* ty=Tensor[(1, 4, 256), float32] */;
  %76 = add(%75, %v4_1_fn_0_bias) /* ty=Tensor[(1, 4, 256), float32] */;
  %77 = multiply(%76, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 256), float32] */;
  %78 = erf(%77) /* ty=Tensor[(1, 4, 256), float32] */;
  %79 = multiply(%78, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 256), float32] */;
  %80 = add(0.5f /* ty=float32 */, %79) /* ty=Tensor[(1, 4, 256), float32] */;
  %81 = multiply(%76, %80) /* ty=Tensor[(1, 4, 256), float32] */;
  %82 = transpose(%v4_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(256, 64), float32] */;
  %83 = reshape(%81, newshape=[-1, 256]) /* ty=Tensor[(4, 256), float32] */;
  %84 = transpose(%82, axes=[1, 0]) /* ty=Tensor[(64, 256), float32] */;
  %85 = nn.dense(%83, %84, units=None) /* ty=Tensor[(4, 64), float32] */;
  %86 = reshape(%85, newshape=[1, 4, 64]) /* ty=Tensor[(1, 4, 64), float32] */;
  %87 = add(%86, %v4_1_fn_2_bias) /* ty=Tensor[(1, 4, 64), float32] */;
  %88 = multiply(%87, %v4_1_scale) /* ty=Tensor[(1, 4, 64), float32] */;
  %89 = add(%88, %68) /* ty=Tensor[(1, 4, 64), float32] */;
  %90 = multiply(%89, %v5_0_affine_g) /* ty=Tensor[(1, 4, 64), float32] */;
  %91 = add(%90, %v5_0_affine_b) /* ty=Tensor[(1, 4, 64), float32] */;
  %92 = nn.conv1d(%91, %v5_0_fn_weight, channels=4, kernel_size=[1]) /* ty=Tensor[(1, 4, 64), float32] */;
  %93 = nn.bias_add(%92, %v5_0_fn_bias) /* ty=Tensor[(1, 4, 64), float32] */;
  %94 = multiply(%93, %v5_0_scale) /* ty=Tensor[(1, 4, 64), float32] */;
  %95 = add(%94, %89) /* ty=Tensor[(1, 4, 64), float32] */;
  %96 = multiply(%95, %v5_1_affine_g) /* ty=Tensor[(1, 4, 64), float32] */;
  %97 = add(%96, %v5_1_affine_b) /* ty=Tensor[(1, 4, 64), float32] */;
  %98 = transpose(%v5_1_fn_0_weight, axes=[1, 0]) /* ty=Tensor[(64, 256), float32] */;
  %99 = reshape(%97, newshape=[-1, 64]) /* ty=Tensor[(4, 64), float32] */;
  %100 = transpose(%98, axes=[1, 0]) /* ty=Tensor[(256, 64), float32] */;
  %101 = nn.dense(%99, %100, units=None) /* ty=Tensor[(4, 256), float32] */;
  %102 = reshape(%101, newshape=[1, 4, 256]) /* ty=Tensor[(1, 4, 256), float32] */;
  %103 = add(%102, %v5_1_fn_0_bias) /* ty=Tensor[(1, 4, 256), float32] */;
  %104 = multiply(%103, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 4, 256), float32] */;
  %105 = erf(%104) /* ty=Tensor[(1, 4, 256), float32] */;
  %106 = multiply(%105, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 4, 256), float32] */;
  %107 = add(0.5f /* ty=float32 */, %106) /* ty=Tensor[(1, 4, 256), float32] */;
  %108 = multiply(%103, %107) /* ty=Tensor[(1, 4, 256), float32] */;
  %109 = transpose(%v5_1_fn_2_weight, axes=[1, 0]) /* ty=Tensor[(256, 64), float32] */;
  %110 = reshape(%108, newshape=[-1, 256]) /* ty=Tensor[(4, 256), float32] */;
  %111 = transpose(%109, axes=[1, 0]) /* ty=Tensor[(64, 256), float32] */;
  %112 = nn.dense(%110, %111, units=None) /* ty=Tensor[(4, 64), float32] */;
  %113 = reshape(%112, newshape=[1, 4, 64]) /* ty=Tensor[(1, 4, 64), float32] */;
  %114 = add(%113, %v5_1_fn_2_bias) /* ty=Tensor[(1, 4, 64), float32] */;
  %115 = multiply(%114, %v5_1_scale) /* ty=Tensor[(1, 4, 64), float32] */;
  %116 = add(%115, %95) /* ty=Tensor[(1, 4, 64), float32] */;
  %117 = multiply(%116, %v6_g) /* ty=Tensor[(1, 4, 64), float32] */;
  %118 = add(%117, %v6_b) /* ty=Tensor[(1, 4, 64), float32] */;
  %119 = reshape(%118, newshape=[1, 4, 64]) /* ty=Tensor[(1, 4, 64), float32] */;
  %120 = mean(%119, axis=[1]) /* ty=Tensor[(1, 64), float32] */;
  %121 = transpose(%120, axes=[0, 1]) /* ty=Tensor[(1, 64), float32] */;
  %122 = transpose(%v8_weight, axes=[1, 0]) /* ty=Tensor[(64, 32), float32] */;
  %123 = reshape(%121, newshape=[1, 64]) /* ty=Tensor[(1, 64), float32] */;
  %124 = transpose(%122, axes=[1, 0]) /* ty=Tensor[(32, 64), float32] */;
  %125 = nn.dense(%123, %124, units=32) /* ty=Tensor[(1, 32), float32] */;
  add(%125, %v8_bias) /* ty=Tensor[(1, 32), float32] */
}
